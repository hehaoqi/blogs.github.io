{"main":{"H5之「离线应用」":{"content":"<p>「离线存储」：顾名思义，在有线的环境下先缓存数据（包括静态资源，动态资源），从而在离线环境下，依旧可以正常使用应用（单页应用）</p>\n<!--more-->\n<h2 id=\"-applicationcache-\">静态资源存储(ApplicationCache)</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/applicationCache\">applicationCache</a> 是一套h5静态资源缓存方案.\n利用该技术可以实现配置静态资源/转发请求，加快应用加载速度，降低服务器负载.</p>\n<h3 id=\"-\">基本用法</h3>\n<ol>\n<li>引入manifest配置文件</li>\n</ol>\n<pre><code class=\"lang-html\"><span class=\"hljs-meta\">&lt;!doctype html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">manifest</span>=<span class=\"hljs-string\">\"cache.manifest\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n        ...\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n        ...\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<ol>\n<li>配置manifest文件</li>\n</ol>\n<pre><code class=\"lang-sh\">CACHE MANIFEST\n<span class=\"hljs-meta\"># 修改配置后，附加上下面一段js代码，才能更新缓存</span>\n<span class=\"hljs-meta\"># 2016972143</span>\n<span class=\"hljs-meta\"># 注释：需要缓存的文件，无论在线与否，均从缓存里读取</span>\nCACHE:\n/dist/<span class=\"hljs-number\">0.</span>eda078350ef514670764.bundle.js\n/dist/common.bundle.js?v=<span class=\"hljs-number\">2016972143</span>\n/dist/df9f379beae2559b27044dcfdc0653ab.png?v=<span class=\"hljs-number\">2016972143</span>\n/dist/home.bundle.js?v=<span class=\"hljs-number\">2016972143</span>\n/dist/home.css?v=<span class=\"hljs-number\">2016972143</span>\nuncached.js?v=<span class=\"hljs-number\">2016972143</span>\n\n<span class=\"hljs-meta\">#cached.css</span>\n\n<span class=\"hljs-meta\"># 注释：不缓存的文件，无论缓存中存在与否，均从新获取</span>\nNETWORK:\n*\n<span class=\"hljs-meta\">#uncached.js</span>\n<span class=\"hljs-meta\">#uncached.css</span>\n\n<span class=\"hljs-meta\"># 注释：获取不到资源时的备选路径，如index.html访问失败，则返回404页面</span>\nFALLBACK:\n<span class=\"hljs-meta\">#/v1/team/dirlists mock/team_dirlists.json</span>\n<span class=\"hljs-meta\">#/v1/team/app_filelist?isAdd=0&amp;source=team&amp;page=1&amp;pageSize=10&amp;sort=ftime&amp;from=hiwebapp&amp;fid=t293 mock/team_app_filelist.json</span>\n<span class=\"hljs-meta\">#index.html 404.html</span>\n</code></pre>\n<ol>\n<li>书写更新缓冲js</li>\n</ol>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// 每次打开页面执行该代码段，更新缓存</span>\n<span class=\"hljs-comment\">// !!! 注意：更新缓存后不会立即生效，需要重新加载页面</span>\n(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> cache = <span class=\"hljs-built_in\">window</span>.applicationCache;\n\n    cache.addEventListener(<span class=\"hljs-string\">'updateready'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (cache.status == cache.UPDATEREADY) {\n            <span class=\"hljs-comment\">// Browser downloaded a new app cache.</span>\n            <span class=\"hljs-comment\">// if (confirm('A new version of this site is available. Load it?')) {</span>\n                cache.swapCache();\n                <span class=\"hljs-built_in\">window</span>.location.reload();\n            <span class=\"hljs-comment\">// }</span>\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-comment\">// Manifest didn't changed. Nothing new to server.</span>\n        }\n    }, <span class=\"hljs-literal\">false</span>);\n\n    cache.update()\n\n}())\n</code></pre>\n<ol>\n<li><p>服务器配置</p>\n<ol>\n<li><p>配置manifest文件，响应 <code>Content-Type: text/cache-manifest</code> <code>Cache-Control: max-age=0</code></p>\n</li>\n<li><p>部署线上代码时更新manifest版本号与配置</p>\n</li>\n</ol>\n</li>\n</ol>\n<p>按照以上配置，这样就能实现静态资源缓存\n<img src=\"/upload/1473259140599.png\" alt=\"ClipboardImage\">\n如上图，<code>from cache</code>的加载时间相比其他网络请求快得多！<br>其中的<code>fetch/ajax</code>请求不能够通过静态资源存储，因为响应结果是可能会变的.</p>\n<p>那么对于异步ajax请求（动态资源）要通过什么方法才能存储起来呢？实现真正意义的离线存储.</p>\n<h2 id=\"-websql-indexeddb-\">动态资源存储(WebSQL/IndexedDB)</h2>\n<p>使用前端数据库可以较为灵活的控制动态资源存储，在这里我使用了indexedDB, 为什么不用WebSQL？</p>\n<ol>\n<li>之前做在线聊天应用时，使用过WebSQL存储聊天记录</li>\n<li>WebSQL已经被弃用</li>\n<li>WebSQL是传统的关系数据库，indexedDB是主流的NoSQL DB</li>\n</ol>\n<h3 id=\"-\">基本用法</h3>\n<ol>\n<li>创建一个通用的数据库访问接口</li>\n</ol>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> indexedDB = <span class=\"hljs-built_in\">window</span>.indexedDB || <span class=\"hljs-built_in\">window</span>.msIndexedDB || <span class=\"hljs-built_in\">window</span>.mozIndexedDB || <span class=\"hljs-built_in\">window</span>.webkitIndexedDB;\n\n<span class=\"hljs-comment\">// memCache 内存缓冲，避免频繁的读写数据库</span>\n<span class=\"hljs-keyword\">var</span> req, db, memCache = {};\n<span class=\"hljs-keyword\">if</span>(indexedDB) {\n    <span class=\"hljs-comment\">// version：2</span>\n    req = indexedDB.open(<span class=\"hljs-string\">'ajax_cache'</span>, <span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-comment\">// 保证caches成功创建</span>\n    req.onsuccess = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n        db = e.target.result;\n        <span class=\"hljs-keyword\">if</span>(!db.objectStoreNames.contains(<span class=\"hljs-string\">'caches'</span>)){\n            db.createObjectStore(<span class=\"hljs-string\">'caches'</span>, {<span class=\"hljs-attr\">keyPath</span>: <span class=\"hljs-string\">\"id\"</span>});\n        }\n    }\n    <span class=\"hljs-comment\">// 数据库版本改变触发</span>\n    req.onupgradeneeded=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n        <span class=\"hljs-keyword\">var</span> db=e.target.result;\n        <span class=\"hljs-keyword\">if</span>(!db.objectStoreNames.contains(<span class=\"hljs-string\">'caches'</span>)){\n            db.createObjectStore(<span class=\"hljs-string\">'caches'</span>, {<span class=\"hljs-attr\">keyPath</span>: <span class=\"hljs-string\">\"id\"</span>});\n        }\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'DB version changed to '</span> + db.version);\n    };\n    req.onerror = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">'indexedDB open failed. '</span>, err)\n    }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">isSupported</span>: !!indexedDB,\n    <span class=\"hljs-attr\">set</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">id, data</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">var</span> entity = {\n            <span class=\"hljs-attr\">id</span>: id,\n            <span class=\"hljs-attr\">data</span>: data\n        }\n        <span class=\"hljs-keyword\">var</span> transaction = db.transaction(<span class=\"hljs-string\">'caches'</span>, <span class=\"hljs-string\">'readwrite'</span>);\n        <span class=\"hljs-keyword\">var</span> store = transaction.objectStore(<span class=\"hljs-string\">'caches'</span>);\n        <span class=\"hljs-keyword\">var</span> req = store.put(entity);\n        req.onerror = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n            <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">'put data failed. '</span>, entity)\n        }\n        req.onsuccess = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n            memCache[id] = data\n            <span class=\"hljs-built_in\">console</span>.info(<span class=\"hljs-string\">'put data successed. '</span>, entity)\n        }\n    },\n    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">id</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n            <span class=\"hljs-keyword\">if</span>(memCache[id]) {\n                resolve(memCache[id]);\n                <span class=\"hljs-keyword\">return</span>;\n            }\n\n            <span class=\"hljs-keyword\">var</span> transaction = db.transaction(<span class=\"hljs-string\">'caches'</span>, <span class=\"hljs-string\">'readwrite'</span>);\n            <span class=\"hljs-keyword\">var</span> store = transaction.objectStore(<span class=\"hljs-string\">'caches'</span>);\n            <span class=\"hljs-keyword\">var</span> req = store.get(id);\n            req.onerror = <span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> {\n                <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">'get data failed. '</span>, id)\n                resolve()\n            }\n            req.onsuccess = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {\n                <span class=\"hljs-keyword\">var</span> rlt = e.target.result;\n                <span class=\"hljs-built_in\">console</span>.info(<span class=\"hljs-string\">'get data successed. '</span>, id, rlt)\n                resolve(rlt &amp;&amp; rlt.data)\n            }\n        })\n    }\n}\n</code></pre>\n<ol>\n<li>重写fetch/ajax方法</li>\n</ol>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">/* reset fetch function for offline be compatible*/</span>\n<span class=\"hljs-keyword\">var</span> fetch = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'isomorphic-fetch'</span>)\n<span class=\"hljs-keyword\">import</span> {parse} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'url'</span>\n\n<span class=\"hljs-keyword\">var</span> __fetch = fetch;\nfetch = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">url</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> rlt = parse(url, <span class=\"hljs-literal\">true</span>);\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">generateJson</span>(<span class=\"hljs-params\">json</span>) </span>{\n        <span class=\"hljs-keyword\">return</span> {\n            <span class=\"hljs-attr\">json</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n                <span class=\"hljs-keyword\">return</span> json\n            }\n        }\n    }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">generateErrorJson</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> generateJson({\n            <span class=\"hljs-attr\">errno</span>: <span class=\"hljs-number\">500</span>, <span class=\"hljs-attr\">errmsg</span>: <span class=\"hljs-string\">'你正处于离线状态'</span>,\n            <span class=\"hljs-attr\">result</span>: {\n                <span class=\"hljs-attr\">files</span>: []\n            }\n        })\n    }\n    <span class=\"hljs-keyword\">var</span> query = rlt.query;\n    <span class=\"hljs-comment\">// 去掉时间戳与重复的from参数</span>\n    <span class=\"hljs-keyword\">delete</span> query.t;\n    <span class=\"hljs-keyword\">delete</span> query.from;\n    <span class=\"hljs-keyword\">var</span> id = rlt.pathname\n    <span class=\"hljs-keyword\">var</span> key = MyUtils.jsonToUrl(query)\n    <span class=\"hljs-keyword\">if</span>(MyUtils.isOffline()) { <span class=\"hljs-comment\">// 离线</span>\n        <span class=\"hljs-keyword\">if</span>(!id) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n                resolve(generateErrorJson())\n            })\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">if</span>(DB.isSupported) {\n                <span class=\"hljs-keyword\">return</span> DB.get(id).then(<span class=\"hljs-function\"><span class=\"hljs-params\">json</span> =&gt;</span> {\n                    <span class=\"hljs-keyword\">return</span> (!json || !json[key])\n                        ? generateErrorJson()\n                        : generateJson(json[key])\n                })\n            } <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n                    resolve(generateErrorJson())\n                })\n            }\n        }\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">return</span> __fetch.apply(<span class=\"hljs-literal\">null</span>, [].slice.call(<span class=\"hljs-built_in\">arguments</span>))\n            .then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> res.json())\n            .then( <span class=\"hljs-function\">(<span class=\"hljs-params\">resJson</span>) =&gt;</span> {\n                <span class=\"hljs-keyword\">if</span>(DB.isSupported) {\n                    <span class=\"hljs-keyword\">var</span> tmp = {};\n                    tmp[key] = resJson;\n                    DB.get(id).then(<span class=\"hljs-function\"><span class=\"hljs-params\">json</span> =&gt;</span> {\n                        DB.set(id, <span class=\"hljs-built_in\">Object</span>.assign({}, json, tmp))\n                    })\n                }\n                <span class=\"hljs-keyword\">return</span> generateJson(resJson)\n            }\n        )\n    }\n\n}\n</code></pre>\n<p>可以在chrome的web tool中看到indexedDB<br><img src=\"/upload/1473260691273.png\" alt=\"ClipboardImage\"><br>每次请求都缓存下来了</p>\n<p>在脱离网络后！依旧可以模拟异步请求！</p>\n","head":{"title":"H5之「离线应用」","date":"07 Sep 2016","tags":["cache","indexedDB"]}},"MarkDown语法测试Demo":{"content":"<h1 id=\"-\">一级标题</h1>\n<pre><code><span class=\"hljs-meta\"># 一级标题(前后含空格)</span>\n</code></pre><h2 id=\"-\">二级标题</h2>\n<pre><code><span class=\"hljs-meta\">## 二级标题 </span>\n</code></pre><p>...以此类推\n<!--more--></p>\n<p><strong>粗体字</strong></p>\n<pre><code>*<span class=\"hljs-strong\">*粗体字*</span><span class=\"hljs-strong\">*</span>\n</code></pre><p><em>斜体字</em></p>\n<pre><code><span class=\"hljs-strong\">*斜体字*</span> \n</code></pre><p><strong><em>粗斜体字</em></strong></p>\n<pre><code>**<span class=\"hljs-strong\">*粗斜体字*</span>*<span class=\"hljs-strong\">*</span>\n</code></pre><blockquote>\n<p>引用块</p>\n</blockquote>\n<p><code>&gt; 引用块</code></p>\n<p>水平分割线</p>\n<hr>\n<p><code>------</code></p>\n<p><a href=\"http://baidu.com\">超链接</a>\n<code>[超链接](http://baidu.com)</code></p>\n<p><code>行内代码</code></p>\n<pre><code>行代码块\n</code></pre><pre><code><span class=\"hljs-comment\">/*\n * 高亮代码块\n */</span>\n <span class=\"hljs-keyword\">var</span> moyu = <span class=\"hljs-string\">'A Boy'</span>;\n <span class=\"hljs-built_in\">window</span>.moyu = <span class=\"hljs-string\">''</span>;\n</code></pre><ul>\n<li>无序列表项 一</li>\n<li>无序列表项 二</li>\n<li>无序列表项 三</li>\n</ul>\n<pre><code>-<span class=\"ruby\"> 无序列表项 一\n</span>-<span class=\"ruby\"> 无序列表项 二\n</span>-<span class=\"ruby\"> 无序列表项 三</span>\n</code></pre><ol>\n<li>有序列表项 一</li>\n<li>有序列表项 二</li>\n<li>有序列表项 三</li>\n</ol>\n<pre><code><span class=\"hljs-bullet\">1. </span>有序列表项 一\n<span class=\"hljs-bullet\">2. </span>有序列表项 二\n<span class=\"hljs-bullet\">3. </span>有序列表项 三\n</code></pre><p><img src=\"/images/img.jpg\" alt=\"图片\"></p>\n<pre><code>![<span class=\"hljs-string\">图片</span>](<span class=\"hljs-link\">/images/img.jpg</span>)\n</code></pre><table>\n<thead>\n<tr>\n<th>项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>计算机</td>\n<td style=\"text-align:right\">\\$1600</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td style=\"text-align:right\">\\$12</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td style=\"text-align:right\">\\$1</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<pre><code><span class=\"hljs-variable\">&lt;table&gt;</span>\n  <span class=\"hljs-variable\">&lt;thead&gt;</span>\n   <span class=\"hljs-variable\">&lt;tr&gt;</span>\n     <span class=\"hljs-variable\">&lt;th&gt;</span>Head1<span class=\"hljs-variable\">&lt;/th&gt;</span>\n     <span class=\"hljs-variable\">&lt;th&gt;</span>Head2<span class=\"hljs-variable\">&lt;/th&gt;</span>\n     <span class=\"hljs-variable\">&lt;th&gt;</span>Head3<span class=\"hljs-variable\">&lt;/th&gt;</span>\n     <span class=\"hljs-variable\">&lt;th&gt;</span>Head4<span class=\"hljs-variable\">&lt;/th&gt;</span>\n   <span class=\"hljs-variable\">&lt;/tr&gt;</span>\n  <span class=\"hljs-variable\">&lt;/thead&gt;</span>\n  <span class=\"hljs-variable\">&lt;tbody&gt;</span>\n   <span class=\"hljs-variable\">&lt;tr&gt;</span>\n      <span class=\"hljs-variable\">&lt;td&gt;</span>John<span class=\"hljs-variable\">&lt;/td&gt;</span>\n      <span class=\"hljs-variable\">&lt;td&gt;</span>Smith<span class=\"hljs-variable\">&lt;/td&gt;</span>\n      <span class=\"hljs-variable\">&lt;td&gt;</span>123 Main St.<span class=\"hljs-variable\">&lt;/td&gt;</span>\n      <span class=\"hljs-variable\">&lt;td&gt;</span>Springfield<span class=\"hljs-variable\">&lt;/td&gt;</span>\n   <span class=\"hljs-variable\">&lt;/tr&gt;</span>\n   <span class=\"hljs-variable\">&lt;tr&gt;</span>\n      <span class=\"hljs-variable\">&lt;td&gt;</span>Mary<span class=\"hljs-variable\">&lt;/td&gt;</span>\n      <span class=\"hljs-variable\">&lt;td&gt;</span>Jones<span class=\"hljs-variable\">&lt;/td&gt;</span>\n      <span class=\"hljs-variable\">&lt;td&gt;</span>456 Pine St.<span class=\"hljs-variable\">&lt;/td&gt;</span>\n      <span class=\"hljs-variable\">&lt;td&gt;</span>Dover<span class=\"hljs-variable\">&lt;/td&gt;</span>\n   <span class=\"hljs-variable\">&lt;/tr&gt;</span>\n   <span class=\"hljs-variable\">&lt;tr&gt;</span>\n      <span class=\"hljs-variable\">&lt;td&gt;</span>Jim<span class=\"hljs-variable\">&lt;/td&gt;</span>\n      <span class=\"hljs-variable\">&lt;td&gt;</span>Baker<span class=\"hljs-variable\">&lt;/td&gt;</span>\n      <span class=\"hljs-variable\">&lt;td&gt;</span>789 Park Ave.<span class=\"hljs-variable\">&lt;/td&gt;</span>\n      <span class=\"hljs-variable\">&lt;td&gt;</span>Lincoln<span class=\"hljs-variable\">&lt;/td&gt;</span>\n   <span class=\"hljs-variable\">&lt;/tr&gt;</span>\n <span class=\"hljs-variable\">&lt;/tbody&gt;</span>\n<span class=\"hljs-variable\">&lt;/table&gt;</span>\n\n|<span class=\"hljs-string\"> 项目        </span>|<span class=\"hljs-string\"> 价格   </span>|<span class=\"hljs-string\">  数量  </span>|\n|<span class=\"hljs-string\"> --------   </span>|<span class=\"hljs-string\"> -----:  </span>|<span class=\"hljs-string\"> :----:  </span>|\n|<span class=\"hljs-string\"> 计算机     </span>|<span class=\"hljs-string\"> \\$1600 </span>|<span class=\"hljs-string\">   5     </span>|\n|<span class=\"hljs-string\"> 手机        </span>|<span class=\"hljs-string\">   \\$12   </span>|<span class=\"hljs-string\">   12   </span>|\n|<span class=\"hljs-string\"> 管线        </span>|<span class=\"hljs-string\">    \\$1    </span>|<span class=\"hljs-string\">  234  </span>|\n</code></pre><p>参考 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>\n","head":{"title":"MarkDown语法测试Demo","date":"22 Apr 2016","tags":"MarkDown","categories":["Studying"]}},"Moka-birth":{"content":"<p>如今,单页应用&quot;横行霸道&quot;, 而且新时代知识信息海量,我们更需要自己的Blog来沉淀知识。\n综上,<code>Moka</code>走入了我们的实现。</p>\n<!--more-->\n<h2 id=\"usage\">Usage</h2>\n<p><img src=\"https://segmentfault.com/img/bVEjtX\" alt=\"\"></p>\n<p>为了第一眼能看到效果, 我先把如何安装使用说一下。</p>\n<ol>\n<li><p>一切从<code>npm</code>开始</p>\n<pre><code> $ npm <span class=\"hljs-selector-tag\">i</span> -g moka-cli\n</code></pre></li>\n<li>安装完成后</li>\n</ol>\n<pre><code>```sh    \n<span class=\"hljs-variable\">$ </span>moka -h <span class=\"hljs-comment\"># 帮助</span>\n<span class=\"hljs-variable\">$ </span>moka -V <span class=\"hljs-comment\"># 版本</span>\n\n<span class=\"hljs-variable\">$ </span>mkdir myBlog\n<span class=\"hljs-variable\">$ </span>cd myBlog\n<span class=\"hljs-variable\">$ </span>moka i  <span class=\"hljs-comment\"># 开启自己的spa Blog</span>\n<span class=\"hljs-variable\">$ </span>moka g  <span class=\"hljs-comment\"># generate static pages</span>\n<span class=\"hljs-variable\">$ </span>moka s  <span class=\"hljs-comment\"># 开启本地服务，动态更新_articles</span>\n<span class=\"hljs-variable\">$ </span>moka ss  <span class=\"hljs-comment\"># 开启本地静态服务，需要先generate</span>\n<span class=\"hljs-variable\">$ </span>moka n abc <span class=\"hljs-comment\"># 新建一个article</span>\n\n<span class=\"hljs-variable\">$ </span>moka d  <span class=\"hljs-comment\"># 根据 moka.config.json deploy 发布 需要设置sshkey </span>\n<span class=\"hljs-variable\">$ </span>moka b  <span class=\"hljs-comment\"># 根据 moka.config.json bak 发布 需要设置sshkey </span>\n``` \n</code></pre><ol>\n<li><p>线上效果</p>\n<p> <a href=\"https://moyuyc.github.io/\">moyuyc.github.io</a></p>\n</li>\n<li><p>详细解释</p>\n<p> 在当前目录下产生一套文件目录结构。如下：</p>\n<pre><code> moka-blog/\n ├── moka.config.json <span class=\"hljs-comment\"># moka配置，包括全局配置，如deploy，bak信息，主题选择</span>\n ├── package.json     <span class=\"hljs-comment\"># 可以无视</span>\n ├── <span class=\"hljs-keyword\">source</span>/          <span class=\"hljs-comment\"># moka g 会将该目录下非`_articles`文件夹放入static</span>\n │   ├── _articles/   <span class=\"hljs-comment\"># moka g 将`_articles`下的markdown文件解析到static中</span>\n │   └── <span class=\"hljs-keyword\">...</span>\n ├── static/          <span class=\"hljs-comment\"># moka g 产生的最终发布的目录，deploy便是发布该目录</span>\n │   └── <span class=\"hljs-keyword\">...</span>   \n ├── template/\n │   └── article.md   <span class=\"hljs-comment\"># moka n 命令产生新文章的模板</span>\n └── themes/          <span class=\"hljs-comment\"># moka g 将配置中选中对应的主题 `themeBuild`目录 拷贝到static</span>\n      └── moka/        <span class=\"hljs-comment\"># 主题文件夹，其中包含theme.config.json, 根据主题要求自行配置</span>\n</code></pre><p> 关于<code>moka deploy &amp; moka bak</code>需要设置<code>github key</code>，这里给出<a href=\"http://jingyan.baidu.com/article/a65957f4e91ccf24e77f9b11.html\">Windows平台的设置教程</a>，其他平台大同小异<br> 设置ssh key完成后，修改<code>moka.config.json</code> deploy与bak url字段即可，改成对应repo的url.</p>\n</li>\n</ol>\n<h2 id=\"document\">Document</h2>\n<p><code>Moka</code>, 认为前端UI与数据应该完全分离开来, 而不是像<code>hexo</code>那样传统的blog。\n这样做的好处不言而喻, 可能第一次加载数据较多, 但是后续操作更加畅快, 网站体验更加优化了。</p>\n<p>既然如此, 那么<code>Moka</code>产生的数据是什么样子的呢?</p>\n<h3 id=\"-\">数据格式</h3>\n<p><code>Moka</code> 采用主流的<code>json</code>字符串</p>\n<p><code>$ moka generate</code> 后产生的json如下</p>\n<pre><code class=\"lang-json\">{\n    <span class=\"hljs-attr\">\"main\"</span>: {\n        <span class=\"hljs-attr\">\"filename\"</span>: {\n            <span class=\"hljs-attr\">\"content\"</span>: <span class=\"hljs-string\">\"...\"</span>,\n            <span class=\"hljs-attr\">\"head\"</span>: {\n                <span class=\"hljs-attr\">\"date\"</span>: <span class=\"hljs-string\">\"\"</span>,\n                <span class=\"hljs-attr\">\"title\"</span>: <span class=\"hljs-string\">\"\"</span>,\n                <span class=\"hljs-attr\">\"tags\"</span>: [tagnames...] or <span class=\"hljs-string\">\"tagname\"</span>\n            }\n        }\n    },\n    <span class=\"hljs-attr\">\"index\"</span>: {\n        <span class=\"hljs-attr\">\"sorted\"</span>: [filenames...],\n        <span class=\"hljs-attr\">\"tagMap\"</span>: {\n            <span class=\"hljs-attr\">\"tagname\"</span>: [filenames...]\n        }\n    }\n}\n</code></pre>\n<p>说明</p>\n<ul>\n<li><code>&quot;content&quot;</code>可以通过配置控制, 返回<code>markdown</code>或者<code>html</code>(请看下文配置<code>returnRaw</code>说明)</li>\n<li><code>&quot;head&quot;</code>表示在文章中头部<code>---...---</code>中解析出来的数据, tags 可以是Array(多个)或String(单个)</li>\n<li><code>&quot;sorted&quot;</code>为按照时间倒序的filenames数组</li>\n<li><code>&quot;tagMap&quot;</code>为所有tag的映射, 即哪些文章包含<code>&quot;tagname&quot;</code></li>\n</ul>\n<h3 id=\"-\">配置说明</h3>\n<p>主要包含 <code>default config</code>, <code>moka.config.json</code>, <code>theme.config.json</code>, <code>theme.config.js</code></p>\n<ul>\n<li><p><code>default config</code> 为<code>Moka</code>初始配置, 不推荐修改</p>\n<pre><code class=\"lang-js\">  {\n   <span class=\"hljs-attr\">theme</span>: <span class=\"hljs-string\">\"moka\"</span>, <span class=\"hljs-comment\">// 当前主题</span>\n   apiRoot: <span class=\"hljs-string\">\"moka_api\"</span>, <span class=\"hljs-comment\">// moka generate 数据和配置 所存放的文件夹</span>\n\n   skipRegExp: <span class=\"hljs-string\">\"/[^\\.(md|markdown)]$/\"</span>, <span class=\"hljs-comment\">// 在 _articles 中渲染忽略的文件名正则表达式</span>\n\n   timeFormat: <span class=\"hljs-string\">\"YYYY/MM/DD HH:mm:ss\"</span>, <span class=\"hljs-comment\">// 默认产生的时间格式 (参看moment.js)</span>\n\n   <span class=\"hljs-comment\">// marked 配置参看(marked.js: https://github.com/chjj/marked)</span>\n   marked: {\n       <span class=\"hljs-attr\">options</span>: {\n           <span class=\"hljs-attr\">gfm</span>: <span class=\"hljs-literal\">true</span>,\n           <span class=\"hljs-attr\">tables</span>: <span class=\"hljs-literal\">true</span>,\n           <span class=\"hljs-attr\">breaks</span>: <span class=\"hljs-literal\">false</span>,\n           <span class=\"hljs-attr\">pedantic</span>: <span class=\"hljs-literal\">false</span>,\n           <span class=\"hljs-attr\">sanitize</span>: <span class=\"hljs-literal\">false</span>,\n           <span class=\"hljs-attr\">smartLists</span>: <span class=\"hljs-literal\">true</span>,\n           <span class=\"hljs-attr\">smartypants</span>: <span class=\"hljs-literal\">false</span>,\n           <span class=\"hljs-attr\">highlight</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">code</span>) </span>{\n               <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'highlight.js'</span>).highlightAuto(code).value;\n           }\n       },\n       <span class=\"hljs-attr\">setup</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">renderer</span>) </span>{\n           renderer.heading = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">text, level</span>) </span>{\n               <span class=\"hljs-keyword\">var</span> escapedText = text.toLowerCase().replace(<span class=\"hljs-regexp\">/[^\\w]+/g</span>, <span class=\"hljs-string\">'-'</span>);\n\n               <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'&lt;h'</span> + level + <span class=\"hljs-string\">'&gt;&lt;a name=\"'</span> +\n                   escapedText +\n                   <span class=\"hljs-string\">'\" class=\"anchor\" href=\"#'</span> +\n                   escapedText +\n                   <span class=\"hljs-string\">'\"&gt;&lt;span class=\"header-link\"&gt;&lt;/span&gt;&lt;/a&gt;'</span> +\n                   text + <span class=\"hljs-string\">'&lt;/h'</span> + level + <span class=\"hljs-string\">'&gt;'</span>;\n           }\n       }\n   },\n\n   <span class=\"hljs-attr\">returnRaw</span>: <span class=\"hljs-literal\">false</span>,  <span class=\"hljs-comment\">// * 是否返回markdown字符串, 那么需要主题自己转换markdown</span>\n   title: <span class=\"hljs-string\">'Blog'</span>,\n   <span class=\"hljs-attr\">favicon</span>: <span class=\"hljs-string\">\"favicon.ico\"</span>, <span class=\"hljs-comment\">// 网站图标</span>\n   injectScript: <span class=\"hljs-literal\">true</span>,  <span class=\"hljs-comment\">// 是否注入`moka.inject.js`</span>\n   themeBuild: <span class=\"hljs-string\">\"build\"</span> <span class=\"hljs-comment\">// 将会取 themes/moka/build 中文件放到 static 中, 认为build为生产环境代码</span>\n  }\n</code></pre>\n</li>\n<li><p><code>moka.config.json</code> 为全局站点配置, 在<code>apiRoot</code>中可以得到</p>\n<pre><code class=\"lang-js\">  {\n      <span class=\"hljs-string\">\"theme\"</span>: <span class=\"hljs-string\">\"moka\"</span>,\n      <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"Moyu Blog\"</span>,\n      <span class=\"hljs-string\">\"favicon\"</span>: <span class=\"hljs-string\">\"favicon.ico\"</span>,\n      <span class=\"hljs-string\">\"author\"</span>: <span class=\"hljs-string\">\"moyu\"</span>,\n      <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"moyu Blog\"</span>,\n      <span class=\"hljs-string\">\"siteName\"</span>: <span class=\"hljs-string\">\"site\"</span>,\n\n      // moka generate 配置\n      <span class=\"hljs-string\">\"deploy\"</span>: {\n          <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"git\"</span>,\n          <span class=\"hljs-string\">\"url\"</span>: <span class=\"hljs-string\">\"https://github.com/moyuyc/moyuyc.github.io.git\"</span>,\n          <span class=\"hljs-string\">\"branch\"</span>: <span class=\"hljs-string\">\"master\"</span>\n      }\n  }\n</code></pre>\n</li>\n<li><p><code>theme.config.json</code> 为主题配置, 在<code>apiRoot</code>中可以得到, 完全为主题开发者自定义</p>\n<p>  关于默认主题配置说明, 请看<a href=\"THEME_README.md\">theme readme</a></p>\n</li>\n<li><p><code>theme.config.js</code> 为了主题开放者也能够控制<code>Moka</code>产生数据, 可以修改该文件, 从而覆盖默认配置</p>\n<pre><code>  module.exports = {\n<span class=\"hljs-attr\">      apiRoot:</span> <span class=\"hljs-string\">\"moka_api\"</span>,\n<span class=\"hljs-attr\">      skipRegExp:</span> <span class=\"hljs-string\">\"/[^\\.(md|markdown)]$/\"</span>,\n      //http://momentjs.com/\n<span class=\"hljs-attr\">      timeFormat:</span> <span class=\"hljs-string\">'YYYY-MM-DD HH:mm'</span>, // 返回的时间格式\n\n<span class=\"hljs-attr\">      marked:</span> {\n<span class=\"hljs-attr\">          options:</span> {\n<span class=\"hljs-attr\">              gfm:</span> <span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-attr\">              tables:</span> <span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-attr\">              breaks:</span> <span class=\"hljs-literal\">false</span>,\n<span class=\"hljs-attr\">              pedantic:</span> <span class=\"hljs-literal\">false</span>,\n<span class=\"hljs-attr\">              sanitize:</span> <span class=\"hljs-literal\">false</span>,\n<span class=\"hljs-attr\">              smartLists:</span> <span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-attr\">              smartypants:</span> <span class=\"hljs-literal\">false</span>\n          },\n<span class=\"hljs-attr\">          setup:</span> function (renderer) {\n              // 在这里控制renderer规则, 详细请看 marked\n          }\n      },\n\n<span class=\"hljs-attr\">      returnRaw:</span> <span class=\"hljs-literal\">false</span>,\n<span class=\"hljs-attr\">      themeBuild:</span> <span class=\"hljs-string\">\"build\"</span>,\n  }\n</code></pre></li>\n</ul>\n<h3 id=\"-\">闲话</h3>\n<p>开发者可以通过<code>ajax/fetch/...</code>异步获取 <code>apiRoot</code>配置下的<code>db.json/moka.config.json/theme.config.json</code></p>\n<p>然后尽情用<code>react/vue/webpack/...</code>开发自己喜欢的主题吧。</p>\n<p>还有默认主题是用<code>react/webpack</code>开发的, \n但...不幸的是, 本人误操作把源码都删了..., 但万幸的是...留下了build, 生产环境的代码...</p>\n<p><a href=\"https://github.com/moyuyc/moka\">star</a></p>\n<h2 id=\"moka-\">Moka主题配置</h2>\n<p>默认主题是用<code>react/webpack</code>开发的, \n但...不幸的是, 本人误操作把源码都删了..., 但万幸的是...留下了build, 生产环境的代码...</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-string\">\"avatar\"</span>: <span class=\"hljs-string\">\"/head.jpg\"</span>, <span class=\"hljs-comment\">// 头像</span>\n  <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\" Moyu Dev Blog \"</span>, <span class=\"hljs-comment\">// 网站title</span>\n  <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\" Web, Node C/C++ Dev \"</span>,\n\n  <span class=\"hljs-string\">\"mainInfoColor\"</span>: <span class=\"hljs-string\">\"\"</span>, <span class=\"hljs-comment\">// 首页信息的文字颜色, 默认白色</span>\n  <span class=\"hljs-string\">\"canvasColor\"</span>: <span class=\"hljs-string\">\"\"</span>,   <span class=\"hljs-comment\">// 首页飘散的雪花颜色</span>\n\n  <span class=\"hljs-string\">\"leftPercentage\"</span>: <span class=\"hljs-number\">50</span>,<span class=\"hljs-comment\">// 左侧百分比, 右侧将会自动为100-leftPercentage, &lt;=0 将会在非首页页面隐藏left</span>\n\n  <span class=\"hljs-string\">\"pageSize\"</span>: <span class=\"hljs-number\">6</span>, <span class=\"hljs-comment\">// 每页文章数目, &lt;=0 一页展示所有</span>\n  <span class=\"hljs-string\">\"summaryNum\"</span>: <span class=\"hljs-number\">50</span>, <span class=\"hljs-comment\">// 摘要的文字截断字数</span>\n\n  <span class=\"hljs-string\">\"postTarget\"</span>: <span class=\"hljs-string\">\"_blank\"</span>, <span class=\"hljs-comment\">// 文章中link的跳转方式</span>\n  <span class=\"hljs-string\">\"iconTarget\"</span>: <span class=\"hljs-string\">\"_blank\"</span>, <span class=\"hljs-comment\">// 左侧icon的link的跳转方式</span>\n  <span class=\"hljs-string\">\"projectTarget\"</span>: <span class=\"hljs-string\">\"_blank\"</span>, <span class=\"hljs-comment\">// project中link的跳转方式</span>\n\n  <span class=\"hljs-string\">\"home\"</span>: { <span class=\"hljs-comment\">// 首页中右侧文字内容</span>\n    <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"About Me\"</span>,\n    <span class=\"hljs-string\">\"contentHtml\"</span>: <span class=\"hljs-string\">\"&lt;p&gt;I’m a Javascript enthusiast. I organise Baidu BEFE Meetup and try my best to help out with the team. I’m also a member of the core dev team.&lt;/p&gt;&lt;p&gt;&lt;img class='emoji' src='http://emojipedia-us.s3.amazonaws.com/cache/08/84/088419f4d97c19762c29008c4a89bbf4.png'/&gt;&lt;/p&gt;\"</span>\n  },\n  <span class=\"hljs-comment\">// projects</span>\n  <span class=\"hljs-string\">\"projects\"</span>: [\n    {\n      <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"Moyu Theme\"</span>,\n      <span class=\"hljs-string\">\"state\"</span>: <span class=\"hljs-string\">\"Doing\"</span>, <span class=\"hljs-comment\">//可无</span>\n      <span class=\"hljs-string\">\"image\"</span>: <span class=\"hljs-string\">\"https://raw.githubusercontent.com/TaylanTatli/Ramme/master/assets/img/screenshot-post.png\"</span>\n      <span class=\"hljs-string\">\"link\"</span>: <span class=\"hljs-string\">\"\"</span> <span class=\"hljs-comment\">// 点击跳转地址</span>\n    },\n    {\n      <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"Moyu Theme\"</span>,\n      <span class=\"hljs-string\">\"state\"</span>: <span class=\"hljs-string\">\"Doing\"</span>,\n      <span class=\"hljs-string\">\"image\"</span>: <span class=\"hljs-string\">\"https://raw.githubusercontent.com/TaylanTatli/Ramme/master/assets/img/screenshot-post.png\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"Moyu Theme\"</span>,\n      <span class=\"hljs-string\">\"state\"</span>: <span class=\"hljs-string\">\"Doing\"</span>,\n      <span class=\"hljs-string\">\"image\"</span>: <span class=\"hljs-string\">\"https://raw.githubusercontent.com/TaylanTatli/Ramme/master/assets/img/screenshot-post.png\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"Moyu Theme\"</span>,\n      <span class=\"hljs-string\">\"state\"</span>: <span class=\"hljs-string\">\"Doing\"</span>,\n      <span class=\"hljs-string\">\"image\"</span>: <span class=\"hljs-string\">\"https://raw.githubusercontent.com/TaylanTatli/Ramme/master/assets/img/screenshot-post.png\"</span>\n    },\n    {\n      <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"Moyu Theme\"</span>,\n      <span class=\"hljs-string\">\"state\"</span>: <span class=\"hljs-string\">\"Doing\"</span>,\n      <span class=\"hljs-string\">\"image\"</span>: <span class=\"hljs-string\">\"https://raw.githubusercontent.com/TaylanTatli/Ramme/master/assets/img/screenshot-post.png\"</span>\n    }\n  ],\n\n  <span class=\"hljs-string\">\"icon\"</span>: [ <span class=\"hljs-comment\">// 左侧icons key命名参看font-awesome.css</span>\n    {\n      <span class=\"hljs-string\">\"github\"</span>: <span class=\"hljs-string\">\"https://github.com/moyuyc\"</span>\n    }\n  ],\n\n  <span class=\"hljs-string\">\"coverImage\"</span>: { <span class=\"hljs-comment\">// 左侧封面</span>\n    <span class=\"hljs-string\">\"images\"</span>: {\n      <span class=\"hljs-string\">\"tags\"</span>: <span class=\"hljs-string\">\"http://taylantatli.me/Halve/images/unsplash-gallery-image-3.jpg\"</span>,\n      <span class=\"hljs-string\">\"home\"</span>: <span class=\"hljs-string\">\"http://taylantatli.me/Halve/images/unsplash-image-10.jpg\"</span>,\n      <span class=\"hljs-string\">\"article\"</span>: <span class=\"hljs-string\">\"http://taylantatli.me/Halve/images/unsplash-gallery-image-3.jpg\"</span>,\n      <span class=\"hljs-string\">\"serach\"</span>: <span class=\"hljs-string\">\"http://taylantatli.me/Halve/images/unsplash-image-10.jpg\"</span>,\n      <span class=\"hljs-string\">\"notExist\"</span>: <span class=\"hljs-string\">\"http://taylantatli.me/Halve/images/unsplash-gallery-image-3.jpg\"</span>,\n      <span class=\"hljs-string\">\"posts\"</span>: [ <span class=\"hljs-comment\">// posts可为数组(对于每一页), 可为字符串</span>\n        <span class=\"hljs-string\">\"http://taylantatli.me/Halve/images/unsplash-image-10.jpg\"</span>,\n        <span class=\"hljs-string\">\"http://taylantatli.me/Halve/images/home.png\"</span>,\n        <span class=\"hljs-string\">\"http://taylantatli.me/Halve/images/unsplash-gallery-image-3.jpg\"</span>\n      ]\n    },\n\n    <span class=\"hljs-string\">\"articleCover\"</span>: <span class=\"hljs-literal\">true</span>   <span class=\"hljs-comment\">// 是否开启文章封面, 在文章头部配置 `cover: ...` 效果请看默认文章`Linux C学习一周`</span>\n  }\n}\n</code></pre>\n","head":{"title":"Moka (SPA Blog For Everyone)","date":"16 Oct 2016","tags":["moka","spa"]}},"b_vs_strong_&_i_vs_em_(html标签语义化)":{"content":"<h1 id=\"-html-\">关于html标签语义化</h1>\n<p><a href=\"http://baike.baidu.com/link?url=WuGJOFv_8m6MKYsARovHAFV-dD_cR9IIInPoAj8BTcn9mUZ1gsbPKUmgScuTJNGyjMq3vSDz8XpE1RKbGN_7Lq\">百度百科</a>\n用自己的话来说，就是一个是用来给人看的（语义化，如header/footer/nav...）,\n一个是给机器看的（如一大堆的div，通过css一样可以达到效果）</p>\n<blockquote>\n<p>语义化的网页的好处，最主要的就是对搜索引擎友好，有了良好的结构和语义你的网页内容自然容易被搜索引擎抓取，你网站的推广便可以省下不少的功夫。\n语义 Web 技术有助于利用基于开放标准的技术，从数据、文档内容或应用代码中分离出意义。</p>\n</blockquote>\n<!--more-->\n<h1 id=\"-\">正题</h1>\n<p>关于<code>b/strong</code> &amp; <code>i/em</code>讨论，<a href=\"http://www.zhihu.com/question/19551271\">知乎</a>\n<code>b</code>和<code>i</code> 是没有感情色彩的，只是一个文本样式而已。\n<code>strong</code>和<code>em</code> 有感情色彩，\n<code>strong</code> 加重语气。最重的那种。\n<code>em</code> 同为加强语气，但气势弱些。\n那么有无感情色彩有什么作用呢？\n其实web有个听觉系统，能将页面内容<strong>读</strong>出来，详细请看<a href=\"http://www.w3school.com.cn/cssref/css_ref_aural.asp\">CSS听觉参考</a>\n而 <code>em/strong</code> 在机器识别发音的时候会产生重读效果。</p>\n<h1 id=\"demo\">demo</h1>\n<p><strong>I&#39;m <code>strong</code></strong>\n<b>I&#39;m <code>b</code></b>\n<em>I&#39;m <code>em</code></em>\n<i>I&#39;m <code>i</code></i></p>\n","head":{"title":"b vs strong & i vs em (html标签语义化)","date":"24 Apr 2016","categories":["前端"],"tags":["html"]}},"canvas绘制平面花瓣":{"content":"<p><iframe src='/htm/canvas1.html' style='width:100%; height:500px;'></iframe></p>\n<blockquote>\n<p>双击鼠标左键添加动态花瓣，(多了动态效果不好)</p>\n</blockquote>\n<p>完整Demo地址\n<a href=\"/htm/canvas1.html\">Demo</a></p>\n<!--more-->\n<h2 id=\"-canvas-\">关于 <code>canvas</code></h2>\n<p><a href=\"http://www.w3school.com.cn/tags/html_ref_canvas.asp\">参考资料</a></p>\n<blockquote>\n<p>HTML5 <code>canvas</code> 标签用于绘制图像（通过脚本，通常是 JavaScript）。</p>\n</blockquote>\n<h2 id=\"-svg-\">关于 <code>svg</code></h2>\n<p><a href=\"http://www.w3school.com.cn/svg/\">参考资料</a></p>\n<blockquote>\n<p>SVG 意为可缩放矢量图形（Scalable Vector Graphics）。\nsvg图形能够自由的进行缩放，而不会失真，而canvas是位图图像，放大会有像素点。\nsvg通过标签进行操作画图。</p>\n</blockquote>\n<p>演示可以查看我前一段时间做的\n<a href=\"http://moyuyc.xyz/compiler\">正则表达式-&gt;NFA-&gt;DFA-&gt;MFA，输入<code>x(a|v*)</code>，查看svg效果</a> </p>\n<p><strong>当然，该效果我是用canvas实现的</strong></p>\n<h2 id=\"-\">废话不多说，上菜！</h2>\n<h3 id=\"-\">解释一下</h3>\n<ul>\n<li>核心代码<pre><code class=\"lang-javascript\">function Flower(c,petals,size,x,y,rotate){\n  <span class=\"hljs-keyword\">this</span>.c = c || [<span class=\"hljs-number\">255</span>,<span class=\"hljs-number\">255</span>,<span class=\"hljs-number\">255</span>];\n  <span class=\"hljs-keyword\">this</span>.petals = petals || <span class=\"hljs-number\">4</span>;\n  <span class=\"hljs-keyword\">this</span>.size = size || <span class=\"hljs-number\">5</span>;\n  <span class=\"hljs-keyword\">this</span>.x = x || <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">this</span>.y = y || <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">this</span>.rotate = rotate || <span class=\"hljs-number\">0</span>;\n}\nFlower.prototype.draw = function(){\n  <span class=\"hljs-keyword\">var</span> _rad = <span class=\"hljs-keyword\">this</span>.size,_num_pts=<span class=\"hljs-keyword\">this</span>.petals,_x=<span class=\"hljs-keyword\">this</span>.x,_y=<span class=\"hljs-keyword\">this</span>.y,c=<span class=\"hljs-keyword\">this</span>.c;\n  ctx.save();\n  ctx.shadowBlur = <span class=\"hljs-number\">30</span>; <span class=\"hljs-comment\">//阴影程度</span>\n  ctx.lineWidth = <span class=\"hljs-number\">1</span>;\n  ctx.shadowColor = utils.rgba(c[<span class=\"hljs-number\">0</span>],c[<span class=\"hljs-number\">1</span>],c[<span class=\"hljs-number\">2</span>],<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//阴影颜色</span>\n  ctx.fillStyle = utils.rgba(c[<span class=\"hljs-number\">0</span>],c[<span class=\"hljs-number\">1</span>],c[<span class=\"hljs-number\">2</span>],<span class=\"hljs-number\">.6</span>); <span class=\"hljs-comment\">//填充颜色</span>\n  c2 = c.map((x)=&gt;Math.floor(x/<span class=\"hljs-number\">1.6</span>));           <span class=\"hljs-comment\">//lambda表达式写法</span>\n  ctx.strokeStyle = utils.rgba(c2[<span class=\"hljs-number\">0</span>],c2[<span class=\"hljs-number\">1</span>],c2[<span class=\"hljs-number\">2</span>],<span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">//边框颜色</span>\n  <span class=\"hljs-keyword\">var</span> pts = [];\n  <span class=\"hljs-keyword\">var</span> _a = <span class=\"hljs-keyword\">this</span>.rotate+(tick*<span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span> ; i &lt;= _num_pts ; i++){<span class=\"hljs-comment\">//增量法提高效率</span>\n      pts.push({x:utils.P2L(_rad, _a).x,y:utils.P2L(_rad, _a).y}); <span class=\"hljs-comment\">//P2L将极坐标转换为平面坐标</span>\n      _a += (<span class=\"hljs-number\">360</span>/_num_pts);\n  }\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">1</span> ; i&lt;= _num_pts; i+=<span class=\"hljs-number\">2</span>){\n      idx= i%_num_pts;\n      ctx.beginPath();<span class=\"hljs-comment\">//开始绘制</span>\n      ctx.moveTo(_x,_y);<span class=\"hljs-comment\">//起点为(_x,_y)</span>\n      ctx.bezierCurveTo(_x+pts[i<span class=\"hljs-number\">-1</span>].x,_y+pts[i<span class=\"hljs-number\">-1</span>].y,_x+pts[idx+<span class=\"hljs-number\">1</span>].x,_y+pts[idx+<span class=\"hljs-number\">1</span>].y,_x,_y);<span class=\"hljs-comment\">//绘制贝塞尔曲线</span>\n      ctx.stroke();<span class=\"hljs-comment\">//闭合图形边框</span>\n      ctx.fill();<span class=\"hljs-comment\">//填充图形</span>\n  }\n  ctx.restore();\n}\nHTMLCanvasElement.prototype.magicBg = function(){\n  <span class=\"hljs-keyword\">var</span> ctx = <span class=\"hljs-keyword\">this</span>.getContext(<span class=\"hljs-string\">'2d'</span>);\n  <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-keyword\">this</span>.grd){\n      <span class=\"hljs-comment\">//实现从画布中心往外呈圆形扩散，渐变。</span>\n      <span class=\"hljs-keyword\">this</span>.grd=ctx.createRadialGradient(<span class=\"hljs-keyword\">this</span>.width/<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">this</span>.height/<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">this</span>.width/<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">this</span>.height/<span class=\"hljs-number\">2</span>,Math.min(<span class=\"hljs-keyword\">this</span>.width,<span class=\"hljs-keyword\">this</span>.height)/<span class=\"hljs-number\">1.2</span>);\n      <span class=\"hljs-keyword\">this</span>.grd.addColorStop(<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">\"rgba(255,255,255,.25)\"</span>);\n      <span class=\"hljs-keyword\">this</span>.grd.addColorStop(<span class=\"hljs-number\">1</span>,<span class=\"hljs-keyword\">this</span>.utils.rgba(<span class=\"hljs-number\">200</span>+<span class=\"hljs-keyword\">this</span>.utils.randomInt(<span class=\"hljs-number\">56</span>),<span class=\"hljs-number\">200</span>+<span class=\"hljs-keyword\">this</span>.utils.randomInt(<span class=\"hljs-number\">56</span>),<span class=\"hljs-number\">200</span>+<span class=\"hljs-keyword\">this</span>.utils.randomInt(<span class=\"hljs-number\">56</span>),<span class=\"hljs-number\">.65</span>));\n  }\n  ctx.save();\n  ctx.clearRect(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">this</span>.width,<span class=\"hljs-keyword\">this</span>.height);\n  ctx.fillStyle = <span class=\"hljs-keyword\">this</span>.grd;\n  ctx.fillRect(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">this</span>.width,<span class=\"hljs-keyword\">this</span>.height);\n  ctx.restore();\n}\n</code></pre>\n</li>\n<li>Flower对象解释</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>默认</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>c</code></td>\n<td>花瓣的颜色</td>\n<td>[255,255,255]</td>\n<td>Array</td>\n</tr>\n<tr>\n<td><code>petals</code></td>\n<td>花瓣个数</td>\n<td>4</td>\n<td>Number</td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>半径大小</td>\n<td>5</td>\n<td>Number</td>\n</tr>\n<tr>\n<td><code>x</code></td>\n<td>中心 x 坐标</td>\n<td>0</td>\n<td>Number</td>\n</tr>\n<tr>\n<td><code>y</code></td>\n<td>中心 y 坐标</td>\n<td>0</td>\n<td>Number</td>\n</tr>\n<tr>\n<td><code>rotate</code></td>\n<td>绕中心旋转角度</td>\n<td>0</td>\n<td>Number(单位：度)</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>Flower.draw</code> 方法解释</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>_rad</code></td>\n<td>radix，对应<code>size</code></td>\n</tr>\n<tr>\n<td><code>_num_pts</code></td>\n<td>对应<code>petals</code></td>\n</tr>\n<tr>\n<td><code>_x</code></td>\n<td>对应<code>x</code></td>\n</tr>\n<tr>\n<td><code>_y</code></td>\n<td>对应<code>y</code></td>\n</tr>\n<tr>\n<td><code>c</code></td>\n<td>对应<code>c</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>关于贝塞尔曲线，<a href=\"http://bbs.csdn.net/topics/390358020\">参考资料</a></li>\n</ul>\n<p><img src=\"/images/bezier3.gif\" alt=\"IMG\"></p>\n<p><center>图：三次贝塞尔曲线动态绘制效果</center>\n<img src=\"/htm/images/canvas1.png\" alt=\"IMG\"></p>\n<p><center>图：花瓣与其贝塞尔曲线控制点</center></p>\n<ul>\n<li>怎么使用？</li>\n</ul>\n<ol>\n<li><code>&lt;script src=&#39;drawflower.js&#39;&gt;&lt;/script&gt;</code></li>\n<li><code>canvas.drawFlower(option);</code></li>\n</ol>\n<pre><code class=\"lang-javascript\">//default option\n{\n<span class=\"hljs-attr\">    animate:</span><span class=\"hljs-literal\">false</span>,\n<span class=\"hljs-attr\">    rotate:</span><span class=\"hljs-number\">90</span>,  \n<span class=\"hljs-attr\">    randomSize:</span><span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-attr\">    randomColor:</span><span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-attr\">    randomPetals:</span> <span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-attr\">    pos:</span>{\n<span class=\"hljs-attr\">        x:</span>this.width/<span class=\"hljs-number\">2</span>,\n<span class=\"hljs-attr\">        y:</span>this.height/<span class=\"hljs-number\">2</span>\n    }\n}\n</code></pre>\n<p>or</p>\n<pre><code class=\"lang-javascript\">{\n<span class=\"hljs-attr\">    animate:</span><span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-attr\">    rotate:</span><span class=\"hljs-bullet\">-20</span>,  \n<span class=\"hljs-attr\">    randomSize:</span><span class=\"hljs-literal\">false</span>,\n<span class=\"hljs-attr\">    size:</span><span class=\"hljs-number\">10</span>,\n<span class=\"hljs-attr\">    randomColor:</span><span class=\"hljs-literal\">false</span>,\n<span class=\"hljs-attr\">    color:</span>[<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">100</span>],\n<span class=\"hljs-attr\">    randomPetals:</span> <span class=\"hljs-literal\">false</span>,\n<span class=\"hljs-attr\">    petals:</span><span class=\"hljs-number\">6</span>,\n<span class=\"hljs-attr\">    pos:</span>{\n<span class=\"hljs-attr\">        x:</span><span class=\"hljs-number\">0</span>,\n<span class=\"hljs-attr\">        y:</span><span class=\"hljs-number\">0</span>\n    }\n}\n</code></pre>\n<h3 id=\"forkit\">ForkIt</h3>\n<p><a href=\"https://github.com/moyuyc/drawflower\">Fork!</a></p>\n","head":{"title":"canvas绘制平面花瓣","date":"26 Apr 2016","categories":["前端"],"tags":["js","canvas","页面效果"]}},"componentWillReceiveProps-vs-componentWillUpdate":{"content":"<p>最近在写博客主题的时候，遇到一个react的坑，遂总结一番。</p>\n<p><code>componentWillReceiveProps</code> Vs <code>componentWillUpdate</code></p>\n<p>两个方法，根据语义去理解，可以读出这样的信息：</p>\n<p><code>componentWillReceiveProps</code>会在<code>componentWillUpdate</code>之前调用，而且调用<code>componentWillUpdate</code>的条件为<code>shouldComponentUpdate</code> return true</p>\n<p>那么，我便想当然的，在<code>componentWillUpdate</code>方法中调用了<code>setState</code>方法，然后便觉得在<code>render</code>中的<code>state</code>就是更新后的值了.</p>\n<pre><code class=\"lang-js\">componentWillUpdate(nextProps) {\n    <span class=\"hljs-keyword\">if</span>(this.props.a !== nextProps.a) {\n        this.setState(<span class=\"hljs-meta\">{...}</span>);\n    }\n}\n</code></pre>\n<p>然而，事实并非如此，调用<code>this.setState()</code>后，在<code>render()</code>中并没有改变<code>state</code>。</p>\n<p><a href=\"https://facebook.github.io/react/docs/react-component.html\">官方文档</a>有下面一段话:</p>\n<blockquote>\n<p>componentWillUpdate() is invoked immediately before rendering when new props or state are being received. Use this as an opportunity to perform preparation before an update occurs. This method is not called for the initial render.</p>\n<p>Note that you cannot call this.setState() here. If you need to update state in response to a prop change, use componentWillReceiveProps() instead.</p>\n</blockquote>\n<p>这段话说的很清楚了！<code>componentWillUpdate</code>会在<code>render</code>之前时刻调用，在第一次<code>render</code>的时候不会调用。<br><strong>你不能在该方法中调用<code>this.setState()</code>，请用<code>componentWillReceiveProps()</code>代替</strong></p>\n<p>那么为什么会这样呢？</p>\n<p>其实，<a href=\"https://facebook.github.io/react/docs/react-component.html#setstate\"><code>this.setState()</code></a>不是同步方法<br><code>setState(nextState, callback)</code>后面会带有回调函数，如果你将上诉代码做些修改：  </p>\n<pre><code class=\"lang-js\">componentWillUpdate(nextProps) {\n    <span class=\"hljs-keyword\">if</span>(this.props.a !== nextProps.a) {\n        this.setState(<span class=\"hljs-meta\">{...}</span>, function() {\n            alert('state <span class=\"hljs-type\">Updated</span>');\n        });\n    }\n}\n</code></pre>\n<p>你就会发现，在<code>render()</code>结束后，才会<code>alert()</code></p>\n<p>那么，为什么<code>react</code>将<code>this.setState()</code>设计为非同步方法呢？<br><a href=\"http://stackoverflow.com/questions/36085726/setstate-in-reactjs-is-async-or-sync\">网上的解释</a>为:</p>\n<blockquote>\n<p>setState() does not immediately mutate this.state but creates a pending state transition. Accessing this.state after calling this method can potentially return the existing value. There is no guarantee of synchronous operation of calls to setState and calls may be batched for performance gains.</p>\n<p>This is because setState alters the state and causes rerendering. This can be an expensive operation and making it synchronous might leave the browser unresponsive. \nThus the setState calls are asynchronous as well as batched for better UI experience and performance.</p>\n</blockquote>\n<p>完.</p>\n","head":{"title":"componentWillReceiveProps Vs componentWillUpdate","date":"23 Oct 2016","tags":["react"],"cover":"http://blog.zingchart.com/content/images/2016/06/react.png"}},"git捣鼓记之「Pull Request」":{"content":"<h1 id=\"-\">前言</h1>\n<p>　　昨天，又捣鼓了一会儿git，因为想把我关于<a href=\"https://github.com/iissnan/hexo-theme-next\">NexT</a>主题的修改提交到原作者github上，以方便更多人使用。\n<!--more--></p>\n<h1 id=\"-\">修改之处</h1>\n<p>　　原版的主题中，有三种Schema（Muse/Mist/Pisces），在主题的配置文件<code>_config.yml</code>中，有sidebar:position属性，但是却反人类的<strong>仅仅</strong>只支持Pisces\n<img src=\"/htm/images/git1_sidebar.png\" alt=\"git1_sidebar\"></p>\n<p>　　Pisces设置sidebar:position为left后，效果如下(图片来自原作者博客)：\n<img src=\"/htm/images/git1_2.png\" alt=\"\"></p>\n<p>　　于是乎，我便「一言不合，开始动手」，研究起其他两个主题的sidebar源码起来。\n有了原作者代码的参考，照葫芦画瓢，不一会儿也修改好了。\n为了让更多人知道我闲的蛋疼的举动，于是我便打算 Pull Request.</p>\n<h1 id=\"pull-request-\">Pull Request！</h1>\n<h2 id=\"fork\">Fork</h2>\n<p>　　首先，找到你需要修改的项目，Fork It！\n<img src=\"/htm/images/git1_fork.png\" alt=\"fork\"></p>\n<h2 id=\"clone\">Clone</h2>\n<p>　　Fork完成之后，找到你Fork的项目。</p>\n<pre><code>git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">{ssh</span> <span class=\"hljs-keyword\">or</span> https}\ncd {name} <span class=\"hljs-comment\"># 进入项目目录</span>\n</code></pre><h2 id=\"new-branch-fix-bug\">New Branch &amp; Fix Bug</h2>\n<p>　　Clone之后，切换分支（branch）</p>\n<pre><code>git checkout -<span class=\"hljs-selector-tag\">b</span> fix-bug\n</code></pre><p>　　然后在本地尽情地修改吧，修改完成后</p>\n<pre><code>git <span class=\"hljs-keyword\">add</span><span class=\"bash\"> . &amp;&amp; git commit -m <span class=\"hljs-string\">\"fix-bug\"</span>\n</span>git push origin fix-bug\n</code></pre><h2 id=\"pull-request\">Pull Request</h2>\n<p>　　提交你的修改至github后，切换branch至fix-bug\n<img src=\"/htm/images/git1_switchbranch.png\" alt=\"git1_switchbranch.png\">\n点击<strong>Compare &amp; pull request</strong>按钮，然后写下你修改内容的说明就OK了</p>\n<h2 id=\"wait-to-be-merged\">Wait To Be Merged</h2>\n<p>　　目前还没有同意Merge. = =\n<img src=\"/htm/images/git1_wait.png\" alt=\"wait\"></p>\n<p>参考资料\n<a href=\"http://www.zhihu.com/question/21682976\">http://www.zhihu.com/question/21682976</a></p>\n","head":{"title":"git捣鼓记之「Pull Request」","date":"28 Apr 2016","tags":["git"],"categories":["Studying"]}},"hello-moka-desktop":{"content":"<h2 id=\"what-is-moka-desktop\">What Is Moka Desktop</h2>\n<p><code>Moka Desktop</code> 是为<a href=\"https://github.com/moyuyc/moka\">Moka</a>而生的桌面端应用，专门为不喜欢命令行的童鞋设计的。<br>将Moka融入至应用程序中，下载可以在<a href=\"https://github.com/moyuyc/moka-desktop/releases\">发布页</a> 或者直接联系我本人  </p>\n<p><code>Moka Desktop</code>将Moka命令与<a href=\"https://github.com/moyuyc/markdown-editor\">编辑器</a> (具有实时高亮同步与粘贴图片功能,极大程度优化用户书写博文体验) 融合起来，十分方便用户书写文章，管理博客。</p>\n<p><img src=\"/upload/1477708480843.png\" alt=\"ClipboardImage\"></p>\n<h2 id=\"have-a-look\">Have A Look</h2>\n<p><img src=\"/upload/moka-desktop.gif\" alt=\"gif\"></p>\n<p><img src=\"/upload/moka-desktop-use-main.gif\" alt=\"gif\"></p>\n<h2 id=\"usage\">Usage</h2>\n<ol>\n<li>下载完毕，打开后，首先需要选中一个空的文件夹作为博客工作目录</li>\n<li>然后执行<code>Init</code>，初始化工作目录。可以打开右侧日志，查看运行状态。</li>\n<li>之后<code>Generate</code>生成初始静态博客</li>\n<li>完毕后，你可以<code>StaticServer</code>查看效果</li>\n<li><code>Server</code>与<code>StaticServer</code>区别: 后者依赖于<code>Generate</code>(<code>static</code>目录)，前者不需要在<code>Generate</code>之后运行, 而且会动态更新资源。比如你修改<code>source/_articles</code>中的文章后，<code>Server</code>中的资源会同步更新！</li>\n<li><code>Deploy</code>和<code>Bak</code>则是根据文件<code>moka.config.json</code>中的<code>deploy</code>,<code>bak</code>配置repo Url. 需要用户自己创建对应repo和github pages以及<a href=\"https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/\">产生ssh key至本地</a>。</li>\n<li><code>一键发布</code>则是做了<code>Generate</code>-&gt;<code>Deploy&amp;Bak</code>的工作</li>\n</ol>\n<h2 id=\"why-use-it\">Why Use It</h2>\n<ol>\n<li>与<code>Moka</code>完全融入</li>\n<li>舒适的书写博客体验，以下快捷键均只能在编辑区对焦后生效<ol>\n<li><code>ctrl/cmd + U</code>  自动保存(编辑区失去焦点保存)开关</li>\n<li><code>ctrl/cmd + B/M</code> 放大缩小字号</li>\n<li><code>ctrl/cmd + S</code> 保存修改</li>\n<li>支持图片粘贴嵌入</li>\n<li>具有同步预览，右键预览区可控制开关</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"/upload/1477670571288.png\" alt=\"ClipboardImage\"></p>\n","head":{"title":"Hello Moka Desktop","date":"29 Oct 2016","tags":["moka","electron"],"cover":"/upload/1477670571288.png"}},"js实现打字机效果":{"content":"<script>\nHTMLElement.prototype.findParentByTag = function(tag){\n    var p = this.parentElement;\n    while(p.tagName!=tag) p = p.parentElement;\n    return p;\n}\nHTMLElement.prototype.type = function(op){\n    op = Object.extend({\n        delay:25,\n        dest:this,\n        twinkle:'|'\n    },op);\n    var chain = makeChain(this),f=false,html='';\n    console.log(chain);\n    var dest = op.dest;\n    dest.innerHTML='';\n    var time = setInterval(function(){\n        var str = chain.shift();\n        while(str.length>1){\n            html+=str;\n            dest.innerHTML=html;\n            str = chain.shift();\n            if(!chain.length){ \n                clearInterval(time);\n                return;\n            }\n        }\n        html+=str;\n        if(!chain.length){ \n            dest.innerHTML=html\n            clearInterval(time);\n            return;\n        }\n        dest.innerHTML=html+(f?op.twinkle:' ');\n        f=!f;\n    },op.delay);\n    function makeChain(node){\n        var nodes = node.childNodes;\n        var chain = [];\n        for(var i=0;i < nodes.length;i++){\n            var ne = nodes[i];\n            if(ne.nodeType==1){\n                if(ne.tagName=='SCRIPT'){\n                    chain.push(ne.outerHTML);\n                    continue;\n                }\n                var str = ne.cloneNode().outerHTML;\n                var last = str.lastIndexOf('<');\n                chain.push(str.substring(0,last));\n                chain = chain.concat(arguments.callee(ne));\n                chain.push(str.substring(last));\n            }else if(ne.nodeType==3){\n                var arr = ne.textContent.match(/(\\s+|[^\\s])/g);\n                if(arr)    chain = chain.concat(arr);\n            }\n        }\n        return chain;\n    }\n}\nObject.extend = function(){\n    if(!arguments || !arguments.length) return {};\n    var rlt = arguments[0];\n    for(var i=0;i<arguments.length;i++){\n        var argu = arguments[i];\n        for(var k in argu)\n            rlt[k] = argu[k];\n    }\n    return rlt;\n}\nfunction typeHandle(ele){\n    ele.type({\n        delay:100,\n        dest:ele,\n        twinkle:'_'\n    });\n}\n</script>\n\n<p class='text-center'><button class='btn' onclick=\"typeHandle(this.findParentByTag('ARTICLE'))\">Click Me! Magic</button></p>\n\n<p><img src='/avatar-right.jpg'/></p>\n<p class='text-center'><input placeholder='input!' /></p>\n\n<h1 id=\"-\">好像挺好玩的哈</h1>\n<!-- more -->\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>计算机</td>\n<td style=\"text-align:right\">\\$1600</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td style=\"text-align:right\">\\$12</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td style=\"text-align:right\">\\$1</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"-\">借鉴了两份代码</h1>\n<ul>\n<li>jQuery版本<pre><code class=\"lang-javascript\">(<span class=\"hljs-name\">function</span> (<span class=\"hljs-name\">a</span>) {\n  a.fn.typewriter = function () {\n      this.each(<span class=\"hljs-name\">function</span> () {\n          var d = a(<span class=\"hljs-name\">this</span>), c = d.html(), b = <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">;</span>\n          d.show()<span class=\"hljs-comment\">;</span>\n          d.html(<span class=\"hljs-string\">\"\"</span>)<span class=\"hljs-comment\">;</span>\n          var e = setInterval(<span class=\"hljs-name\">function</span> () {\n              var f = c.substr(<span class=\"hljs-name\">b</span>, <span class=\"hljs-number\">1</span>)<span class=\"hljs-comment\">;</span>\n              if (<span class=\"hljs-name\">f</span> == <span class=\"hljs-string\">\"&lt;\"</span>) {\n                  b = c.indexOf(<span class=\"hljs-string\">\"&gt;\"</span>, b) + <span class=\"hljs-number\">1</span>\n              } else {\n                  b++\n              }\n              d.html(<span class=\"hljs-name\">c.substring</span>(<span class=\"hljs-number\">0</span>, b) + (<span class=\"hljs-name\">b</span> &amp; <span class=\"hljs-number\">1</span> ? <span class=\"hljs-string\">\"_\"</span> : <span class=\"hljs-string\">\"\"</span>))<span class=\"hljs-comment\">;</span>\n              if (<span class=\"hljs-name\">b</span> &gt;= c.length) {\n                  clearInterval(<span class=\"hljs-name\">e</span>)\n              }\n          }, <span class=\"hljs-number\">75</span>)\n      })<span class=\"hljs-comment\">;</span>\n      return this\n  }\n})(<span class=\"hljs-name\">jQuery</span>)<span class=\"hljs-comment\">;</span>\n</code></pre>\n</li>\n<li>原生JS版本\n```javascript\nfunction Typing(opts) {\n  this.version = &#39;1.1&#39;;\n  this.source = opts.source;\n  this.output = opts.output;\n  this.delay = opts.delay || 120;\n  this.chain = {<pre><code>  parent: <span class=\"hljs-literal\">null</span>,\n  dom: <span class=\"hljs-keyword\">this</span>.output,\n  <span class=\"hljs-keyword\">val</span>: []\n</code></pre>  }\n}</li>\n</ul>\n<p>Typing.fn = Typing.prototype = {\n    toArray: function(eles) {\n        //Array.prototype.slice;\n        var result = [];\n        for (var i = 0; i &lt; eles.length; i++) {\n            result.push(eles[i]);\n        }\n        return result;\n    },\n    init: function() {\n        this.chain.val = this.convert(this.source, this.chain.val);\n    },\n    convert: function(dom, arr) {\n        var that = this,\n            children = this.toArray(dom.childNodes);</p>\n<pre><code>    children.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">node</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (node.nodeType === <span class=\"hljs-number\">3</span>) {\n            arr = arr.concat(node.nodeValue.split(<span class=\"hljs-string\">''</span>));\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.nodeType === <span class=\"hljs-number\">1</span>) {\n            <span class=\"hljs-keyword\">var</span> val = [];\n            val = that.convert(node, val);\n            arr.push({\n                <span class=\"hljs-string\">'dom'</span>: node,\n                <span class=\"hljs-string\">'val'</span>: val\n            });\n        }\n    });\n\n    <span class=\"hljs-keyword\">return</span> arr;\n},\n<span class=\"hljs-attr\">print</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">dom, val, callback</span>) </span>{\n    setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        dom.appendChild(<span class=\"hljs-built_in\">document</span>.createTextNode(val));\n        callback();\n    }, <span class=\"hljs-keyword\">this</span>.delay);\n},\n<span class=\"hljs-attr\">play</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">ele</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (!ele) <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-keyword\">if</span> (!ele.val.length &amp;&amp; ele.parent) <span class=\"hljs-keyword\">this</span>.play(ele.parent);\n    <span class=\"hljs-keyword\">if</span> (!ele.val.length) <span class=\"hljs-keyword\">return</span>;\n\n    <span class=\"hljs-keyword\">var</span> curr = ele.val.shift();\n    <span class=\"hljs-keyword\">var</span> that = <span class=\"hljs-keyword\">this</span>;\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> curr === <span class=\"hljs-string\">'string'</span>) {\n        <span class=\"hljs-keyword\">this</span>.print(ele.dom, curr, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-keyword\">if</span> (ele.val.length) {\n                that.play(ele);\n            } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (ele.parent) {\n                that.play(ele.parent);\n            }\n        });\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">var</span> dom = <span class=\"hljs-built_in\">document</span>.createElement(curr.dom.nodeName);\n        <span class=\"hljs-keyword\">var</span> attrs = that.toArray(curr.dom.attributes);\n        attrs.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">attr</span>) </span>{\n            dom.setAttribute(attr.name, attr.value);\n        });\n        ele.dom.appendChild(dom);\n        curr.parent = ele;\n        curr.dom = dom;\n        <span class=\"hljs-keyword\">this</span>.play(curr.val.length ? curr : curr.parent);\n    }\n},\n<span class=\"hljs-attr\">start</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.init();\n    <span class=\"hljs-keyword\">this</span>.play(<span class=\"hljs-keyword\">this</span>.chain);\n}\n</code></pre><p>}</p>\n<pre><code><span class=\"hljs-comment\"># 之我见</span>\n- 第一份jQuery版本，只是对`<span class=\"javascript\"><span class=\"hljs-string\">'&lt;'</span></span>`,`<span class=\"javascript\"><span class=\"hljs-string\">'&gt;'</span></span>`两个特殊的字符串进行了判断处理，如果打印那种代码文本时将会有误。\n- 第二份原生JS代码，将元素的孩子结点都进行了处理，这是一种很好的方法，但是，他的数据结构有些复杂化了，有\n`<span class=\"javascript\"></span>``<span class=\"javascript\">javascript\n{\n    <span class=\"hljs-attr\">parent</span>: <span class=\"hljs-literal\">null</span>,\n    <span class=\"hljs-attr\">dom</span>: <span class=\"hljs-keyword\">this</span>.output,\n    <span class=\"hljs-attr\">val</span>: []\n}</span>\n</code></pre><p>对于那种标签嵌套比较严重和多余的文本结点较多的html处理起来不太美好。</p>\n<h1 id=\"-\">之我改</h1>\n<pre><code class=\"lang-javascript\">HTMLElement.prototype.type = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">op</span>)</span>{\n    op = <span class=\"hljs-built_in\">Object</span>.extend({\n        <span class=\"hljs-attr\">delay</span>:<span class=\"hljs-number\">25</span>,\n        <span class=\"hljs-attr\">dest</span>:<span class=\"hljs-keyword\">this</span>,\n        <span class=\"hljs-attr\">twinkle</span>:<span class=\"hljs-string\">'|'</span>\n    },op);\n    <span class=\"hljs-keyword\">var</span> chain = makeChain(<span class=\"hljs-keyword\">this</span>),f=<span class=\"hljs-literal\">false</span>,html=<span class=\"hljs-string\">''</span>;\n    <span class=\"hljs-built_in\">console</span>.log(chain);\n    <span class=\"hljs-keyword\">var</span> dest = op.dest;\n    dest.innerHTML=<span class=\"hljs-string\">''</span>;\n    <span class=\"hljs-keyword\">var</span> time = setInterval(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-keyword\">var</span> str = chain.shift();\n        <span class=\"hljs-keyword\">while</span>(str.length&gt;<span class=\"hljs-number\">1</span>){\n            html+=str;\n            dest.innerHTML=html;\n            str = chain.shift();\n            <span class=\"hljs-keyword\">if</span>(!chain.length){ \n                clearInterval(time);\n                <span class=\"hljs-keyword\">return</span>;\n            }\n        }\n        html+=str;\n        <span class=\"hljs-keyword\">if</span>(!chain.length){ \n            dest.innerHTML=html\n            clearInterval(time);\n            <span class=\"hljs-keyword\">return</span>;\n        }\n        dest.innerHTML=html+(f?op.twinkle:<span class=\"hljs-string\">' '</span>);\n        f=!f;\n    },op.delay);\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">makeChain</span>(<span class=\"hljs-params\">node</span>)</span>{\n        <span class=\"hljs-keyword\">var</span> nodes = node.childNodes;\n        <span class=\"hljs-keyword\">var</span> chain = [];\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i &lt; nodes.length;i++){\n            <span class=\"hljs-keyword\">var</span> ne = nodes[i];\n            <span class=\"hljs-keyword\">if</span>(ne.nodeType==<span class=\"hljs-number\">1</span>){\n                <span class=\"hljs-keyword\">if</span>(ne.tagName==<span class=\"hljs-string\">'SCRIPT'</span>){\n                    chain.push(ne.outerHTML);\n                    <span class=\"hljs-keyword\">continue</span>;\n                }\n                <span class=\"hljs-keyword\">var</span> str = ne.cloneNode().outerHTML;\n                <span class=\"hljs-keyword\">var</span> last = str.lastIndexOf(<span class=\"hljs-string\">'&lt;'</span>);\n                chain.push(str.substring(<span class=\"hljs-number\">0</span>,last));\n                chain = chain.concat(<span class=\"hljs-built_in\">arguments</span>.callee(ne));\n                chain.push(str.substring(last));\n            }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(ne.nodeType==<span class=\"hljs-number\">3</span>){\n                <span class=\"hljs-keyword\">var</span> arr = ne.textContent.match(<span class=\"hljs-regexp\">/(\\s+|[^\\s])/g</span>);\n                <span class=\"hljs-keyword\">if</span>(arr)    chain = chain.concat(arr);\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> chain;\n    }\n}\n<span class=\"hljs-built_in\">Object</span>.extend = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-built_in\">arguments</span> || !<span class=\"hljs-built_in\">arguments</span>.length) <span class=\"hljs-keyword\">return</span> {};\n    <span class=\"hljs-keyword\">var</span> rlt = <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">0</span>];\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-built_in\">arguments</span>.length;i++){\n        <span class=\"hljs-keyword\">var</span> argu = <span class=\"hljs-built_in\">arguments</span>[i];\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> k <span class=\"hljs-keyword\">in</span> argu)\n            rlt[k] = argu[k];\n    }\n    <span class=\"hljs-keyword\">return</span> rlt;\n}\n</code></pre>\n<p>我吸取了前面两者的优点，比如第一份代码的简单直接，第二份代码的子节点遍历与递归的思路，\n进一步的解决了前面两者的缺陷。</p>\n<ol>\n<li>对无实际意义的文本结点（如 <code>&quot;   12 \\n sx &quot;</code> ）进行优化处理，处理为[&#39;   &#39;,&#39;1&#39;,&#39;2&#39;,&#39; \\n &#39;,&#39;s&#39;,&#39;x&#39;,&#39; &#39;]<pre><code> var arr = ne.textContent.<span class=\"hljs-keyword\">match</span>(/(\\s+|<span class=\"hljs-type\">[^\\s</span>.])/g);\n <span class=\"hljs-keyword\">if</span>(arr)    chain = chain.concat(arr);\n</code></pre></li>\n<li>对 <code>script</code> 标签进行优化处理，统一打印文字的节奏<pre><code> <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">ne</span>.tagName==<span class=\"hljs-string\">'SCRIPT'</span>){\n     chain.push(<span class=\"hljs-keyword\">ne</span>.outerHTML);\n     continue;\n }\n</code></pre></li>\n<li>避免了打印代码块的错误<pre><code> 因为代码中分别对 `nodeType == <span class=\"hljs-number\">1</span>` 和 `nodeType == <span class=\"hljs-number\">3</span>` 进行了不同的处理，\n 可以根据 `chain` 中元素的长度判断是否为文本节点\n</code></pre></li>\n</ol>\n<h1 id=\"-\">之我版</h1>\n<p class='text-center'><a href=\"https://github.com/moyuyc/typemagic\">fork it！</a></p>","head":{"title":"js实现打字机效果","date":"25 Apr 2016","categories":["前端"],"tags":["js","页面效果"]}},"js实现的图片瀑布流":{"content":"<h1 id=\"-\">效果一窥</h1>\n<ul>\n<li>实现了图片动态加载（滚轮操作）与图片渐现效果（css3动画）</li>\n</ul>\n<p><iframe src='/htm/imgWaterFall.html' style='width:100%;height:400px;'></iframe>\n<!--more-->\n<a href=\"/htm/imgWaterFall.html\">完整Demo点击这里</a></p>\n<h1 id=\"-\">怎么实现？</h1>\n<h2 id=\"-\">首先，布局与结构</h2>\n<ul>\n<li>HTML<pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'img-wf'</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'img-item'</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'images/pic-1.jpg'</span> /&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'img-item'</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'images/pic-2.jpg'</span> /&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'img-item'</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'images/pic-3.jpg'</span> /&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'img-item'</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'images/pic-4.jpg'</span> /&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n</code></pre>\n</li>\n<li>CSS\n```css\nbody{background-color:#E9E9E9;}\n.img-wf{\n  width:75%;\n  padding:0;\n  margin: auto;\n  list-style:none;\n}\n.img-wf li{\n  position:relative;\n  padding: 3px 1% 3px;\n  float:left;\n  width: 23%;\n}\n.img-wf li img{\n  width:100%;\n}\n.img-wf .img-item{\n  background-color:white;\n  padding: 4px;\n  margin-bottom: 15px;\n}\n.img-wf .img-item:hover{\n  transition: 0.4s;\n  transform:scale(1.05,1.05);\n  box-shadow: 6px 6px 3px gray;\n}</li>\n</ul>\n<p>@keyframes fadeIn {\n    0% {opacity: 0; /<em>初始状态 透明度为0</em>/}\n    100% {opacity: 1; /<em>结尾状态 透明度为1</em>/}\n}\n.animate{\n    animation:fadeIn 1.5s;\n}</p>\n<pre><code>可以看到，为了不收屏幕大小影响， `<span class=\"javascript\">width</span>` 均设置为 `<span class=\"javascript\">xx%</span>`\n我将 `<span class=\"javascript\">li</span>` 设置为 `<span class=\"javascript\">float:left</span>` ，也就是说，每一个 `<span class=\"javascript\">li</span>` 就占据了一排（因为 `<span class=\"javascript\">width:<span class=\"hljs-number\">23</span>%;</span>`，一共<span class=\"hljs-number\">4</span>排 ），\n然后通过 js 实现将 `<span class=\"javascript\">&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">'img-item'</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'images/pic-4.jpg'</span> /&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></span>` 添加至 `<span class=\"javascript\">li</span>` 中即可。\ncss中 `<span class=\"javascript\">@keyframes fadeIn</span>`，`<span class=\"javascript\">.animate</span>` 是css3实现动画，详细请查看 w3c\n<span class=\"hljs-comment\">## 嗯，然后是js</span>\n- JavaScript\n`<span class=\"javascript\"></span>``<span class=\"javascript\">javascript\n<span class=\"hljs-keyword\">var</span> imgwf = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.img-wf'</span>);\nHTMLElement.prototype.waterfall = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">srcs</span>)</span>{\n    <span class=\"hljs-keyword\">var</span> lis = <span class=\"hljs-keyword\">this</span>.children;        \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getRandomImg</span>(<span class=\"hljs-params\">onload</span>)</span>{\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createImg</span>(<span class=\"hljs-params\">src</span>)</span>{\n            <span class=\"hljs-keyword\">var</span> div = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'div'</span>);\n            div.className = <span class=\"hljs-string\">'img-item'</span>;\n            <span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'img'</span>);\n            img.src = src;\n            img.style.display=<span class=\"hljs-string\">'none'</span>;\n            img.onload = onload;\n            div.appendChild(img);\n            <span class=\"hljs-keyword\">return</span> div;\n        }\n        <span class=\"hljs-keyword\">return</span> createImg(srcs[<span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.random()*srcs.length))]);\n    }\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i =<span class=\"hljs-number\">0</span>;i&lt;lis.length;i++){\n        <span class=\"hljs-keyword\">var</span> min = <span class=\"hljs-built_in\">Number</span>.MAX_VALUE;\n        <span class=\"hljs-keyword\">var</span> minLi,t=<span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">var</span> img = getRandomImg(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{                \n            <span class=\"hljs-keyword\">this</span>.classList.add(<span class=\"hljs-string\">'animate'</span>);\n            <span class=\"hljs-keyword\">this</span>.style.display=<span class=\"hljs-string\">''</span>;\n            <span class=\"hljs-keyword\">if</span>(min&gt;<span class=\"hljs-keyword\">this</span>.parentElement.parentElement.clientHeight){\n                min = <span class=\"hljs-keyword\">this</span>.parentElement.parentElement.clientHeight;\n                minLi = <span class=\"hljs-keyword\">this</span>.parentElement.parentElement;\n            }\n            <span class=\"hljs-keyword\">if</span>(++t==lis.length)\n                minLi.appendChild(getRandomImg(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{<span class=\"hljs-keyword\">this</span>.classList.add(<span class=\"hljs-string\">'animate'</span>);<span class=\"hljs-keyword\">this</span>.style.display=<span class=\"hljs-string\">''</span>;}));\n        });\n        lis[i].appendChild(img);\n    }\n}\n\n<span class=\"hljs-built_in\">document</span>.onmousewheel=<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n    <span class=\"hljs-keyword\">var</span> delta = e.wheelDelta || e.detail;\n    <span class=\"hljs-built_in\">console</span>.log(e);\n    <span class=\"hljs-keyword\">var</span> body = <span class=\"hljs-built_in\">document</span>.body;\n    <span class=\"hljs-keyword\">if</span>(delta&lt;<span class=\"hljs-number\">0</span> &amp;&amp; body.scrollTop+body.clientHeight == body.scrollHeight){\n        imgwf.waterfall([<span class=\"hljs-string\">'images/pic-1.jpg'</span>,<span class=\"hljs-string\">'images/pic-2.jpg'</span>,<span class=\"hljs-string\">'images/pic-3.jpg'</span>,<span class=\"hljs-string\">'images/pic-4.jpg'</span>]);\n    }\n}</span>\n</code></pre><h1 id=\"-\">最后，谈下问题</h1>\n<p>用 <code>float</code> 实现固然简单可行，但是也有不好的地方。\n<code>li</code> 都设置为浮动元素，那么也就是脱离了文档流，<code>ul</code> 中并没有文档流，所以<strong> <code>ul</code> 的高度为0 </strong>\n其实还有其他的实现方法，\n比如利用设置 父容器 <code>position:relative</code>, 子元素 <code>position:absolute</code> 然后通过js计算，得到 <code>top</code>,<code>left</code> 值。\n详细的内容，请点击<a href=\"http://www.68design.net/Web-Guide/HTMLCSS/58734-1.html\">一篇比较好的文章</a>。</p>\n<p>2016/4/30更新！\n<code>ul</code>高度为0可以通过以下方法解决！</p>\n<pre><code class=\"lang-css\"><span class=\"hljs-selector-tag\">ul</span><span class=\"hljs-selector-pseudo\">:after</span>{\n    <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">'.'</span>;\n    <span class=\"hljs-attribute\">display</span>: block;\n    <span class=\"hljs-attribute\">clear</span>: left;\n    <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">visibility</span>: hidden;\n}\n</code></pre>\n","head":{"title":"js实现的图片瀑布流","date":"25 Apr 2016","categories":["前端"],"tags":["js","css3","页面效果"]}},"linux-C一周学习":{"content":"<!-- # linux C一周学习 & node c addon -->\n<p>还记得大一懵懂的时候，第一门专业课便是C语言了，当时都没接触过编程，而且用的是win32，老师也讲的就是一些<code>if while</code>语法知识，指针数组等等。</p>\n<p>没有涉及到linux系统调用函数，不过也理所当然，因为当时根本对操作系统，汇编，计算机系统等一概不懂，讲了也只是换来更多的懵逼脸。</p>\n<p>那三年后的我，为什么又重新学习C呢？  </p>\n<!--more-->\n<p>因为大四还有一门tcp/ip网络编程，老师和书本是基于<code>unix socket</code>和<code>winsocket</code>的。其实在大三网络课里面，老师就有要求完成一个tcp和udp的聊天程序，当时用的是<code>nodejs</code>的<code>net package</code>. 使用node完成的可就简单了，net包为你实现了请求的队列和一套异步编程api。</p>\n<p><strong>但在c中，socket只是一个位于tcp/udp之上的一层，多请求的处理，你可以采用多进程/多线程，也可以采用单进程轮询处理（往往搭配非阻塞IO）；IO操作你也可以使用阻塞和非阻塞，随你喜欢。</strong></p>\n<p>但这些名词，只有在你理解了计算机系统后才能运用自如。</p>\n<p>而且C也可以与node结合起来，参看<a href=\"https://github.com/nodejs/node-addon-examples/\">node addon</a>，所以之后遇到计算量大和趋向底层的活，完全可以交给c实现。</p>\n<p>于是乎，我便开始了学习linux c之旅。</p>\n<h2 id=\"-\">疑难总结</h2>\n<ol>\n<li><p><code>char* a = &quot;123&quot;;</code>与 <code>char b[] = &quot;123&quot;;</code><br>在执行<code>char* a = &quot;123&quot;;</code>时，编译器会把<code>&quot;123&quot;</code>当成字符串常量，而a指向的正式<code>&#39;a&#39;</code>的地址，而字符串的结束标志为<code>&#39;\\0&#39;</code>. 这就是为什么不能<code>strcat(a, b)</code>, 因为a指向的是常量字符串。<br>那么下面这段程序执行时什么结果呢？</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">char</span>* x = <span class=\"hljs-string\">\"123\"</span>;\n<span class=\"hljs-keyword\">char</span> y[] = <span class=\"hljs-string\">\"123\"</span>;\n<span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"%s %s %d %d %d\\n\"</span>, <span class=\"hljs-built_in\">strcat</span>(y, x), y, <span class=\"hljs-keyword\">sizeof</span>(y), <span class=\"hljs-built_in\">strlen</span>(y), <span class=\"hljs-keyword\">sizeof</span>(x));\n<span class=\"hljs-comment\">// 123123 123123 4 6 8</span>\n</code></pre>\n</li>\n<li><p><code>char** s;</code> 二级指针</p>\n<pre><code class=\"lang-c\">char  **s<span class=\"hljs-comment\">;  </span>\n*s = <span class=\"hljs-string\">\"hello world\"</span><span class=\"hljs-comment\">;</span>\n</code></pre>\n<p>上面这段程序是有错的，因为没有给s分配空间,也就是s指向（值）为空（不可读写），\n<code>malloc</code>之后，s指向一个可以读写的内存块。</p>\n</li>\n</ol>\n<p>更多参看 <a href=\"http://blog.csdn.net/daiyutage/article/details/8604720\">http://blog.csdn.net/daiyutage/article/details/8604720</a></p>\n<h2 id=\"-\">知识总结</h2>\n<ol>\n<li>网络编程  <ol>\n<li>如何知道服务器或者客户端断开了连接？（read() == 0）</li>\n<li>处理多请求的俩种服务器实现（fork/select）</li>\n<li>一些&quot;奇怪&quot;现象的解释<ol>\n<li>主动关闭连接的一方要处于TIME_WAIT状态，等待两个MSL（maximum segment lifetime）的时间后才能回到CLOSED状态 </li>\n<li>网络服务器通常用fork来同时服务多个客户端，父进程专门负责监听端口，每次accept一个新的客户端连接就fork出一个子进程专门服务这个客户端。但是子进程退出时会产生僵尸进程，父进程要注意处理SIGCHLD信号和调用wait清理僵尸进程。</li>\n<li>server对每个请求只处理一次，应答后就关闭连接，client不能继续使用这个连接发送数据。但是client下次循环时又调用write发数据给server，write调用只负责把数据交给TCP发送缓冲区就可以成功返回了，所以不会出错，而server收到数据后应答一个RST段，client收到RST段后无法立刻通知应用层，只把这个状态保存在TCP协议层。client下次循环又调用write发数据给server，由于TCP协议层已经处于RST状态了，因此不会将数据发出，而是发一个SIGPIPE信号给应用层，SIGPIPE信号的缺省处理动作是终止程序</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>进程<ol>\n<li>shell的工作方式，fork -&gt; exec</li>\n<li>fork与exec</li>\n<li>shell的实现，改变current work path, 实现pipe与输入输出重定向</li>\n<li>...</li>\n</ol>\n</li>\n<li>文件系统<ol>\n<li>erverything is file</li>\n<li>dup与dup2运用, 重定向</li>\n<li>link/ln  stat/lstat</li>\n<li>...</li>\n</ol>\n</li>\n<li>库函数与系统函数</li>\n</ol>\n<h2 id=\"-\">编码实践</h2>\n<p>学的虽然挺多的，但是需要做的东西出来才能掌握。</p>\n<ol>\n<li><p>c实现shell (掌握linux内核函数，进程管道通信，文件描述符等概念)<br> <a href=\"https://github.com/moyuyc/c_cpp-node_c_cpp_addon/blob/master/cpp_src/shell.h\">source file</a></p>\n</li>\n<li><p>tcp双向通信 (select()/fork()两种方式)<br> <a href=\"https://github.com/moyuyc/c_cpp-node_c_cpp_addon/blob/master/cpp_src/server.h\">source file Server</a><br> <a href=\"https://github.com/moyuyc/c_cpp-node_c_cpp_addon/blob/master/cpp_src/client.h\">source file Client</a></p>\n</li>\n<li><p>node addon(node调用c/c++)<br> <a href=\"https://github.com/moyuyc/c_cpp-node_c_cpp_addon/tree/master/node_src\">source file</a></p>\n</li>\n</ol>\n<h2 id=\"-\">闲话</h2>\n<p>上面简单总结了一下知识和成果，我觉得学习linux c是十分必要的，可以将整个计算机系统理论串联起来，而且后续有必要的话，完全可以重零开始，自己造轮子。</p>\n<p>然后推荐两个项目，都是用linux c写的</p>\n<ol>\n<li><p><a href=\"https://github.com/EZLippi/Tinyhttpd\">TinyHttpd</a><br>500+行代码实现一个小型web服务器，助于理解web 服务器本质，而不再是只会使用现成的web服务器。代码不多，便于学习。</p>\n</li>\n<li><p><a href=\"https://github.com/posva/catimg\">catimg</a><br>将图片print在shell中，便于学习unix字符转义，shell窗口控制，图像处理</p>\n</li>\n</ol>\n<p>最后力荐一本电子书<a href=\"http://akaedu.github.io/book/\">【Linux C编程一站式学习】</a>，学习linux C就靠它！</p>\n","head":{"title":"linux C一周学习","date":"12 Oct 2016","tags":["linux","c"],"cover":"http://ww2.sinaimg.cn/mw690/b2b1bff9jw1f8tf00mm95j20sg0izah4.jpg"}},"linux-c-osx-sendfile":{"content":"<p>今天，来小结一下纠结我几个小时的linux C。需求是这样的，<em>用c实现tcp的文件上传与下载</em></p>\n<p>一开始，很容易想到的上传思路是，直接在内存中开一块<code>buffer</code>，得到一个<code>file description</code>后，进行一读一发。\n<!--more--></p>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">char</span> <span class=\"hljs-built_in\">buffer</span>[<span class=\"hljs-number\">1024</span>];\n<span class=\"hljs-keyword\">int</span> fd = <span class=\"hljs-built_in\">open</span>(path, O_RDONLY);\n<span class=\"hljs-keyword\">int</span> n = <span class=\"hljs-built_in\">read</span>(fd, <span class=\"hljs-built_in\">buffer</span>, <span class=\"hljs-number\">1024</span>);\n<span class=\"hljs-built_in\">if</span>(n&lt;<span class=\"hljs-number\">0</span>) {\n    perror(<span class=\"hljs-string\">\"read\"</span>);\n}\n<span class=\"hljs-built_in\">buffer</span>[n] = <span class=\"hljs-number\">0</span>;\n\n<span class=\"hljs-built_in\">write</span>(socket, <span class=\"hljs-built_in\">buffer</span>, n);\n\n<span class=\"hljs-comment\">//...</span>\n</code></pre>\n<p><strong>然而，其实在linux内核中已经实现了一种更为高效的方法，<code>sendfile</code></strong><br>不需要频繁的调用<code>read/write</code>,也不需要开辟buffer，减少了内核函数的调用，提高性能。</p>\n<h2 id=\"-\">函数说明</h2>\n<ul>\n<li><p>定义</p>\n<pre><code>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">sendfile</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> fd, <span class=\"hljs-keyword\">int</span> s, <span class=\"hljs-keyword\">off_t</span> offset, <span class=\"hljs-keyword\">off_t</span> *len, <span class=\"hljs-keyword\">struct</span> sf_hdtr *hdtr, <span class=\"hljs-keyword\">int</span> flags)</span></span>;\n</code></pre></li>\n<li><p>解释</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>argument name</th>\n<th>explantion</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fd</td>\n<td>需要发送的文件的fd(file description)</td>\n</tr>\n<tr>\n<td>s</td>\n<td>socket的fd</td>\n</tr>\n<tr>\n<td>offset</td>\n<td>文件从那开始发,NULL表示为0</td>\n</tr>\n<tr>\n<td>len</td>\n<td>输出参数，输出一共发送了多少byte,包括后面的hdtr</td>\n</tr>\n<tr>\n<td>hdtr</td>\n<td>额外发送的头和尾</td>\n</tr>\n<tr>\n<td>flags</td>\n<td>设置为0即可</td>\n</tr>\n</tbody>\n</table>\n<p>关于flags, man page原文如下:</p>\n<blockquote>\n<p>The flags parameter is reserved for future expansion and must be set to 0. Any other value will cause sendfile() to return EINVAL.</p>\n</blockquote>\n<p>意思是，flags是为了后面备用的，现在还没实现，现在传入0即可。</p>\n<p>下面着重解释<code>len</code>与<code>hdtr</code>参数\n结构体<code>sf_hdtr</code>, 成员如下</p>\n<pre><code class=\"lang-c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">sf_hdtr</span></span> {\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">iovec</span></span> *headers;  <span class=\"hljs-comment\">/* pointer to header iovecs */</span>\n    <span class=\"hljs-keyword\">int</span> hdr_cnt;            <span class=\"hljs-comment\">/* number of header iovecs */</span>\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">iovec</span></span> *trailers; <span class=\"hljs-comment\">/* pointer to trailer iovecs */</span>\n    <span class=\"hljs-keyword\">int</span> trl_cnt;            <span class=\"hljs-comment\">/* number of trailer iovecs */</span>\n};\n</code></pre>\n<p>而，结构体<code>iovec</code></p>\n<pre><code class=\"lang-c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">iovec</span> </span>{\n    <span class=\"hljs-keyword\">void</span> *   iov_base;    <span class=\"hljs-comment\">/* [XSI] Base address of I/O memory region */</span>\n    size_t     iov_len;    <span class=\"hljs-comment\">/* [XSI] Size of region iov_base points to */</span>\n};\n</code></pre>\n<p>可以看到，iovec数据就是表示一段<code>iov_len</code>长度的数据区，而sf_hdtr则是2个<code>iov_len</code>数组(指针)。</p>\n<p><code>headers</code>就是发送文件数据前发送的数据段，<code>trailers</code>则是跟在文件数据EOF之后的。</p>\n<p>解释完该方法后，其实上传文件，只需要调用该方法即可，而<code>headers</code>和<code>trailers</code>可以用来界定文件数据，ngnix osx版本中，便有使用该方法。</p>\n<p>为了简化文件数据划分的逻辑，我未采用，http协议中类似<code>Content-Length</code>字段来表示文件的大小，从而拼接出完整的文件内容，而是简单的在文件数据头尾加上了自定义的字符串。</p>\n<h2 id=\"-\">代码</h2>\n<p><a href=\"https://github.com/moyuyc/c_cpp-node_c_cpp_addon/tree/master/cpp_src\">cpp_src</a></p>\n<ul>\n<li>发送文件</li>\n</ul>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">bool</span> _sendFile(<span class=\"hljs-keyword\">int</span> out_fd, <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span>* file) {\n    <span class=\"hljs-keyword\">int</span> fd = open(file, O_RDONLY);\n    <span class=\"hljs-keyword\">char</span>* tmp = <span class=\"hljs-built_in\">strrchr</span>(file, <span class=\"hljs-string\">'/'</span>);\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span>* filename = tmp!=<span class=\"hljs-literal\">NULL</span>? tmp+<span class=\"hljs-number\">1</span>: file;\n    <span class=\"hljs-keyword\">if</span>(fd==<span class=\"hljs-number\">-1</span>) {\n        <span class=\"hljs-keyword\">char</span> b[<span class=\"hljs-number\">1024</span>];\n        <span class=\"hljs-built_in\">sprintf</span>(b, <span class=\"hljs-string\">\"open failed %s\"</span>, file);\n        perror(b);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n    <span class=\"hljs-keyword\">struct</span> stat state;\n    fstat(fd, &amp;state);\n\n    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"sending File %s ...\\n\"</span>, file);\n    <span class=\"hljs-keyword\">off_t</span> offset = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">off_t</span> len = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 必须初始化0, 不然下次重入时，会被旧值覆盖</span>\n\n    <span class=\"hljs-keyword\">char</span> head[<span class=\"hljs-number\">1024</span>], sizehd[<span class=\"hljs-number\">1024</span>];\n    <span class=\"hljs-built_in\">sprintf</span>(head, <span class=\"hljs-string\">\"---file: %s\\r\\n\"</span>, filename); <span class=\"hljs-comment\">// 拼装头部字符串</span>\n<span class=\"hljs-comment\">//    sprintf(sizehd, \"---size: %lld\\r\\n\\r\\n\", state.st_size);</span>\n\n    <span class=\"hljs-keyword\">struct</span> sf_hdtr hdtr = <span class=\"hljs-literal\">NULL</span>;\n    iovec headers = <span class=\"hljs-literal\">NULL</span>, trailers = <span class=\"hljs-literal\">NULL</span>;\n    headers.iov_base = head;\n    headers.iov_len = <span class=\"hljs-built_in\">strlen</span>(head);\n<span class=\"hljs-comment\">//    trailers.iov_base = (void *)\"file---\\r\\n\"; //<span class=\"hljs-doctag\">todo:</span> don't recv sometimes ??</span>\n<span class=\"hljs-comment\">//    trailers.iov_len = 9;</span>\n    hdtr.headers = &amp;headers;\n    hdtr.hdr_cnt = <span class=\"hljs-number\">1</span>;\n    hdtr.trailers = <span class=\"hljs-literal\">NULL</span>;\n    hdtr.trl_cnt = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-number\">0</span> == sendfile(fd, out_fd, offset, &amp;len, &amp;hdtr, <span class=\"hljs-number\">0</span>)) {\n        close(fd);\n        write(out_fd, <span class=\"hljs-string\">\"file---\\r\\n\"</span>, <span class=\"hljs-number\">9</span>); <span class=\"hljs-comment\">// 未使用trailers，因为有时候上传大文件，trailers会丢失。</span>\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">\"sendFile %s success, return len: %lld.\\n\"</span>, file, len);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        close(fd);\n        write(out_fd, <span class=\"hljs-string\">\"file---\\r\\n\"</span>, <span class=\"hljs-number\">9</span>);\n        perror(<span class=\"hljs-string\">\"sendfile\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n}\n</code></pre>\n<ul>\n<li>接收文件</li>\n</ul>\n<pre><code class=\"lang-c\"><span class=\"hljs-keyword\">bool </span>_receFile(FILE* &amp;pfsile, char* <span class=\"hljs-keyword\">buffer, </span>ssize_t n, <span class=\"hljs-keyword\">bool&amp; </span>receiveing, char* rfilename, int size) {\n    <span class=\"hljs-keyword\">bool </span>run = false<span class=\"hljs-comment\">;</span>\n    char* last = NULL<span class=\"hljs-comment\">;</span>\n    if(!receiveing &amp;&amp; isfileHead(<span class=\"hljs-keyword\">buffer)) </span>{\n        memset(rfilename, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">50</span>)<span class=\"hljs-comment\">;</span>\n        strcpy(rfilename, <span class=\"hljs-string\">\"data/\"</span>)<span class=\"hljs-comment\">;</span>\n        if (stat(rfilename, NULL) == -<span class=\"hljs-number\">1</span>) {\n            mkdir(rfilename, <span class=\"hljs-number\">0700</span>)<span class=\"hljs-comment\">;</span>\n        }\n\n        char name[<span class=\"hljs-number\">40</span>]<span class=\"hljs-comment\">;</span>\n        sscanf(<span class=\"hljs-keyword\">buffer, </span><span class=\"hljs-string\">\"---file: %s\\r\\n\"</span>, name)<span class=\"hljs-comment\">;</span>\n        int othlen = <span class=\"hljs-number\">11</span>+strlen(name)<span class=\"hljs-comment\">;</span>\n        int <span class=\"hljs-keyword\">addonlen </span>= n-othlen<span class=\"hljs-comment\">;</span>\n\n        strcat(rfilename, name)<span class=\"hljs-comment\">;</span>\n        pfile = fopen(rfilename, <span class=\"hljs-string\">\"wb+\"</span>)<span class=\"hljs-comment\">; //!! 以二进制打开文件</span>\n\n        receiveing = true<span class=\"hljs-comment\">;</span>\n        printf(<span class=\"hljs-string\">\"Downloading %s ...\\nhead addon: %s\\n\\n\"</span>,\n               rfilename, <span class=\"hljs-keyword\">buffer+othlen);\n</span>        if(<span class=\"hljs-keyword\">addonlen </span>&gt; <span class=\"hljs-number\">0</span>) {\n            fwrite(<span class=\"hljs-keyword\">buffer+othlen, </span><span class=\"hljs-keyword\">addonlen, </span><span class=\"hljs-number\">1</span>, pfile)<span class=\"hljs-comment\">;</span>\n        }\n        run= true<span class=\"hljs-comment\">;</span>\n    }\n    if(receiveing &amp;&amp; (last = fileTail(<span class=\"hljs-keyword\">buffer, </span>n))!=NULL) {\n        receiveing = false<span class=\"hljs-comment\">;</span>\n        fwrite(<span class=\"hljs-keyword\">buffer, </span>last-<span class=\"hljs-keyword\">buffer, </span><span class=\"hljs-number\">1</span>, pfile)<span class=\"hljs-comment\">;</span>\n        fclose(pfile)<span class=\"hljs-comment\">;</span>\n        printf(<span class=\"hljs-string\">\"Downloaded %s. and saved\\n\"</span>, rfilename)<span class=\"hljs-comment\">;</span>\n        run= true<span class=\"hljs-comment\">;</span>\n    } else if(receiveing &amp;&amp; !run) {\n        printf(<span class=\"hljs-string\">\"download chunk, size: %ld\\n\"</span>, n)<span class=\"hljs-comment\">;</span>\n        if(n&lt;size) {\n            receiveing = false<span class=\"hljs-comment\">;</span>\n            fclose(pfile)<span class=\"hljs-comment\">;</span>\n        }\n        fwrite(<span class=\"hljs-keyword\">buffer, </span>n, <span class=\"hljs-number\">1</span>, pfile)<span class=\"hljs-comment\">;</span>\n        run= true<span class=\"hljs-comment\">;</span>\n    }\n    return run<span class=\"hljs-comment\">;</span>\n}\n</code></pre>\n<h2 id=\"-\">最后</h2>\n<p>其实还是会有bug的，比如<code>---file: a.png\\r\\n ... ---file\\r\\n</code>的数据，接收方buffer设置较小，不能容纳完整的<code>---file</code>标志，可能就不会被认为是file；或者结尾截断了。而对于上诉情况，应用层只能通过更复杂的代码逻辑来控制了。</p>\n","head":{"title":"LinuxC OSX sendfile()","date":"19 Oct 2016","tags":["linux","网络编程"]}},"never-simple-student":{"content":"<p>作于1024(程序员日)\n<img src=\"/upload/1477292742876.png\" alt=\"ClipboardImage\"></p>\n<p>已经大四了。  </p>\n<h2 id=\"-\">转变选择</h2>\n<p>从大一入学时，决定读研究生，然后到大三的决定工作。<br>可能是因为不想再考数学、英语了吧，可能认为自己工作后学到的东西会比学校学的更多吧。</p>\n<p>虽然说，现在我作为web开发中的前端工程师，其中的前端知识<code>html/css/js</code>完全不是大学课堂上老师教给我的，但是正如老师曾在课堂上讲的那样，“大学计算机教育与培训机构的区别是什么：大学不会教给你某一方面的开发知识，只会教给你一套计算机体系结构，编程的思考方式”。  </p>\n<p>技术愈增长，就愈觉得这话十分正确。不会仅仅局促于前端工程师，一直都会往全栈进步。<br>想起来，为什么当初会在前端后端中，选择了前端，我想我是应该更喜欢<code>JavaScript</code>这门语言吧，前端离不开它，后端<code>nodejs</code>也有它的身影。<br>说来可笑，大二大三以来一直都是用的<code>Java</code>进行web开发，最终选择了<code>JavaScript</code>。<br>相比之下，<code>nodejs</code>的生态环境和历史包袱，开发体验实在是让人无法拒绝。\n<img src=\"/upload/1477292794074.png\" alt=\"ClipboardImage\"></p>\n<h2 id=\"-\">实习体验</h2>\n<p>由于本人与学校的原因，大三实习生招聘在寒假期间都没准备，就连最终方向都是临时选择的...，所以即使独立开发了网站，但面试表现太烂，从腾讯的一面被刷，阿里二面被刷，再到百度的拿到实习offer\n<img src=\"/upload/1477293155214.png\" alt=\"ClipboardImage\"></p>\n<p>于是乎，16年7月踏上了去北京的高铁。<br>对于我一个常年宅在宿舍的，我也是感受不出来北京的空气有什么不同的。<br>入职第一天，百度便给了我个惊喜，发了个Mac本。恩！我很满意<br><img src=\"/upload/1477293413488.png\" alt=\"ClipboardImage\"></p>\n<p>然后看了一周的代码后，开始交给我开发任务了，基于<code>BackBone/Requirejs</code>的一个企业云盘项目，挺同事说<code>backbone</code>已经历史很久远了，但对于我来说，没用过的就是挺新的！</p>\n<p>果然在宿舍死宅敲代码的训练是有成效的，我的开发效率很高，加上在每周四的团队技术分享会里面，我也是周周有“新招”(<a href=\"https://github.com/moyuyc/moUploader\">MoUploader</a>/<a href=\"https://github.com/moyuyc/request-song-robot\">点歌机器人</a>/<a href=\"https://github.com/moyuyc/markdown-editor\">MarkDown Editor</a>/<a href=\"https://github.com/moyuyc/slideImages\">sliderImage</a>/...)，导师对我的评价很高。自然而然的，我对于转正也就没什么担忧的了。\n<img src=\"/upload/1477295755596.png\" alt=\"ClipboardImage\"></p>\n<p>但是偶然的机会，我询问了几位16年毕业的同事，据说他们工作税后只能拿到8k+，我一听就不太满意了，于是打起了sp的打算。</p>\n<p>sp的申请也不是一帆风顺的，虽然导师、主管很积极的帮我申请sp，但是hr那边有公司规定，“春招面试评分需要4+”，不擅长面试的我必然没达到。</p>\n<p>很庆幸的是，我负责的项目是前后端分离的一个试验品，而且还在后一个时间里面，学习使用了主流的<code>react/redux</code>框架，开发移动端，虽然用的不是很熟练。</p>\n<p>所以就这样干到了9月末。折腾完了转租后，我回到了南京。</p>\n<p>10月中旬，hr打电话通知我，“sp通过了，+2k”，这对于我没有收割其他大公司offer的人，我见好就收，同意了。所以最终工资应该就是13k*14.6</p>\n<p>人生漫漫，至于我最终的走向，我打算是先在百度努力学习2-3年(想在中途transfer到南方深圳)，觉得时机、技术成熟了再跳去其他公司吧。毕竟没人会跟钱过不去。</p>\n<h2 id=\"-\">感情？</h2>\n<p>对于技术宅的我，朋友很少，即使是在师范院校，女生也没结识几个。<br>以至于之前有位女生“喜欢”我，由于我没什么经验等等原因，所以也变成了过去式。\n<img src=\"/upload/1477295793439.png\" alt=\"ClipboardImage\"></p>\n<p>现在我哥哥嫂子也有了自己的孩子，我爸妈也半百了，然后我工作地又在遥远的北方，一年最多也就回家不到1个月了，一切还是且行且珍惜吧，收敛个性。</p>\n<h2 id=\"-\">一些代码吧</h2>\n<p>小结下，大学四年在学校，我都有写过些什么代码。</p>\n<ol>\n<li>大一c语言 win32 dos 学生信息管理</li>\n<li>大二Vc++ mfc画图 </li>\n<li>大二Vc++ mfc贪吃蛇游戏</li>\n<li>大二Vc++ mfc弹珠游戏</li>\n<li>大二Vc++ mfc是男人下100层游戏</li>\n<li>大三数据结构 Huffman 压缩解压软件</li>\n<li>大三数据结构 mfc 图系列算法动态运行</li>\n<li>大三数据结构 第一个web程序 订票系统</li>\n<li>大三软件工程 完整web系统 考友无忧</li>\n<li>大三数据库 第一个node web程序 书窝</li>\n<li>大三图形学 threejs入门，canvas画图</li>\n<li>大四课程设计 验证码识别+查分系统+点歌机器人</li>\n<li>大四 Moka &amp; themes (moka &amp; toy)</li>\n</ol>\n<p><img src=\"/upload/1477295914847.png\" alt=\"ClipboardImage\"></p>\n<p>完.</p>\n","head":{"title":"再也不是“单纯”学生","date":"24 Oct 2016","tags":["总结","随笔"],"cover":"http://imglf.nosdn.127.net/img/VGZOcGsxRHZhM2x0cWVBaDhhUmFRTUFTaDFrYWZlMDJDd040MlNydlBUM3FBY3hQU050TmVnPT0.jpg?imageView&thumbnail=800x0&quality=96&stripmeta=0&type=jpg"}},"node-express-jade实现HTTP文件浏览器":{"content":"<h1 id=\"-\">前言</h1>\n<p>我们有时候会有一个这样的需求，就是共享本地电脑的文件夹，方便在其他地方查看。\n那么，我们可以用现成的FTP协议，但是ftp协议约束太高，界面丑陋，而且功能不能扩展，\n所以，借着学习node的契机，我实践动手做了这个http文件浏览器。\n<!--more--></p>\n<h1 id=\"-\">预览</h1>\n<p><img src=\"/htm/images/httpfile1.png\" alt=\"img\">\n<img src=\"/htm/images/httpfile2.png\" alt=\"img\">\n<img src=\"/htm/images/httpfile3.png\" alt=\"img\"></p>\n<h1 id=\"-\">功能</h1>\n<ul>\n<li>支持图片，视频，音乐在线欣赏</li>\n<li><p>支持文件夹压缩下载（管道流下载）</p>\n<h1 id=\"-\">实现</h1>\n<ol>\n<li>安装<code>express</code>\n npm install -g express</li>\n<li><p>快速创建应用\n express http_file_explorer</p>\n<p> 之后就可以看到快速创建的http_file_explorer应用</p>\n</li>\n<li>在<code>app.js</code>入口文件中<pre><code class=\"lang-javascript\"> <span class=\"hljs-keyword\">app</span>.configure(function(){\n   <span class=\"hljs-keyword\">app</span>.<span class=\"hljs-keyword\">set</span>('views', __dirname + '/views');\n   <span class=\"hljs-keyword\">app</span>.<span class=\"hljs-keyword\">set</span>('<span class=\"hljs-keyword\">view</span> engine', 'jade');\n   <span class=\"hljs-keyword\">app</span>.<span class=\"hljs-keyword\">use</span>(express.bodyParser());\n   <span class=\"hljs-keyword\">app</span>.<span class=\"hljs-keyword\">use</span>(express.methodOverride());\n   <span class=\"hljs-comment\">//* 下面两个的顺序不能错，不然public文件夹中的资源请求也会被routes.index处理</span>\n   <span class=\"hljs-keyword\">app</span>.<span class=\"hljs-keyword\">use</span>(express.static(__dirname + '/public'));\n   <span class=\"hljs-keyword\">app</span>.<span class=\"hljs-keyword\">use</span>(<span class=\"hljs-keyword\">app</span>.router);\n });\n ...\n <span class=\"hljs-keyword\">app</span>.<span class=\"hljs-built_in\">get</span>('<span class=\"hljs-comment\">/*', routes.index);//对所有url进行处理</span>\n</code></pre>\n</li>\n<li>关于<code>routes/index.js</code><pre><code class=\"lang-javascript\"> <span class=\"hljs-built_in\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>);\n <span class=\"hljs-comment\">// 实现Promise标准的库，使得代码更优雅</span>\n <span class=\"hljs-built_in\">var</span> Q = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'q'</span>);\n <span class=\"hljs-comment\">// 解析url信息</span>\n <span class=\"hljs-built_in\">var</span> <span class=\"hljs-built_in\">url</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'url'</span>);\n <span class=\"hljs-comment\">// 压缩功能使用的包</span>\n <span class=\"hljs-built_in\">var</span> archiver = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'archiver'</span>);\n <span class=\"hljs-comment\">// 读取root，得到需要共享的文件夹路径</span>\n <span class=\"hljs-built_in\">var</span> root = fs.readFileSync(<span class=\"hljs-string\">'./root'</span>).toString();\n exports.index = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>)</span>{\n     <span class=\"hljs-comment\">// 解析url，得到参数等信息</span>\n     <span class=\"hljs-built_in\">var</span> arg = <span class=\"hljs-built_in\">url</span>.parse(req.url,<span class=\"hljs-literal\">true</span>),\n         query = arg.query;\n     <span class=\"hljs-comment\">// 将url路径解码，不然中文文件名出错</span>\n     <span class=\"hljs-built_in\">var</span> r = <span class=\"hljs-built_in\">decodeURIComponent</span>(arg.pathname);\n     r=r===<span class=\"hljs-string\">'/'</span>?<span class=\"hljs-string\">''</span>:r;\n     <span class=\"hljs-built_in\">console</span>.info(r,query);\n     <span class=\"hljs-keyword\">if</span>(!query.compress){<span class=\"hljs-comment\">//是否压缩下载？</span>\n         <span class=\"hljs-built_in\">var</span> state = fs.statSync(root+r);\n         <span class=\"hljs-keyword\">if</span>(state.isDirectory())\n             loadDir(root+r,r, req, res);\n         <span class=\"hljs-keyword\">else</span>\n             loadFile(root+r,r,query.raw,res);\n     }<span class=\"hljs-title\">else</span>{\n         loadZip(root+r,r,req,res);\n     }\n };\n</code></pre>\n</li>\n<li>使用Promise，实现文件夹的同步读取\n可以参考<a target='_blank' href='http://moyuyc.github.io/2016/05/01/%E3%80%8CECMAScript6%E3%80%8DPromise%E4%BB%8B%E7%BB%8D%E4%B8%8Enodejs%E5%AE%9E%E8%B7%B5%E8%BF%90%E7%94%A8(q.js)' >Promise介绍与nodejs实践运用(q.js)</a><pre><code class=\"lang-javascript\"> <span class=\"hljs-keyword\">var</span> statPr = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">root,file</span>) </span>{\n   <span class=\"hljs-keyword\">var</span> deferred = Q.defer();\n   fs.stat(root+<span class=\"hljs-string\">'/'</span>+file,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, stats</span>) </span>{\n     <span class=\"hljs-keyword\">if</span>(err) deferred.reject(err);\n     <span class=\"hljs-keyword\">else</span> {\n         stats.name = file;\n         stats.type = stats.isDirectory()?<span class=\"hljs-string\">'文件夹'</span>:<span class=\"hljs-string\">'文件'</span>;\n         deferred.resolve(stats, root);\n     }\n   });\n   <span class=\"hljs-keyword\">return</span> deferred.promise;\n };\n <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">loadDir</span>(<span class=\"hljs-params\">root,rela,req,res</span>) </span>{\n   fs.readdir(root,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err,files</span>) </span>{\n     <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">throw</span> err;\n     Q.allSettled(files.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">x,i,a</span>)=&gt;</span>{<span class=\"hljs-keyword\">return</span> statPr(r,x);}))\n 　　.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">results</span>) </span>{\n 　　<span class=\"hljs-keyword\">var</span> values=[];\n 　　results.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span>=&gt;</span>{\n 　　    <span class=\"hljs-keyword\">if</span>(x.state===<span class=\"hljs-string\">'fulfilled'</span>){\n     　　values.push(x.value);\n 　　    }<span class=\"hljs-keyword\">else</span>\n　　        　　<span class=\"hljs-built_in\">console</span>.error(x.reason);\n 　　});\n　　    　　res.render(<span class=\"hljs-string\">'file'</span>,<span class=\"hljs-built_in\">Object</span>.extend(o,\n    　　 {\n     　　<span class=\"hljs-attr\">title</span>:<span class=\"hljs-string\">'HTTP文件查看'</span>,\n     　　<span class=\"hljs-attr\">dirname</span>:rela,\n     　　<span class=\"hljs-attr\">files</span> : values.map(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span>=&gt;</span> {\n       　　  <span class=\"hljs-keyword\">return</span> {\n         　　<span class=\"hljs-attr\">type</span>: x.type,\n         　　<span class=\"hljs-attr\">name</span>: x.name,\n         　　<span class=\"hljs-attr\">time</span>: x.mtime.format(),\n         　　<span class=\"hljs-attr\">size</span>: x.size.toSize()\n         　　};\n     　　})\n     　　})\n 　　);\n 　　},<span class=\"hljs-built_in\">console</span>.error)\n   });\n }\n</code></pre>\n</li>\n<li><p>关于<code>Jade</code>\n<code>Jade</code>是一个html模板，具有简洁的特点。\n关于<code>Jade</code>语法，参考<a href=\"https://cnodejs.org/topic/5368adc5cf738dd6090060f2\">Jade 模板引擎使用</a></p>\n</li>\n<li><p>关于压缩实现\n在这我是用了<code>archiver</code>模块，其实还有很多的压缩解压缩模块，<a href=\"http://www.tuicool.com/articles/ZrQBjan\">参看更多</a></p>\n<pre><code class=\"lang-javascript\"> <span class=\"hljs-keyword\">var</span> archiver = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'archiver'</span>);\n <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">loadZip</span>(<span class=\"hljs-params\">file,rela,req,res</span>) </span>{\n     <span class=\"hljs-keyword\">var</span> state = fs.statSync(file);\n     <span class=\"hljs-keyword\">var</span> filename = rela.substring(rela.lastIndexOf(<span class=\"hljs-string\">'/'</span>)+<span class=\"hljs-number\">1</span>);\n     <span class=\"hljs-keyword\">var</span> archive = archiver(<span class=\"hljs-string\">'zip'</span>);\n     archive.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>)</span>{<span class=\"hljs-keyword\">throw</span> err;});\n     archive.pipe(res);\n     <span class=\"hljs-keyword\">if</span>(state.isDirectory()) archive.directory(file,filename);\n     <span class=\"hljs-keyword\">else</span> archive.file(file,{<span class=\"hljs-attr\">name</span>:filename});\n     archive.finalize();\n }\n</code></pre>\n<p>更多文档资料可以查看<a href=\"https://github.com/ctalkington/node-archiver\">archiver</a></p>\n</li>\n<li>关于管道流\n下载文件传统的方法如下：<pre><code class=\"lang-javascript\">fs.readFile(path,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(err,data)</span></span>{\n <span class=\"hljs-keyword\">if</span>(err) throw err;\n res.<span class=\"hljs-keyword\">end</span>(<span class=\"hljs-keyword\">data</span>);\n})\n</code></pre>\n传统方式将数据全部读取完毕后，才产生响应，第一，服务器需要花费较大内存保存数据，第二，不能及时(相对)响应。\n然后，我们可以改进为以下方法<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> stream = fs.createReadStream(path);\nstream.<span class=\"hljs-keyword\">on</span>(<span class=\"hljs-string\">'data'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(data)</span><span class=\"hljs-comment\">{\n res.write(data);\n}</span>);</span>\nstream.<span class=\"hljs-keyword\">on</span>(<span class=\"hljs-string\">'end'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span><span class=\"hljs-comment\">{\n res.end();\n}</span>)</span>\n</code></pre>\n这种方法，乍一看，好像解决了传统方法的问题，但是！对于本地文件，可读流是快速的，相比于网络传输的数据，可写流的慢速的，\n所以服务器端的缓冲器将会很快被填满，然后继续讲数据写入内存中，还是会出现传统方法的第一个问题。\n就此问题，我们可以采用下面的方法解决<pre><code class=\"lang-javascript\"> var stream = fs.createReadStream(path);\n stream.on(<span class=\"hljs-string\">'data'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(data)</span>{</span>\n     <span class=\"hljs-keyword\">if</span>(!res.write(data)){<span class=\"hljs-comment\">//无法将数据写入缓冲区</span>\n         stream.<span class=\"hljs-keyword\">pause</span>();<span class=\"hljs-comment\">//暂停发送数据</span>\n     }\n });\n <span class=\"hljs-comment\">// 缓冲器已经没数据了！</span>\n stream.on(<span class=\"hljs-string\">'drain'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span>{</span>\n     stream.<span class=\"hljs-keyword\">resume</span>();<span class=\"hljs-comment\">//恢复</span>\n })\n stream.on(<span class=\"hljs-string\">'end'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span>{</span>\n     res.<span class=\"hljs-keyword\">end</span>();\n })\n</code></pre>\n也就是说，发送方将缓冲区填满后，就停止发送数据了，然后接收方将缓冲区数据完全读取走后，发送方恢复发送数据\n最后，<code>stream.pipe()</code>就是基于这种方法实现的，所以我们可以直接使用管道流<pre><code class=\"lang-javascript\"> <span class=\"hljs-comment\">//可读流结束发送数据后，可写流写完数据后自动结束关闭</span>\n fs.createReadStream<span class=\"hljs-comment\">(path)</span>.pipe<span class=\"hljs-comment\">(res)</span>;\n</code></pre>\n可以将数据流想象成水流，管道流就是一根水管，一端进水，另一端出水，也就是一端为可读数据流，另一端为可写数据流，而缓冲区就是水管的容量。\ngithub上的文件下载就是使用管道流实现的吧？</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"-\">下载</h1>\n<p><a href=\"https://github.com/moyuyc\">github地址</a></p>\n","head":{"title":"node+express+jade实现HTTP文件浏览器","date":"28 May 2016","categories":["后端"],"tags":["nodejs","express","jade"]}},"npm命令行小结":{"content":"<h1 id=\"yarn\">yarn</h1>\n<p>最近停到facebook又出了个yarn, 新的node package manager. \n噱头是安装能够直接找缓存，不需要每次从网上下。</p>\n<p>于是<code>npm i -g yarn</code>安装后，使用了一番，觉得也就那样，还需要把<code>yarn.lock</code>放到项目中，</p>\n<p><strong>其实<code>npm</code>对于cache也有一些指令处理的。</strong>\n<!--more--></p>\n<h1 id=\"npm\">npm</h1>\n<pre><code><span class=\"hljs-built_in\">npm</span> cache ls\n</code></pre><p>可以查看你本地的cache，之前你的每一次<code>install</code>都会在本地有cache的，默认是放在<code>$HOME/.npm</code>中\n    npm cache clean\n清除本地cache</p>\n<pre><code>npm <span class=\"hljs-keyword\">install </span>react --<span class=\"hljs-keyword\">cache-min </span><span class=\"hljs-number\">6000</span>\n</code></pre><p>上面<code>--cache-min</code>指的是是否需要从缓存里面取package，时间不超过6000分钟，超过6000分钟也将从网上download，\n还可以<code>--cache-min=Infinity</code>，分钟数设为无穷，这样可以保证了包下载的速度。</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> <span class=\"hljs-comment\">--only=dev</span>\n</code></pre><p>将会只安装<code>package.json</code>中的<code>devDependencies</code>, 对立的是<code>--only=production</code></p>\n<h1 id=\"more\">more</h1>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/01/npm-install.html\"> 阮一峰 npm 模块安装机制简介</a></p>\n","head":{"title":"npm命令行小结","date":"13 Oct 2016","tags":["npm"]}},"play_css3_Animation":{"content":"<p><iframe src='/htm/css31.html' style='width:100%;height:260px;'></iframe>\n将鼠标移动至黑色方格上，或者点击黑色方格。</p>\n<!--more-->\n<h1 id=\"-css3-\">关于CSS3动画</h1>\n<h2 id=\"transform-translation-\">transform? translation?</h2>\n<h3 id=\"-transform-\">转换（transform）</h3>\n<p>　　顾名思义，就是一些转换动作，如放大缩小( <code>scale</code> )，平移( <code>translate</code> )，旋转( <code>rotate</code> )，翻转( <code>skew</code> )等。\n就是关于二维图形与三维模型的转换动作（矩阵变换，图形学中的东西，这里不深究）。\n关于，三维空间的基本转换和少许组合转换，我做过类似的<a href=\"http://moyuyc.xyz/play_3d/play_3d_demo1.html\">Demo</a> <strong>(请使用最新版的主流浏览器查看)</strong>\n<img src=\"/htm/images/css31.png\" alt=\"IMG\">\n参考资料</p>\n<ul>\n<li><a href=\"http://www.w3school.com.cn/css3/css3_2dtransform.asp\">CSS3 2D 转换</a></li>\n<li><a href=\"http://www.w3school.com.cn/css3/css3_3dtransform.asp\">CSS3 3D 转换</a></li>\n</ul>\n<h3 id=\"-translation-\">过渡（translation）</h3>\n<p>　　在CSS中的属性改变后，为了使用户体验更加良好，需要使用到过渡效果，使得属性变换更加平滑。</p>\n<p>参考资料</p>\n<ul>\n<li><a href=\"http://www.w3school.com.cn/css3/css3_transition.asp\">CSS3 过渡</a></li>\n</ul>\n<h2 id=\"animation-\">Animation?</h2>\n<h3 id=\"-animation-\">动画（Animation）</h3>\n<p>　　可以将一系列复杂的css属性变化活动定义为一个动画，并且规定触发动画的次数或其他相关设定。</p>\n<p>参考资料</p>\n<ul>\n<li><a href=\"http://www.w3school.com.cn/css3/css3_animation.asp\">CSS3 动画</a></li>\n</ul>\n<h1 id=\"-\">关于示例动画</h1>\n<h2 id=\"-\">第一个「活跃」的蓝色方块</h2>\n<h3 id=\"-\">首先定义动画</h3>\n<pre><code class=\"lang-css\">@<span class=\"hljs-keyword\">keyframes</span> animated_div\n{\n    0%    {<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(0deg);<span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">0px</span>;}\n    25%    {<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(20deg);<span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">0px</span>;}\n    50%    {<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(0deg);<span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">500px</span>;}\n    55%    {<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(0deg);<span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">500px</span>;}\n    70%    {<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(0deg);<span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">500px</span>;<span class=\"hljs-attribute\">background</span>:<span class=\"hljs-number\">#1ec7e6</span>;}\n    100%    {<span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">rotate</span>(-360deg);<span class=\"hljs-attribute\">left</span>:<span class=\"hljs-number\">0px</span>;}\n}\n</code></pre>\n<p><code>@keyframes animated_div</code> 定义了一个名为 <code>animated_div</code> 的动画，这样我们就可以直接在后面使用这个动画了。\n<code>xx%</code> 表示的是动画的进度，即最开始对应 <code>0%</code> 。\n因为各公司浏览器都想自己搞垄断，所以为了兼容主流浏览器不得不重复一段代码了</p>\n<pre><code class=\"lang-css\">@-<span class=\"hljs-keyword\">webkit</span>-<span class=\"hljs-keyword\">keyframes</span> animated_div{<span class=\"hljs-comment\">/*同样定义*/</span>}\n@-<span class=\"hljs-keyword\">moz</span>-<span class=\"hljs-keyword\">keyframes</span> animated_div{<span class=\"hljs-comment\">/*同样定义*/</span>}\n@-<span class=\"hljs-keyword\">o</span>-<span class=\"hljs-keyword\">keyframes</span> animated_div{<span class=\"hljs-comment\">/*同样定义*/</span>}\n</code></pre>\n<h3 id=\"-\">使用动画</h3>\n<pre><code class=\"lang-html\">&lt;div <span class=\"hljs-built_in\">style</span>='margin:30px;<span class=\"hljs-built_in\">position</span>:relative;<span class=\"hljs-built_in\">animation</span>: animated_div 2s infinite;padding:10px;<span class=\"hljs-built_in\">display</span>:inline-<span class=\"hljs-built_in\">block</span>;'&gt;\n    CSS3 Animation\n&lt;/div&gt;\n</code></pre>\n<p><code>margin</code> <code>padding</code> 是用来美化距离的，\n<code>display:inline-block;</code> 将该元素变为行内块，不然 <code>div</code> 默认为块元素，将独占一整行。\n<code>position:relative;</code> 是为了让 <code>left</code> <code>right</code> <code>bottom</code> <code>top</code> 凑效。\n<code>animation: animated_div 2s infinite;</code> 使用刚刚我们定义的动画，动画的周期为2s，<code>infinite</code> 表示无限制的进行动画！</p>\n<p>这样你就能看到第一个动画啦！</p>\n<h2 id=\"-\">关于两个小黑块</h2>\n<h3 id=\"-\">首先是定义样式</h3>\n<ul>\n<li><p>CSS</p>\n<pre><code class=\"lang-css\"><span class=\"hljs-selector-class\">.magic-div</span>{\n  <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">56px</span>;\n  <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">50px</span>;\n  <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">10px</span>;\n  <span class=\"hljs-attribute\">line-height</span>:<span class=\"hljs-number\">0</span>;<span class=\"hljs-comment\">/* * */</span>\n  <span class=\"hljs-attribute\">background-color</span>:black;\n  <span class=\"hljs-attribute\">cursor</span>:pointer;\n}\n<span class=\"hljs-selector-class\">.magic-div</span>&gt;<span class=\"hljs-selector-tag\">span</span>{\n  <span class=\"hljs-attribute\">background-color</span>:white;\n  <span class=\"hljs-attribute\">margin-top</span>:<span class=\"hljs-number\">20px</span>;\n  <span class=\"hljs-attribute\">vertical-align</span>: top;\n  <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">100%</span>;\n  <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">2px</span>;\n  <span class=\"hljs-attribute\">display</span>: inline-block;\n\n  <span class=\"hljs-attribute\">transition</span>:all .<span class=\"hljs-number\">6s</span>; <span class=\"hljs-comment\">// 所有属性都有过渡效果</span>\n}\n<span class=\"hljs-selector-class\">.magic-div</span>&gt;<span class=\"hljs-selector-tag\">span</span>:first-child{\n  <span class=\"hljs-attribute\">margin-top</span>:<span class=\"hljs-number\">3px</span>;\n}\n</code></pre>\n</li>\n<li><p>HTML</p>\n<pre><code class=\"lang-html\">&lt;div style=<span class=\"hljs-string\">'display:inline-block;'</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">'magic-div magic-div-right'</span>&gt;\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>\n&lt;span&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>\n&lt;span&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>\n&lt;<span class=\"hljs-regexp\">/div&gt;</span>\n</code></pre>\n<p>这样你就能看到一个黑块中含有三条水平横线啦</p>\n</li>\n</ul>\n<h3 id=\"-\"><strong>动画控制</strong></h3>\n<ul>\n<li>第一个黑块<pre><code class=\"lang-javascript\"><span class=\"hljs-built_in\">var</span> div = document.querySelector('.magic-div-right');\nfunction bind(<span class=\"hljs-built_in\">elem</span>,type,fn){\n  <span class=\"hljs-built_in\">elem</span>[type]=fn;\n  <span class=\"hljs-built_in\">elem</span>.addEventListener(type,<span class=\"hljs-built_in\">elem</span>[type]);\n}\nbind(div,'mouseenter',function(e){\n  <span class=\"hljs-built_in\">var</span> <span class=\"hljs-built_in\">first</span> = this.firstElementChild,<span class=\"hljs-built_in\">last</span> = this.lastElementChild, mid = <span class=\"hljs-built_in\">first</span>.nextElementSibling;\n  <span class=\"hljs-built_in\">first</span>.<span class=\"hljs-built_in\">style</span>.<span class=\"hljs-built_in\">transform</span>='<span class=\"hljs-built_in\">scale</span>(.<span class=\"hljs-number\">5</span>) <span class=\"hljs-built_in\">translate</span>(35px,25px) rotate(45deg)'\n  <span class=\"hljs-built_in\">last</span>.<span class=\"hljs-built_in\">style</span>.<span class=\"hljs-built_in\">transform</span>='<span class=\"hljs-built_in\">scale</span>(.<span class=\"hljs-number\">5</span>) <span class=\"hljs-built_in\">translate</span>(35px,-25px) rotate(-45deg)'\n  mid.<span class=\"hljs-built_in\">style</span>.<span class=\"hljs-built_in\">opacity</span>='<span class=\"hljs-number\">1</span>';\n});\nbind(div,'mouseleave',function(e){\n  <span class=\"hljs-built_in\">var</span> <span class=\"hljs-built_in\">first</span> = this.firstElementChild,<span class=\"hljs-built_in\">last</span> = this.lastElementChild, mid = <span class=\"hljs-built_in\">first</span>.nextElementSibling;\n  <span class=\"hljs-built_in\">first</span>.<span class=\"hljs-built_in\">style</span>.<span class=\"hljs-built_in\">transform</span>=<span class=\"hljs-built_in\">last</span>.<span class=\"hljs-built_in\">style</span>.<span class=\"hljs-built_in\">transform</span>='';\n  mid.<span class=\"hljs-built_in\">style</span>.<span class=\"hljs-built_in\">opacity</span>='<span class=\"hljs-number\">1</span>';\n})\nbind(div,'click',function(e){\n  <span class=\"hljs-built_in\">var</span> <span class=\"hljs-built_in\">first</span> = this.firstElementChild,<span class=\"hljs-built_in\">last</span> = this.lastElementChild, mid = <span class=\"hljs-built_in\">first</span>.nextElementSibling;\n  <span class=\"hljs-built_in\">first</span>.<span class=\"hljs-built_in\">style</span>.<span class=\"hljs-built_in\">transform</span>= 'rotate(45deg) <span class=\"hljs-built_in\">translate</span>(15px,15px)';\n  mid.<span class=\"hljs-built_in\">style</span>.<span class=\"hljs-built_in\">opacity</span>='<span class=\"hljs-number\">0</span>';\n  <span class=\"hljs-built_in\">last</span>.<span class=\"hljs-built_in\">style</span>.<span class=\"hljs-built_in\">transform</span> = 'rotate(-45deg) <span class=\"hljs-built_in\">translate</span>(15px,-15px)';\n});\n</code></pre>\n至于为什么需要定义一个 <code>bind</code> 函数，应该聪明的读者已经知道我要干什么了，\n<code>bind</code> 函数中 <code>elem[type]=fn;</code> 将事件处理函数绑定到元素中了，\n在原生js中，元素有 <code>click()</code>,<code>focus()</code>,<code>blur()</code>...，这样的方法，可以直接调用对应的事件函数，\n但是却没有类似 <code>jQuery</code> 中的 <code>mouseenter()</code>,<code>mouseleave()</code> 方法。\n我这样做，能达到类似 <code>jQuery</code> 中的效果。</li>\n</ul>\n<p>然后是函数中，一大堆的 <code>transform</code>,<code>scale(xx)</code>,<code>translate(xx,xx)</code>,<code>rotate(xx)</code>，也不难理解，只要上过初中平面几何就能明白了。\n至于为什么会出现动态的效果，那都是多亏了样式中的 <code>transition:all .6s;</code></p>\n<ul>\n<li>第二个黑块\n第二个黑块完全就是第一个黑块的孪生兄弟，可能有人会说了，这还不简单吗？直接copy第一份的代码，然后修改一下元素不就行了吗？\n这样的确可以，但是我是用的是另一种方法，使得代码缩减了许多。<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> otherdiv = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.magic-div-copy'</span>);\nbind(otherdiv,<span class=\"hljs-string\">'mouseenter'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n  div.mouseenter.call(<span class=\"hljs-keyword\">this</span>);\n})\nbind(otherdiv,<span class=\"hljs-string\">'mouseleave'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n  div.mouseleave.call(<span class=\"hljs-keyword\">this</span>);\n});\nbind(otherdiv,<span class=\"hljs-string\">'click'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n  div.click.call(<span class=\"hljs-keyword\">this</span>);\n})\n</code></pre>\n<code>div.mouseenter.call(this);</code> 意思是将<code>div.mouseenter</code>方法调用，但是不是被div调用，而是被 <code>this</code> （即otherdiv）调用。\n<code>call</code> 属于 Function原型中的方法，第一个参数是调用该函数的对象，后面还可以跟上函数的参数。\n<code>apply</code> 对比 <code>call</code>，也是换汤不换药，不过函数的参数是以数组方式传入的。</li>\n</ul>\n","head":{"title":"play css3 Animation","date":"27 Apr 2016","categories":["前端"],"tags":["css3","页面效果"]}},"requestAnimationFrame_Vs_setInterval":{"content":"<h1 id=\"-\">介绍</h1>\n<p>大家对setInterval一定不陌生，但可能不太了解requestAnimationFrame\nrequestAnimationFrame是HTML5新添的api，两者都能产生动画效果。</p>\n<h1 id=\"-\">区别</h1>\n<p>requestAnimationFrame 参数只有一个参数，是用来循环调用的方法，\nsetInterval 有两个参数，第一个是方法，第二个是循环调用的时间。\n<strong>但是，JavaScript是单线程的，也就是同一时间只能有一句JavaScript语句执行所以，setInterval的实现是通过事件驱动完成的，当时间到了之后，setInterval加入事件队列，等待JavaScript的青睐，所以这种计时是不准确的。</strong>\n<!--more--></p>\n<h2 id=\"demo\">Demo</h2>\n<script>function progress(p){p.style.width='0%';p.innerText='0%';function run(){var w = parseInt(p.style.width);p.innerText = w +'%';if(w==100) return;p.style.width = w+1+'%';setTimeout(arguments.callee,15)}setTimeout(run,15);}</script>\n<p id='progress' style=\"width:0%;background-color:blue;color:white\">0</p>\n<button onclick=\"progress(document.querySelector('#progress'));\">RUN</button>\n<script>progress(document.querySelector('#progress'));</script>\n\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">progress</span>(<span class=\"hljs-params\">p</span>)</span>{\n    p.style.width=<span class=\"hljs-string\">'0%'</span>;\n    p.innerText=<span class=\"hljs-string\">'0%'</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">run</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-keyword\">var</span> w = <span class=\"hljs-built_in\">parseInt</span>(p.style.width);\n        p.innerText = w +<span class=\"hljs-string\">'%'</span>;\n        <span class=\"hljs-keyword\">if</span>(w==<span class=\"hljs-number\">100</span>) <span class=\"hljs-keyword\">return</span>;\n        p.style.width = w+<span class=\"hljs-number\">1</span>+<span class=\"hljs-string\">'%'</span>;\n        requestAnimationFrame(<span class=\"hljs-built_in\">arguments</span>.callee)\n    }\n    requestAnimationFrame(run);\n}\n</code></pre><script>function progress2(p){p.style.width='0%';p.innerText='0%';function run(){var w = parseInt(p.style.width);p.innerText = w +'%';if(w==100){clearInterval(t); return;}p.style.width = w+1+'%';}var t =setInterval(run,15);}</script>\n\n<p><p id='progress2' style=\"width:0%;background-color:blue;color:white\">0</p></p>\n<button onclick=\"progress2(document.querySelector('#progress2'));\">RUN</button>\n\n<script>progress2(document.querySelector('#progress2'));</script>\n\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">progress2</span>(<span class=\"hljs-params\">p</span>)</span>{\n    p.style.width=<span class=\"hljs-string\">'0%'</span>;\n    p.innerText=<span class=\"hljs-string\">'0%'</span>;\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">run</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-keyword\">var</span> w = <span class=\"hljs-built_in\">parseInt</span>(p.style.width);\n        p.innerText = w +<span class=\"hljs-string\">'%'</span>;\n        <span class=\"hljs-keyword\">if</span>(w==<span class=\"hljs-number\">100</span>){\n            clearInterval(t); <span class=\"hljs-keyword\">return</span>;\n        }\n        p.style.width = w+<span class=\"hljs-number\">1</span>+<span class=\"hljs-string\">'%'</span>;\n    }\n    <span class=\"hljs-keyword\">var</span> t =setInterval(run,<span class=\"hljs-number\">15</span>);\n}\n</code></pre><p> 可以看到，<code>requestAnimationFrame</code>代码量更少。</p>\n<h1 id=\"-\">惊天秘密</h1>\n<p> <strong>深入理解，可以把<code>requestAnimationFrame(func)</code>等效为<code>setTimeout(func,15);</code></strong>\n 不信，你试下嘛。\n 当然，<code>requestAnimationFrame</code>在浏览器查看其它网页的一段时间后，便会自动停止动画。\n 在threejs中，就是用<code>requestAnimationFrame</code>来减少cpu负载的。\n <strong>2016/5/15 更新</strong>\n <code>requestAnimationFrame</code> 中会默认传入一个相对的时间戳，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\">详细看这里</a>；\n <code>setTimeout(func,15);</code>除了这种用法以外，还可以<code>setTimeout(func,15,args);</code>传入参数，当然<code>setInterval</code>也一样。</p>\n","head":{"title":"requestAnimationFrame Vs setInterval","date":"23 Apr 2016","tags":["js"],"categories":["前端"]}},"「ECMAScript6」Promise介绍与nodejs实践运用(q.js)":{"content":"<h1 id=\"-\">介绍</h1>\n<p>看了网上许多介绍 <code>Promise</code> 的文章，终于知道 <code>Promise</code> 是什么，干什么的了。\n首先需要指出的是，<strong>promise是es6提出的新标准之一</strong>，那么提出这个标准是用来做什么的呢？\n<!--more-->\n写过js代码的童鞋一定知道，异步回调函数是js的一大特点，那么异步回调函数带来的问题是什么呢？会造成函数嵌套过多，不宜于后期代码的维护，许多的<code>({})</code>也容易把我们搞得晕头转向。那么promise便是用来解决该问题。\n那么es6提出这个标准，那么就得有人按照这个标准来实现吧，于是百家争鸣，出现许多库(以便在非浏览器环境下使用)，在这我介绍 <code>q.js</code>.\n<a href=\"https://github.com/kriskowal/q\"><code>q.js</code> github地址</a></p>\n<h1 id=\"-\">使用</h1>\n<ul>\n<li>安装<code>q.js</code>\n  npm install q</li>\n<li>使用</li>\n</ul>\n<ol>\n<li><p>使用<code>Q.nfcall</code></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>),\n Q   = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'q'</span>);\n<span class=\"hljs-keyword\">var</span> promise = Q.nfcall(fs.readFile,<span class=\"hljs-string\">'run.js'</span>);\npromise.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>)</span>{\n     <span class=\"hljs-built_in\">console</span>.log(data);\n },<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>)</span>{\n     <span class=\"hljs-built_in\">console</span>.err(err);\n });\n</code></pre>\n<p> 或者可以简写为下面</p>\n<pre><code> promise.<span class=\"hljs-keyword\">then</span>(<span class=\"hljs-built_in\">console</span>.log,<span class=\"hljs-built_in\">console</span>.err);\n</code></pre></li>\n<li><p>使用<code>Q.deferd</code></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> preadFile = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">file</span>)</span>{\n <span class=\"hljs-keyword\">var</span> deferred = Q.defer();\n fs.readFile(file,  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">error, text</span>) </span>{\n     <span class=\"hljs-keyword\">if</span> (error) {\n         deferred.reject(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(error));\n     } <span class=\"hljs-keyword\">else</span> {\n         deferred.resolve(text);\n     }\n });\n <span class=\"hljs-keyword\">return</span> deferred.promise;\n};\npreadFile(<span class=\"hljs-string\">'run.js'</span>).then(<span class=\"hljs-built_in\">console</span>.log,<span class=\"hljs-built_in\">console</span>.err);\n</code></pre>\n</li>\n<li><p>还可以用<code>Q.all</code>实现<strong>同步方式</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> promise = Q.all([Q.nfcall(fs.readFile,<span class=\"hljs-string\">'run.js'</span>),preadFile(<span class=\"hljs-string\">'event.js'</span>),preadFile(<span class=\"hljs-string\">'nofound.js'</span>)]);\npromise.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>)</span>{<span class=\"hljs-built_in\">console</span>.log(data.toString())},<span class=\"hljs-built_in\">console</span>.error);\n</code></pre>\n<p> 因为<code>nofound.js</code>不存在所以会抛出异常，其他文件即使存在也不会正确执行.</p>\n</li>\n<li><p>多层嵌套<strong>异步方式</strong>\n```javascript\nvar preadFile = function(file){\n var deferred = Q.defer();\n fs.readFile(file,  function (error, text) {</p>\n<pre><code> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">error</span>) {\n     deferred.reject(new Error(<span class=\"hljs-keyword\">error</span>));\n } <span class=\"hljs-keyword\">else</span> {\n     deferred.resolve({data:<span class=\"hljs-built_in\">text</span>,<span class=\"hljs-built_in\">file</span>:<span class=\"hljs-built_in\">file</span>});\n }\n</code></pre><p> });\n return deferred.promise;\n};</p>\n</li>\n</ol>\n<p>preadFile(&#39;run.js&#39;)\n    .then(function (d) {\n        console.log(d);\n        return d.file+&#39;xx&#39;;\n    })\n    .then(preadFile)  //上面return d.file 传递到preadFile中\n    .then(function (d) {\n        console.log(d);\n        return d.file;\n    })\n    .catch(function (e) {\n        console.log(e);\n    }).done(function (e) {//最后一个then return的参数\n        console.log(e);\n    });\n<code>``\n    上面的代码</code>run.js<code>将会正确输出，但是因为不存在</code>run.jsxx<code>文件所以会捕获错误，但不影响</code>run.js`的输出。</p>\n<h1 id=\"-\">尾声</h1>\n<p>更多的用法参考<a href=\"https://github.com/kriskowal/q\"><code>q.js</code> github地址</a>\n原来我以前一直使用的 <code>$.ajax({}).fail().done()</code> 正是promise方式的一种。</p>\n","head":{"title":"「ECMAScript6」Promise介绍与nodejs实践运用(q.js)","date":"01 May 2016","categories":["后端"],"tags":["EMCAScript6","promise","nodejs"]}},"「node网络编程」FTP客户端程序":{"content":"<h1 id=\"-\">前言</h1>\n<p>最近，在「计算机网络」的课堂上，老师讲到了应用层相关的协议，<code>FTP/HTTP/SMTP...</code>理论结合实践才能产生最大的效益，所以我便利用<code>nodejs</code>中的<code>net</code>包，进行了相关的网络编程。</p>\n<!--more-->\n<h1 id=\"-\">知识介绍</h1>\n<p><img src=\"/images/ftp1.png\" alt=\"img\"></p>\n<blockquote>\n<p>如图,FTP协议使用了2个tcp连接，一个是控制连接（服务器端默认端口为21），一个是数据传输连接（服务器端默认端口为20），客户端也需要对应的使用两个不同的端口进行连接。</p>\n</blockquote>\n<p><img src=\"/images/ftp2.png\" alt=\"img\"></p>\n<blockquote>\n<p>如图</p>\n<ol>\n<li>在服务器21端口有新的连接到来后，服务器发送220码响应</li>\n<li>客户端利用该连接，向服务器21端口发送<code>USER</code>命令</li>\n<li>服务器响应331</li>\n<li>客户端发送<code>PASS</code>命令</li>\n<li>服务器响应230</li>\n<li>客户端发送<code>PORT</code>命令（客户选择端口号发送，服务器20端口将会与客户端该端口建立tcp连接，这就是数据传输连接）</li>\n<li>服务器响应150</li>\n<li>客户端发送<code>TYPE</code>命令（给服务器端口21，表示更改文件的类型）</li>\n<li>服务器响应200</li>\n<li>客户端发送<code>STRU</code>命令（给服务器端口21，表示更改文件的数据的组织）</li>\n<li>服务器响应200</li>\n<li>客户端发送<code>STOR</code>命令（给服务器端口21，表示发送文件至服务器）</li>\n<li>服务器响应250</li>\n<li>利用6中建立的数据传输连接传输数据</li>\n<li>服务器响应226</li>\n<li>客户端发送<code>QUIT</code>命令（给服务器端口21，表示断开连接）</li>\n<li>服务器响应221</li>\n</ol>\n</blockquote>\n<p><a href=\"https://www.w3.org/Protocols/rfc959/4_FileTransfer.html\">更多信息参考</a></p>\n<h1 id=\"-\">代码</h1>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> net = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'net'</span>);\n\n<span class=\"hljs-keyword\">var</span> socket = net.createConnection(<span class=\"hljs-number\">21</span>,<span class=\"hljs-string\">'172.21.59.162'</span>);<span class=\"hljs-comment\">//new net.Stream();</span>\n\nsocket.on(<span class=\"hljs-string\">'connection'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'connected'</span>);\n});\nsocket.on(<span class=\"hljs-string\">'end'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'disconnected'</span>);\n});\n\nprocess.stdin.pipe(socket).pipe(process.stdout);\nsocket.write(<span class=\"hljs-string\">'USER anonymous\\r\\n'</span>);\nsocket.write(<span class=\"hljs-string\">'PASS guest\\r\\n'</span>);\nsocket.write(<span class=\"hljs-string\">'PWD\\r\\n'</span>);\nsocket.write(<span class=\"hljs-string\">'PORT 172,21,59,162,34,184\\r\\n'</span>);<span class=\"hljs-comment\">//172,21,59,162:客户端IP  34,184:10进制表示端口，即34*256+184=8888</span>\n<span class=\"hljs-comment\">// socket.write('LIST movie\\r\\n');</span>\n<span class=\"hljs-comment\">//socket.write('TYPE I\\r\\n');</span>\nsocket.write(<span class=\"hljs-string\">'RETR bootstrap.zip\\r\\n'</span>);<span class=\"hljs-comment\">//下载服务器端文件</span>\n<span class=\"hljs-comment\">// socket.write('LIST /FTP\\r\\n');</span>\n<span class=\"hljs-keyword\">const</span> client = net.createServer(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">s</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'client new connect'</span>);\n    s.on(<span class=\"hljs-string\">'connect'</span>,()=&gt;{\n        <span class=\"hljs-built_in\">console</span>.info(<span class=\"hljs-string\">'client new connect'</span>);\n    });\n    s.pipe(<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>).createWriteStream(<span class=\"hljs-string\">'ftpfile.zip'</span>));<span class=\"hljs-comment\">//保存服务器服务器数据</span>\n    s.on(<span class=\"hljs-string\">'error'</span>,<span class=\"hljs-built_in\">console</span>.error)\n}).listen(<span class=\"hljs-number\">8888</span>);<span class=\"hljs-comment\">//新的客户端端口</span>\n</code></pre>\n<h1 id=\"-\">总结</h1>\n<p>学习了node的相关网络编程，理解FTP协议，自己造轮子。</p>\n","head":{"title":"「node网络编程」FTP客户端程序","date":"30 May 2016","categories":["后端"],"tags":["nodejs","ftp","net"]}},"「node网络编程」SMTP客户端程序":{"content":"<h1 id=\"-\">前言</h1>\n<p>本文介绍了<code>node</code>中<code>net</code>包使用，以及相关SMTP的知识。</p>\n<!--more-->\n<h1 id=\"-\">知识介绍</h1>\n<p><img src=\"/images/smtp1.png\" alt=\"img\"></p>\n<blockquote>\n<p>如图,电子邮件服务的实现结构，我这里主要讲的是红色圆圈的内容。</p>\n</blockquote>\n<p>下面是一次客户端成功发送QQ邮件的服务器响应和客户端请求的全过程。<strong>（数字开头的即为服务器响应）</strong></p>\n<pre><code>HELO moyu\n\n<span class=\"hljs-number\">220</span> smtp.qq.<span class=\"hljs-keyword\">com</span> Esmtp QQ Mail Server\n\n<span class=\"hljs-number\">250</span> smtp.qq.<span class=\"hljs-keyword\">com</span>\n\nAUTH LOGIN\n\n<span class=\"hljs-number\">334</span> VXNlcm5hbWU6\n\nxxxxxxxxxxxxxxxxxxxx  #隐私内容，经过base64编码的用户名\n\n<span class=\"hljs-number\">334</span> UGFzc3dvcmQ6\n\nxxxxxxxxxxxxxxxxxxx  #隐私内容，经过base64编码的密码\n\n<span class=\"hljs-number\">235</span> Authentication successful\n\nMAIL FROM:<span class=\"hljs-number\">492899414</span>@qq.<span class=\"hljs-keyword\">com</span>\n\n<span class=\"hljs-number\">250</span> Ok\n\nRCPT TO:<span class=\"hljs-number\">492899414</span>@qq.<span class=\"hljs-keyword\">com</span>\n\n<span class=\"hljs-number\">250</span> Ok\n\nDATA\n\n<span class=\"hljs-number\">354</span> End data with <span class=\"hljs-symbol\">&lt;CR&gt;</span><span class=\"hljs-symbol\">&lt;LF&gt;</span>.<span class=\"hljs-symbol\">&lt;CR&gt;</span><span class=\"hljs-symbol\">&lt;LF&gt;</span>\n\nFrom: Moyu\nSubjec<span class=\"hljs-variable\">t:</span> Smtp Client implementation\nTo: <span class=\"hljs-number\">492899414</span>@qq.<span class=\"hljs-keyword\">com</span>\nContent-Type: text/html\n\n<span class=\"hljs-symbol\">&lt;h1&gt;</span>HELLO SMTP&lt;/h1&gt;\n.\n\n\n<span class=\"hljs-number\">250</span> Ok: queued <span class=\"hljs-keyword\">as</span> \n\nQUIT\n\n<span class=\"hljs-number\">221</span> Bye\n</code></pre><h1 id=\"-\">代码</h1>\n<pre><code class=\"lang-javascript\">\n<span class=\"hljs-keyword\">var</span> net = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'net'</span>);\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">sendMail</span>(<span class=\"hljs-params\">host,user,pwd,to,msg</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> socket = net.createConnection(<span class=\"hljs-number\">25</span>,host);\n    <span class=\"hljs-comment\">// 发送者用户名与密码需要base64编码发送</span>\n    <span class=\"hljs-keyword\">var</span> user64 = <span class=\"hljs-keyword\">new</span> Buffer(user).toString(<span class=\"hljs-string\">\"base64\"</span>); \n    pwd  = <span class=\"hljs-keyword\">new</span> Buffer(pwd ).toString(<span class=\"hljs-string\">\"base64\"</span>); \n    socket.on(<span class=\"hljs-string\">'connect'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">this</span>.write(<span class=\"hljs-string\">'HELO '</span>+user+<span class=\"hljs-string\">'\\r\\n'</span>);\n    });\n    <span class=\"hljs-keyword\">var</span> wt = net.Socket.prototype.write;\n    socket.write = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">arguments</span>);\n        <span class=\"hljs-keyword\">return</span> wt.apply(<span class=\"hljs-keyword\">this</span>,<span class=\"hljs-built_in\">arguments</span>);\n    }\n\n    <span class=\"hljs-keyword\">var</span> op = [<span class=\"hljs-string\">'AUTH LOGIN\\r\\n'</span>];\n    socket.pipe(process.stdout);\n    socket.on(<span class=\"hljs-string\">'data'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{\n        data = data.toString();\n        <span class=\"hljs-keyword\">const</span> code = data.match(<span class=\"hljs-regexp\">/^\\d{3}/</span>)[<span class=\"hljs-number\">0</span>]\n        <span class=\"hljs-keyword\">switch</span> (code){\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'250'</span>:{\n                <span class=\"hljs-keyword\">var</span> v = op.shift();\n                <span class=\"hljs-keyword\">if</span>(v===<span class=\"hljs-string\">'AUTH LOGIN\\r\\n'</span>){\n                    op.push(user64+<span class=\"hljs-string\">'\\r\\n'</span>);\n                    op.push(pwd+<span class=\"hljs-string\">'\\r\\n'</span>);\n                }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(v===<span class=\"hljs-string\">'RCPT TO:'</span>+to+<span class=\"hljs-string\">'\\r\\n'</span>){\n                    op.push(<span class=\"hljs-string\">'DATA\\r\\n'</span>);\n                    op.push(msg+<span class=\"hljs-string\">'\\r\\n.\\r\\n'</span>);\n                }\n                socket.write(v);\n                <span class=\"hljs-keyword\">break</span>;\n            }\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'334'</span>:{\n                <span class=\"hljs-keyword\">var</span> v = op.shift();\n                socket.write(v);\n                <span class=\"hljs-keyword\">if</span>(op.length===<span class=\"hljs-number\">0</span>) op.push(<span class=\"hljs-string\">'MAIL FROM:'</span>+user+<span class=\"hljs-string\">'\\r\\n'</span>);\n                <span class=\"hljs-keyword\">break</span>;\n            }\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'235'</span>: socket.write(op.shift()); op.push(<span class=\"hljs-string\">'RCPT TO:'</span>+to+<span class=\"hljs-string\">'\\r\\n'</span>); <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'221'</span>: socket.end(); <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'354'</span>: socket.write(op.shift()); op.push(<span class=\"hljs-string\">'QUIT'</span>+<span class=\"hljs-string\">'\\r\\n'</span>); <span class=\"hljs-keyword\">break</span>;\n            <span class=\"hljs-comment\">// default : console.log(data);</span>\n        }\n    })\n}\n</code></pre>\n<p>调用</p>\n<pre><code class=\"lang-javascript\">sendMail(\n    'smtp.qq.com',\n    '<span class=\"hljs-number\">492899414</span>@qq.com',\n    'xxxxxxx',\n    '<span class=\"hljs-number\">492899414</span>@qq.com',\n    <span class=\"hljs-string\">\"From: Moyu\\r<span class=\"hljs-subst\">\\n</span>\"</span>+\n    <span class=\"hljs-string\">\"Subject: Smtp Client implementation\\r<span class=\"hljs-subst\">\\n</span>\"</span>+\n    <span class=\"hljs-string\">\"To: 492899414@qq.com\\r<span class=\"hljs-subst\">\\n</span>\"</span>+\n    <span class=\"hljs-string\">\"Content-Type: text/html\\r<span class=\"hljs-subst\">\\n</span>\\r<span class=\"hljs-subst\">\\n</span>\"</span>+ <span class=\"hljs-comment\">// 两个\\r\\n作为与正式数据的分割</span>\n    <span class=\"hljs-string\">\"&lt;h1&gt;Hello Moyu&lt;/h1&gt;\"</span>\n);\n</code></pre>\n<p>成功运行后，输出结果如下</p>\n<pre><code>{ '0': 'HELO 492899414@qq.com<span class=\"hljs-symbol\">\\r</span><span class=\"hljs-symbol\">\\n</span>' }\n220 smtp.qq.com Esmtp QQ Mail Server\n250 smtp.qq.com\n{ '0': 'AUTH LOGIN<span class=\"hljs-symbol\">\\r</span><span class=\"hljs-symbol\">\\n</span>' }\n334 VXNlcm5hbWU6\n{ '0': 'NDkyODk5NDE0QHFxLmNvbQ==<span class=\"hljs-symbol\">\\r</span><span class=\"hljs-symbol\">\\n</span>' }\n334 UGFzc3dvcmQ6\n{ '0': 'xxxxxxxxxxxxxxx<span class=\"hljs-symbol\">\\r</span><span class=\"hljs-symbol\">\\n</span>' }\n235 Authentication successful\n{ '0': 'MAIL FROM:492899414@qq.com<span class=\"hljs-symbol\">\\r</span><span class=\"hljs-symbol\">\\n</span>' }\n250 Ok\n{ '0': 'RCPT TO:492899414@qq.com<span class=\"hljs-symbol\">\\r</span><span class=\"hljs-symbol\">\\n</span>' }\n250 Ok\n{ '0': 'DATA<span class=\"hljs-symbol\">\\r</span><span class=\"hljs-symbol\">\\n</span>' }\n354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;\n{ '0': 'From: Moyu<span class=\"hljs-symbol\">\\r</span><span class=\"hljs-symbol\">\\n</span>Subject: Smtp Client implementation<span class=\"hljs-symbol\">\\r</span><span class=\"hljs-symbol\">\\n</span>To: 492899414@qq.com<span class=\"hljs-symbol\">\\r</span><span class=\"hljs-symbol\">\\n</span>Content-Type: text/html<span class=\"hljs-symbol\">\\r</span><span class=\"hljs-symbol\">\\n</span><span class=\"hljs-symbol\">\\r</span><span class=\"hljs-symbol\">\\n</span>&lt;h1&gt;Hello Moyu&lt;/h1&gt;<span class=\"hljs-symbol\">\\r</span><span class=\"hljs-symbol\">\\n</span>.<span class=\"hljs-symbol\">\\r</span><span class=\"hljs-symbol\">\\n</span>' }\n250 Ok: queued as \n{ '0': 'QUIT<span class=\"hljs-symbol\">\\r</span><span class=\"hljs-symbol\">\\n</span>' }\n221 Bye\n</code></pre><h1 id=\"-\">总结</h1>\n<p>学习了node的相关网络编程，理解SMTP协议，自己造轮子。</p>\n","head":{"title":"「node网络编程」SMTP客户端程序","date":"30 May 2016","categories":["后端"],"tags":["nodejs","smtp","net"]}},"「图像处理」图像的复原":{"content":"<h1 id=\"-\">介绍</h1>\n<p>图像在形成、记录、处理和传输过程中，由于成像系统、记录设备、传输介质和处理方法的问题，导致图像质量下降，这种现象叫图像退化。\n而图像复原就是对退化的图像进行处理，尽可能的复原图像的<strong>本来面目</strong>。\n<!--more-->\n如图，先对图片进行模糊处理\n<img src=\"/images/r1.png\" alt=\"r1.png\">\n然后对图片进行还原\n<img src=\"/images/r2.png\" alt=\"r2.png\"></p>\n<h1 id=\"-\">代码解释</h1>\n<pre><code class=\"lang-java\">    <span class=\"hljs-comment\">//图像恢复</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span>[] imRestore(<span class=\"hljs-keyword\">int</span>[] pixels, <span class=\"hljs-keyword\">int</span> iw, <span class=\"hljs-keyword\">int</span> ih)\n    {\n        <span class=\"hljs-keyword\">double</span>[] newPixels = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">double</span> [iw*ih];\n        <span class=\"hljs-keyword\">double</span>[] newKernel = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">double</span> [iw*ih];\n\n        <span class=\"hljs-comment\">//初始化</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; ih; j++)\n        {\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; iw; i++)\n            {\n                newPixels[i+j*iw] = pixels[i+j*iw]&amp;<span class=\"hljs-number\">0xff</span>;\n                <span class=\"hljs-keyword\">if</span>((i&lt;<span class=\"hljs-number\">5</span>) &amp;&amp; (j&lt;<span class=\"hljs-number\">5</span>))\n                    newKernel[i+j*iw] = <span class=\"hljs-number\">1.0</span>/<span class=\"hljs-number\">25</span>;\n                <span class=\"hljs-keyword\">else</span>\n                    newKernel[i+j*iw] = <span class=\"hljs-number\">0</span>;\n            }\n        }\n\n        <span class=\"hljs-comment\">//初始化</span>\n        Complex[] <span class=\"hljs-keyword\">complex</span>   = <span class=\"hljs-keyword\">new</span> Complex[iw*ih];\n        Complex[] comKernel = <span class=\"hljs-keyword\">new</span> Complex[iw*ih];\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;i &lt; iw*ih; i++)\n        {\n            <span class=\"hljs-keyword\">complex</span>[i]   = <span class=\"hljs-keyword\">new</span> Complex(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n            comKernel[i] = <span class=\"hljs-keyword\">new</span> Complex(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n        }\n\n        <span class=\"hljs-comment\">//对原图像进行FFT (快速傅氏变换)</span>\n        fft2 = <span class=\"hljs-keyword\">new</span> FFT2();\n        fft2.setData2(iw, ih, newPixels);\n        <span class=\"hljs-keyword\">complex</span> = fft2.getFFT2();\n\n        <span class=\"hljs-comment\">//对卷积核进行FFT</span>\n        fft2 = <span class=\"hljs-keyword\">new</span> FFT2();\n        fft2.setData2(iw, ih, newKernel);\n        comKernel = fft2.getFFT2();\n\n        <span class=\"hljs-comment\">//逆滤波复原</span>\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>;j &lt; ih; j++)\n        {\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; iw; i++)\n            {\n                <span class=\"hljs-keyword\">double</span> re = <span class=\"hljs-keyword\">complex</span>[i+j*iw].re;\n                <span class=\"hljs-keyword\">double</span> im = <span class=\"hljs-keyword\">complex</span>[i+j*iw].im;\n                <span class=\"hljs-keyword\">double</span> reKernel = comKernel[i+j*iw].re;\n                <span class=\"hljs-keyword\">double</span> imKernel = comKernel[i+j*iw].im;\n                <span class=\"hljs-keyword\">double</span> x = reKernel*reKernel+imKernel*imKernel;\n\n                <span class=\"hljs-keyword\">if</span>(x &gt; <span class=\"hljs-number\">1e-3</span>)\n                {\n                    <span class=\"hljs-keyword\">double</span> r = (re*reKernel+im*imKernel)/x;\n                    <span class=\"hljs-keyword\">double</span> m = (im*reKernel-re*imKernel)/x;\n                    <span class=\"hljs-keyword\">complex</span>[i+j*iw].re = r;\n                    <span class=\"hljs-keyword\">complex</span>[i+j*iw].im = m;\n                }\n            }\n        }\n\n        <span class=\"hljs-comment\">//进行FFT反变换</span>\n        fft2 = <span class=\"hljs-keyword\">new</span> FFT2();\n        fft2.setData2i(iw, ih, <span class=\"hljs-keyword\">complex</span>);\n        pixels = fft2.getPixels2i();\n        <span class=\"hljs-keyword\">return</span> pixels;\n    }\n</code></pre>\n","head":{"title":"「图像处理」图像的复原","date":"03 Jun 2016","categories":["其他"],"tags":["图像处理"],"cover":"/images/r2.png"}},"「图像处理」图像的直方图均衡化":{"content":"<h1 id=\"-\">介绍</h1>\n<p>直方图均衡化：我们把一张图片对应的rgb像素点分成3个(对应rgb)256(0-255)等级，并且将等级绘制为直方图，我们把直方图变得分布均匀，这就是直方图均衡化。\n<img src=\"http://img.my.csdn.net/uploads/201112/9/0_1323437843KrRS.gif\" alt=\"img\">\n这样的图片往往具有高对比度，我使用js语言实现了该算法。\n<!--more--></p>\n<h1 id=\"-\">代码解释</h1>\n<pre><code class=\"lang-javascript\">    average: function (imgData) {\n        <span class=\"hljs-comment\">// imgData : 图片数据</span>\n        <span class=\"hljs-keyword\">var</span> <span class=\"hljs-keyword\">data</span> = imgData.<span class=\"hljs-keyword\">data</span>, w = imgData.width, h = imgData.height;\n        <span class=\"hljs-keyword\">var</span> histogramR = [],\n            histogramG = [],\n            histogramB = [];\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-keyword\">data</span>.length; i+=<span class=\"hljs-number\">4</span>){\n            <span class=\"hljs-comment\">// 统计rgb等级数目</span>\n            histogramR[<span class=\"hljs-keyword\">data</span>[i]] = histogramR[<span class=\"hljs-keyword\">data</span>[i]]+<span class=\"hljs-number\">1</span> || <span class=\"hljs-number\">1</span>;\n            histogramG[<span class=\"hljs-keyword\">data</span>[i+<span class=\"hljs-number\">1</span>]] = histogramG[<span class=\"hljs-keyword\">data</span>[i+<span class=\"hljs-number\">1</span>]]+<span class=\"hljs-number\">1</span> || <span class=\"hljs-number\">1</span>;\n            histogramB[<span class=\"hljs-keyword\">data</span>[i+<span class=\"hljs-number\">2</span>]] = histogramB[<span class=\"hljs-keyword\">data</span>[i+<span class=\"hljs-number\">2</span>]]+<span class=\"hljs-number\">1</span> || <span class=\"hljs-number\">1</span>;\n        }\n        <span class=\"hljs-comment\">//直方图均衡化</span>\n        function getRate(grayHis,total,index) {\n            <span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-number\">0</span>;\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;index;i++){\n                <span class=\"hljs-keyword\">var</span> v = grayHis[i]||<span class=\"hljs-number\">0</span>;\n                s+=(v/total);\n            }\n            <span class=\"hljs-keyword\">return</span> Math.floor(s*<span class=\"hljs-number\">255</span>);\n        }\n        <span class=\"hljs-keyword\">var</span> total = w*h,\n            newHisR = [],\n            newHisG = [],\n            newHisB = [];\n        <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">256</span>; i++){<span class=\"hljs-comment\">//直方图均衡化</span>\n            newHisR[i] = getRate(histogramR,total,i);\n            newHisG[i] = getRate(histogramG,total,i);\n            newHisB[i] = getRate(histogramB,total,i);\n        }\n        console.log([histogramR,histogramG,histogramB],[newHisR,newHisG,newHisB]);\n        <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i&lt;h; i++){\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> j=<span class=\"hljs-number\">0</span>; j&lt;w; j++){\n                <span class=\"hljs-keyword\">var</span> v = (i*w+j)&lt;&lt;<span class=\"hljs-number\">2</span>;\n                <span class=\"hljs-keyword\">data</span>[v] = newHisR[<span class=\"hljs-keyword\">data</span>[v]];\n                <span class=\"hljs-keyword\">data</span>[v+<span class=\"hljs-number\">1</span>]=newHisG[<span class=\"hljs-keyword\">data</span>[v+<span class=\"hljs-number\">1</span>]];\n                <span class=\"hljs-keyword\">data</span>[v+<span class=\"hljs-number\">1</span>]=newHisB[<span class=\"hljs-keyword\">data</span>[v+<span class=\"hljs-number\">2</span>]];\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> imgData;\n    }\n</code></pre>\n<p>查看控制台，左边为原图局部数据，右边为执行算法后的数据，明显后者分布更加平稳。\n<img src=\"/images/aver1.png\" alt=\"img\"></p>\n<p>直观的感觉如下\n<img src=\"/images/aver2.png\" alt=\"img\"></p>\n<h1 id=\"-\">参考资料</h1>\n<ul>\n<li><a href=\"http://blog.csdn.net/jia20003/article/details/8119563\">http://blog.csdn.net/jia20003/article/details/8119563</a></li>\n<li><a href=\"http://hello-wangfeng.iteye.com/blog/1717150\">http://hello-wangfeng.iteye.com/blog/1717150</a></li>\n</ul>\n","head":{"title":"「图像处理」图像的直方图均衡化","date":"03 Jun 2016","categories":["其他"],"tags":["图像处理"],"cover":"http://img.my.csdn.net/uploads/201112/9/0_1323437843KrRS.gif"}},"「思科模拟器」建立DNS-HTTP服务":{"content":"<h1 id=\"-\">引言</h1>\n<p>之前，我介绍了使用思科构建VLAN服务，下面我将介绍利用思科建立DNS/HTTP服务。\n<!--more--></p>\n<h1 id=\"-\">操作流程</h1>\n<h2 id=\"dns-\">DNS服务搭建</h2>\n<h3 id=\"-\">网络布局</h3>\n<p><img src=\"/images/dns1.png\" alt=\"\">\n如图，构建网络</p>\n<h3 id=\"ip-\">IP设置</h3>\n<p>其中各结点ip如下表所示</p>\n<table>\n<thead>\n<tr>\n<th>#</th>\n<th>IP</th>\n<th>默认网关</th>\n<th>DNS服务器</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Client</td>\n<td>10.0.0.2</td>\n<td>10.0.0.1</td>\n<td>10.0.0.3</td>\n</tr>\n<tr>\n<td>Local DNS Server</td>\n<td>10.0.0.3</td>\n<td>10.0.0.1</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Company Router Left</td>\n<td>10.0.0.1</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Company Router Right</td>\n<td>10.1.0.1</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Internet Router Left</td>\n<td>10.1.0.2</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Internet Router Right</td>\n<td>10.3.0.1</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Internet Router Down</td>\n<td>10.2.0.1</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Root DNS Server</td>\n<td>10.2.0.2</td>\n<td>10.2.0.1</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Example Router Left</td>\n<td>10.3.0.2</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Example Router Right</td>\n<td>10.4.0.1</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Other Server</td>\n<td>10.4.0.2</td>\n<td>10.4.0.1</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Yucong DNS Server</td>\n<td>10.4.0.3</td>\n<td>10.4.0.1</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"dns-\">DNS解析表填写</h3>\n<p>Local DNS Server\n<img src=\"/images/dns2.png\" alt=\"\"></p>\n<p>Root DNS Server\n<img src=\"/images/dns3.png\" alt=\"\"></p>\n<p>Yucong DNS Server\n<img src=\"/images/dns4.png\" alt=\"\"></p>\n<h3 id=\"-\">域名解析测试</h3>\n<p>对Client进行Ping指令测试，结果如下图\n<img src=\"/images/dns5.png\" alt=\"\">\n说明成功搭建DNS服务！</p>\n<h3 id=\"dns-cache-\">DNS Cache查看</h3>\n<p><img src=\"/images/dns6.png\" alt=\"\">\n<img src=\"/images/dns7.png\" alt=\"\">\n如上图，为Local DNS Server的DNS缓存，下次访问相同域名时，直接取出即可。</p>\n<h2 id=\"http-\">HTTP服务搭建</h2>\n<p>在上面的基础上，完成HTTP服务器搭建</p>\n<h3 id=\"-\">开启服务</h3>\n<p>若我想以Other Server作为HTTP服务器，进行如下设置即可\n<img src=\"/images/http.png\" alt=\"\">\n<img src=\"/images/http1.png\" alt=\"\"></p>\n<h3 id=\"-\">网页测试</h3>\n<p>对Client打开Web Browser，输入<code>other.yucong.com</code>\n<img src=\"/images/http2.png\" alt=\"\">\n如图，正常访问！</p>\n","head":{"title":"「思科模拟器」建立DNS+HTTP服务","date":"06 Jun 2016","categories":["计算机网络"],"tags":["思科","dns","http"],"cover":"/images/dns1.png"}},"「思科模拟器」构建虚拟局域网（VLAN）":{"content":"<h1 id=\"-\">前言</h1>\n<p>思科模拟器是一款强大的模拟网络环境的软件，但是容量却不大，安装器只有70M左右，这篇文章将为你介绍利用思科模拟器构建VLAN网络。\n<!--more--></p>\n<h1 id=\"-\">正文</h1>\n<p><img src=\"/images/思科1.png\" alt=\"思科1.png\">\n如图，操作鼠标搭建如图简单的网络，用到了交换机（端口1-4）-直通线-普通终端。\n点击终端图标，进入终端配置界面，点击<code>Desktop</code>标签，点击<code>IP Configuration</code>，如下图，静态设置IP地址。\n<img src=\"/images/思科2.png\" alt=\"思科2.png\">\n配置完成后，你还可以进入终端的命令行界面<code>(Command Prompt)</code>，进行<code>ping</code>命令的测试，如下图\n<img src=\"/images/思科3.png\" alt=\"思科3.png\">\n<img src=\"/images/思科4.png\" alt=\"思科4.png\">\n然后，就是对于交换机进行配置了，建立不同的虚拟局域网。点击交换机图片，进入命令行界面，输入如下指令：</p>\n<pre><code><span class=\"hljs-function\"><span class=\"hljs-title\">Switch</span><span class=\"hljs-params\">(config)</span></span><span class=\"hljs-selector-id\">#vlan</span> <span class=\"hljs-number\">1</span>  #建立Vlan1，默认已经存在\n<span class=\"hljs-function\"><span class=\"hljs-title\">Switch</span><span class=\"hljs-params\">(config-vlan)</span></span><span class=\"hljs-selector-id\">#exit</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">Switch</span><span class=\"hljs-params\">(config)</span></span><span class=\"hljs-selector-id\">#vlan</span> <span class=\"hljs-number\">2</span>  #建立Vlan2\n<span class=\"hljs-function\"><span class=\"hljs-title\">Switch</span><span class=\"hljs-params\">(config-vlan)</span></span><span class=\"hljs-selector-id\">#exit</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">Switch</span><span class=\"hljs-params\">(config)</span></span><span class=\"hljs-selector-id\">#interface</span> f0/<span class=\"hljs-number\">1</span>  #对<span class=\"hljs-number\">1</span>端口进行配置 \n<span class=\"hljs-function\"><span class=\"hljs-title\">Switch</span><span class=\"hljs-params\">(config-if)</span></span><span class=\"hljs-selector-id\">#switchport</span> access vlan <span class=\"hljs-number\">1</span>  #将<span class=\"hljs-number\">1</span>端口加入vlan1，默认已经存在\n<span class=\"hljs-function\"><span class=\"hljs-title\">Switch</span><span class=\"hljs-params\">(config-if)</span></span><span class=\"hljs-selector-id\">#interface</span> f0/<span class=\"hljs-number\">2</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">Switch</span><span class=\"hljs-params\">(config-if)</span></span><span class=\"hljs-selector-id\">#switchport</span> access vlan <span class=\"hljs-number\">1</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">Switch</span><span class=\"hljs-params\">(config-if)</span></span><span class=\"hljs-selector-id\">#interface</span> f0/<span class=\"hljs-number\">3</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">Switch</span><span class=\"hljs-params\">(config-if)</span></span><span class=\"hljs-selector-id\">#switchport</span> access vlan <span class=\"hljs-number\">2</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">Switch</span><span class=\"hljs-params\">(config-if)</span></span><span class=\"hljs-selector-id\">#interface</span> f0/<span class=\"hljs-number\">4</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">Switch</span><span class=\"hljs-params\">(config-if)</span></span><span class=\"hljs-selector-id\">#switchport</span> access vlan <span class=\"hljs-number\">2</span>\n</code></pre><p>操作界面如下图所示：\n<img src=\"/images/思科5.png\" alt=\"思科5.png\">\n或者你可以利用图形界面进行操作\n<img src=\"/images/思科7.png\" alt=\"思科7.png\">\n<img src=\"/images/思科6.png\" alt=\"思科6.png\"></p>\n<p>完成如上步骤后，你就完成了<code>vlan</code>的构建，下面进行测试。\n进入<code>ip：192.168.100.11</code>的终端命令行，进行<code>ping</code>指令测试。\n如下图，同属于vlan1的<code>192.168.100.12</code>能够ping通，但是valn2中的<code>192.168.200.12</code>不能够，所以测试正确。\n<img src=\"/images/思科8.png\" alt=\"思科8.png\"></p>\n<h1 id=\"-\">总结</h1>\n<p>初步见识到了思科模拟器的威力，之后还会带来更多的文章教学。</p>\n","head":{"title":"「思科模拟器」构建虚拟局域网（VLAN）","date":"02 Jun 2016","categories":["计算机网络"],"tags":["思科","vlan"]}},"「滴滴滴，老司机开车了」nodejs爬取煎蛋网妹子图":{"content":"<h1 id=\"-\">“流氓不可怕,就怕流氓有文化”</h1>\n<blockquote>\n<p>前天刚考完编译，今天考完网络，就开始捣鼓代码了，花了一天时间摸索了一下<code>nodejs</code>的爬虫，也就是<code>tcp</code>，<code>http</code>连接。</p>\n</blockquote>\n<p>也是就做了一个爬取<a href=\"http://jandan.net/\">煎蛋网妹子图</a>的爬虫，并保持至本地。\n<!--more--></p>\n<h1 id=\"-\">思路介绍</h1>\n<ol>\n<li>通过<code>http请求报文</code>模拟一次访问煎蛋网的操作</li>\n<li>获取到了网页的HTML代码后，进行正则表达式匹配，得到图片地址</li>\n<li>通过图片地址，再次发送<code>http请求报文</code>，将图片数据保存至本地\n思路简单了解后，便开始工作了。</li>\n</ol>\n<h1 id=\"-\">然而并不是一帆风顺</h1>\n<h2 id=\"-html-\">得不到<code>HTML</code>？</h2>\n<p>参考资料<a href=\"http://chenxi.name/60.html\">http://chenxi.name/60.html</a>，利用<code>request</code>包进行傻瓜式调用，然而并不能生效，将会跳转至一个<a href=\"http://jandan.net/block.php\">屏蔽提示网页</a>\n<img src=\"http://moyuyc.github.io/images/jandan-block.png\" alt=\"png\">\n煎蛋网为了防止恶意爬取数据，进行了一定程度的防爬措施。\n但这可难不倒我，<strong>为什么在浏览器上就能正常浏览图片页面呢？</strong>\n于是我打开浏览器控制台，复制页面请求报文的cmd格式，粘贴至命令行中运行，能够正确得到<code>HTML</code>\n<img src=\"http://moyuyc.github.io/images/jandan2.png\" alt=\"png\">\n<img src=\"http://moyuyc.github.io/images/jandan3.png\" alt=\"png\">\n所以，我觉得问题就是出现在请求报文头部数据，于是复制下浏览器中报头，利用<code>nodejs</code>的<code>http</code>包，建立http连接。</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-selector-tag\">require</span>(<span class=\"hljs-string\">'http'</span>)<span class=\"hljs-selector-class\">.get</span>({\n        <span class=\"hljs-attribute\">hostname</span>:<span class=\"hljs-string\">'jandan.net'</span>,\n        <span class=\"hljs-attribute\">path</span>:<span class=\"hljs-string\">'/'</span>,\n        <span class=\"hljs-attribute\">header</span>:{\n            ...\n        }\n    },function(res){\n\n    })\n</code></pre>\n<p>但是奇怪的是！还是响应302，跳转至屏蔽提示页面。</p>\n<p>最后没办法的我只好利用底层一点的api——<code>net</code>包，建立tcp连接，发送符合<code>http请求报文</code>格式的数据。</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> net = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'net'</span>);\n<span class=\"hljs-keyword\">var</span> header = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>).readFileSync(<span class=\"hljs-string\">'./header.txt'</span>).toString();\n\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">path,callback</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> socket = net.createConnection(<span class=\"hljs-number\">80</span>,<span class=\"hljs-string\">'jandan.net'</span>);\n\n    socket.write(\n        <span class=\"hljs-string\">'GET '</span>+path+<span class=\"hljs-string\">' HTTP/1.1\\r\\n'</span>+\n        header\n    );\n\n    socket.setEncoding(<span class=\"hljs-string\">'utf-8'</span>);\n    socket.setTimeout(<span class=\"hljs-number\">4000</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        callback(html);\n        <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'Time OUT'</span>));\n        socket.end();\n    });\n\n    <span class=\"hljs-keyword\">var</span> html = <span class=\"hljs-string\">''</span>;\n    socket.on(<span class=\"hljs-string\">'data'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">chunk</span>) </span>{\n        html+=chunk;\n    });\n\n    socket.on(<span class=\"hljs-string\">'end'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'disconnected from server'</span>);\n    });\n}\n</code></pre>\n<p><code>header.txt</code></p>\n<pre><code>Host: jandan.net\nConnection: keep-alive\nCache-Control: <span class=\"hljs-attr\">max-age=0</span>\nAccept: text/html,application/xhtml+xml,application/xml;<span class=\"hljs-attr\">q=0.9,image/webp,*/*;q=0.8</span>\nUpgrade-Insecure-Requests: <span class=\"hljs-number\">1</span>\nUser-Agent: Mozilla/<span class=\"hljs-number\">5.0</span> (Windows NT <span class=\"hljs-number\">6.2</span>; WOW64) AppleWebKit/<span class=\"hljs-number\">537.36</span> (KHTML, like Gecko) Chrome/<span class=\"hljs-number\">45.0</span>.<span class=\"hljs-number\">2454.101</span> Safari/<span class=\"hljs-number\">537.36</span>\nReferer: http://jandan.net/v\nAccept-Language: zh-CN,zh;<span class=\"hljs-attr\">q=0.8</span>\nCookie: <span class=\"hljs-attr\">gif-click-load=on;</span> <span class=\"hljs-attr\">bad-click-load=on;</span> <span class=\"hljs-attr\">PHPSESSID=u1gnmqnpb75injakbgvkb6r413;</span> <span class=\"hljs-number\">4036050675</span>=c119Yp%<span class=\"hljs-number\">2</span>BLrMWuv%<span class=\"hljs-number\">2</span>BWMyYtq3x6vTdbFzaTbUyoiLt%<span class=\"hljs-number\">2</span>Fv; <span class=\"hljs-attr\">jdna=596e6fb28c1bb47f949e65e1ae03f7f5#1467288596467;</span> <span class=\"hljs-attr\">Hm_lvt_fd93b7fb546adcfbcf80c4fc2b54da2c=1467287791;</span> <span class=\"hljs-attr\">Hm_lpvt_fd93b7fb546adcfbcf80c4fc2b54da2c=1467288598;</span> <span class=\"hljs-attr\">_ga=GA1.2.330681373.1467287790</span>\n</code></pre><p><strong>注意，header.txt最后需要两个<code>\\r\\n</code>表示请求报头结束</strong>\n最后果然是成功了，但具体两种方法的不同我也说不上来，希望有热心读者能告诉我。</p>\n<h2 id=\"-\">数据传输同步异步？</h2>\n<p>利用下面的递归方法加上<code>Promise.all</code>同步方法，防止过度的tcp连接（改用下面方法后，tcp读写错误明显减少，但还是会出现，不知道有没有大神帮我解决该问题呢？）</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">run</span>(<span class=\"hljs-params\">i,low</span>) </span>{\n    <span class=\"hljs-keyword\">if</span>(i&lt;low) <span class=\"hljs-keyword\">return</span>;\n    spider(<span class=\"hljs-string\">'/ooxx/page-'</span>+i,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">html</span>) </span>{\n        <span class=\"hljs-keyword\">var</span> images = [];\n        html.replace(<span class=\"hljs-regexp\">/&lt;img.+?src=\"(http.+?sina.+?)\"/g</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">m,c</span>) </span>{\n            images.unshift(c);\n        });\n        <span class=\"hljs-keyword\">var</span> page = i;\n        <span class=\"hljs-keyword\">var</span> proms = images.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">x,i,a</span>)=&gt;</span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>{\n                <span class=\"hljs-keyword\">var</span> req = http.get(x,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">res</span>) </span>{\n                    res.on(<span class=\"hljs-string\">'error'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err</span>) </span>{\n                        <span class=\"hljs-built_in\">console</span>.error(err);\n                        resolve(<span class=\"hljs-string\">'fail'</span>);\n                    });\n                    <span class=\"hljs-keyword\">var</span> filename = x.substr(x.lastIndexOf(<span class=\"hljs-string\">'/'</span>)+<span class=\"hljs-number\">1</span>);\n                    download(dir+<span class=\"hljs-string\">'/'</span>+filename,res);\n                    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'PAGE:'</span>+page+<span class=\"hljs-string\">'...'</span>+filename+<span class=\"hljs-string\">'...'</span>+(i+<span class=\"hljs-number\">1</span>)+<span class=\"hljs-string\">'/'</span>+a.length);\n                    resolve(<span class=\"hljs-string\">'done'</span>);\n                }).end();\n            });\n        });\n        <span class=\"hljs-built_in\">Promise</span>.all(proms)\n            .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">values</span>)=&gt;</span>{\n                <span class=\"hljs-comment\">//上一页的图片加入下载队列后，再开始递归下一页。</span>\n                run(i<span class=\"hljs-number\">-1</span>,low);\n            });\n    });\n}\n</code></pre>\n<p>最后文件夹就像下面一样！\n<img src=\"http://moyuyc.github.io/images/jandan4.png\" alt=\"png\"></p>\n<h1 id=\"-\">甩下代码地址，飙个车</h1>\n<p><a href=\"https://github.com/moyuyc/jandan-spider\">jandan-spider</a></p>\n<p>关注我的博客<a href=\"http://moyuyc.github.io/\">moyuyc.github.io</a> ,有技术的老司机带你飙车！</p>\n<p><img src=\"http://moyuyc.github.io/images/girl1.gif\" alt=\"png\">\n<img src=\"http://moyuyc.github.io/images/girl6.gif\" alt=\"png\">\n<img src=\"http://moyuyc.github.io/images/girl2.jpg\" alt=\"png\">\n<img src=\"http://moyuyc.github.io/images/girl3.jpg\" alt=\"png\">\n<img src=\"http://moyuyc.github.io/images/girl4.jpg\" alt=\"png\">\n<img src=\"http://moyuyc.github.io/images/girl5.jpg\" alt=\"png\"></p>\n","head":{"title":"「滴滴滴，老司机开车了」nodejs爬取煎蛋网妹子图","date":"01 Jul 2016","categories":["后端"],"tags":["爬虫","nodejs","net"]}},"「转」为什么V8 JavaScript引擎这么快":{"content":"<h1 id=\"-\">说明</h1>\n<p>为什么转载？</p>\n<blockquote>\n<p>这篇文章内容比较丰富，涉及的知识点也比较广泛，有编译原理，数据结构，汇编...\n需要对计算机整体有个比较好的认识与把控，才能理解深刻。</p>\n</blockquote>\n<p>遂转该文章，以便后续的学习与理解。\n<!--more--></p>\n<h1 id=\"-\">前言</h1>\n<p>　　Google研发的V8 JavaScript引擎性能优异。我们请熟悉内部程序实现的作者依源代码来看看V8是如何加速的。\n　　作者：Community Engine公司研发部研发工程师Hajime Morita\n　　Google的Chrome中的V8 JavaScript引擎，由于性能良好吸引了相当的注目。它是Google特别为了Chrome可以高速运行网页应用(WebApp)而开发的。Chrome利用Apple领导的WebKit研发计划作为渲染引擎（Rendering engine）。 WebKit也被用在Safari浏览器中。WebKit的标准配备有称为JavaScriptCore的JavaScript引擎，但Chrome则以V8取代之。\n　　V8开发小组是一群程序语言专家。核心工程师Lars Bak之前研发了HotSpot，这是用在Sun Microsystems公司开发的Java虚拟机器（VM）之加速技术。他也在美国的Animorphic Systems公司（于1997年被Sun Microsystems所并购）研发了称为Strongtalk的实验Smalltalk系统。V8充分发挥了研发HotSpot和Strongtalk时所获得的知识。\n<img src=\"/images/v81.jpg\" alt=\"img\"></p>\n<center>图1 开发自己的JavaScript引擎</center>\n\n<blockquote>\n<p>Apple的Safari和Google的Chrome使用相同的渲染引擎。配有JavaScriptCore的WebKit渲染引擎在JavaScript引擎中是标准配备，但在Chrome却被V8取代了.</p>\n</blockquote>\n<h1 id=\"-\">高速引擎的需求</h1>\n<p>　　Google研发小组在2006年开始研发V8，部分的原因是Google对既有JavaScript引擎的执行速度不满意。我认为当时JavaScript引擎很慢是有两个原因的：开发的历史背景，以及JavaScript语言的复杂性。</p>\n<p>　　JavaScript存在至少10年了。在1995年，它出现在网景(Netscape Communications)公司所研发的网页浏览器Netscape Navigator 2.0中。然而有段时间人们对于性能的要求不高，因为它只用在网页上少数的动画、交互操作或其它类似的动作上。(最明确的是为了减少网络传输，以提高效率和改善交互性！)浏览器的显示速度视网络传输速度以及渲染引擎（rendering engine）解析HTML、风格样式表（cascading style sheets, CSS）及其他代码的速度而定。浏览器的开发工作优先提升渲染引擎的速度，而JavaScript的处理速度不是太重要。同时出现的Java有相当大的进步，它被做得愈来愈快，以便和C++竞争。</p>\n<p>　　然而，在过去几年，JavaScript突然受到广泛使用。原因是之前被当成桌面应用的软件（其中包括Office套件等），现已成为可以在浏览器中执行的软件。</p>\n<p>　　Google本身就推出了好几款JavaScript网络应用，其中包括它的Gmail电子邮件服务、Google Maps地图数据服务、以及Google Docs office套件。</p>\n<p>　　这些应用表现出的速度不仅受到服务器、网络、渲染引擎以及其他诸多因素的影响，同时也受到JavaScript本身执行速度的影响。然而既有的JavaScript引擎无法满足新的需求，而性能不佳一直是网络应用开发者最关心的。</p>\n<h1 id=\"-\">语言本身的问题</h1>\n<p>　　JavaScript语言的规范现在性能压力巨大。例如，这在当它判定变量类型时就相当显而易见。如C++和Java等主流语言采用静态类型(static typing)。当代码编译时，就可宣告变量类型。由于不需要在执行期间检查数据类型，因此静态类型占有性能上的优势。</p>\n<p>　　在例如C++和Java等一般处理系统中，fields<em>和methods</em>等的内容是以数组储存，以1:1位移（offset）对应fields和methods等的名称（图2）。个别变量和methods等储存的位置，是针对各个类定义的。在C++和Java等语言中，已事先知道所存取的变量（类）类型，所以语言解释系统(Interpreting system)只要利用数组和位移来存取field和method等。位移使它只要几个机器语言指令，就可以存取field、找出field或执行其他任务。\n<img src=\"/images/v82.jpg\" alt=\"img\"></p>\n<center>图2 JavaScript和C++、Java的不同</center>\n　　C++、Java及其他处理系统将fields和methods等，以它们的名称以1:1对应数组内的位移值储存在数组中。会事先知道要存取的变量类型（类），因此可以只用数组和位移就可以存取fields和methods等。然而在JavaScript，个别的对象都有自己属性和方法等的表格。每一次程序存取属性或是呼叫方法时，都必须检查对象的类型并执行适当的处理。\n\n- Field：属对象的变量。C++中称为成员变量。\n- Method：属对象的处理类型。C++中称为成员函式。\n- Property属性：JavaScript属性是对象自己拥有的变量。在JavaScript中，属性中不只可以是标准的值，也可以是methods。\n- Hash table哈希表：一种数据结构会传回与特定关键相关之对应值。它有一个内部数组，使用键值(key)所产生之Hash值作为数组中特定位置清单值的位移。如果刚好在相同的位置上产生不同关键之Hash值时，清单位置会储存多个值，这意味着在传回任何值之前必须先检查Hash值是否符合。\n\n　　而另外一方面，JavaScript则是利用动态类型(dynamic typing)。 JavaScript变量没有类型，而所指定对象的类型在第一次执行时（换言之，动态地）就已判定了。每次在JavaScript中存取属性(property)，或是寻求方法等，必须检查对象的类型，并照着进行处理。\n\n　　许多JavaScript引擎都使用哈希表（hash table）来存取属性和寻找方法等。换言之，每次存取属性或是寻找方法时，就会使用字符串作为寻找对象哈希表的键(key)（图3）。\n<img src=\"/images/v83.jpg\" alt=\"img\">\n<center> 图3 属性存取时的内部JavaScript处理</center>\n\n<blockquote>\n<p>使用对象x哈希表的字符串「foo」作为搜寻「foo」内容的关键字。</p>\n</blockquote>\n<p>　　搜寻哈希表是一个连续动作，包含从散列(hashing)值中判定数组内位置，然后查看该位置的键值（key）是否符相等。然后可以使用位移直接读取数据的数组比较起来，利用此方法存取较费时。</p>\n<p>　　使用动态类型的其他语言，还有Smalltalk和Ruby等。这些语言基本上也是搜寻哈希表，但它们利用类来缩短搜寻时间。然而，JavaScript没有类。除了「Numbers」指示数字值、「Strings」为字符串以及其他少数几种类型外，其他对象都是「Object」型。程序员无法宣告类型（类），因此无法使用明确的类型来加速处理。</p>\n<p>　　JavaScript的弹性允许在任何时间，在对象上新增或是删除属性和方法等（请参阅附录）。JavaScript语言非常动态，而业界的一般看法是动态语言比C++或Java等静态语言更难加速。尽管有困难，但V8利用好几项技术来达到加速的目的:</p>\n<h2 id=\"jit-jit-compile-\">JIT编译 (JIT Compile)</h2>\n<ul>\n<li><p>不用字节码(bytecode)生成机器语言\n  从性能的角度来看，V8具有4个主要特性。首先，它在执行时以称为及时（just-in-time, JIT）的编译方法，来产生机器语言。这是个普遍用来改善解释速度的方法，在Java和.NET等语言中也可以发现此方法。V8比Firefox中的SpiderMonkey JavaScript引擎，或Safari的JavaScriptCore等竞争引擎还要早的实践了这一技术。</p>\n<p>  V8 JIT编译器在产生机器语言时，不会产生中间码（图4）。例如，在Java编译器先将原始码转换成一个以虚拟中间语言（称为字节码，bytecode）表示的一类文件 (class file)。Java编译器和字节码编译器产生字节码，而非机器语言。Java VM按顺序地在执行中解释字节码。此执行模式称为字节码解释器(bytecode interpreter)。 Firefox的SpiderMonkey具有一个内部的字节码编译器和字节解释器，将JavaScript原始码转换成它自家特色的字节代码，以便执行。\n  <img src=\"/images/v84.png\" alt=\"\"></p>\n  <center>图4 V8的JIT编译器直接输出机器语言</center>\n\n<blockquote>\n<p>序语言系统先使用语法分析器将原始码转换成抽象语法树（abstract syntax tree, AST）。之前有几种方式来处理。字节码编译器将抽象语法树编译为中间代码，然后在编译器中执行。如Java JIT等混合模式将这中间代码的一部分编译成机器语言，以改善处理性能。Chrome不使用中间代码，JIT直接从抽象语法树来编译机器语言。也有抽象语法树解释器，直接解析抽象语法树。</p>\n</blockquote>\n<p>  事实上，Java VM目前使用一个以HotSpot为基础的JIT编译器。它扮演字节码解释器的角色，来解析代码，将常执行的代码区块转换成机器语言然后执行，这就是混合模式(hybrid model)。</p>\n<p>  字节码解释器、混合模式等等，具有制作简单且有绝佳可移植性的优点。只要是引擎可以编译的原始码，那么就可以在任何CPU架构上执行字节码，这正是为什么该技术被称为「虚拟机(VM)」的原因。即使在产生机器代码的混合模式中，可以借由编写字节码的解释器开始进行开发，然后实现机器语言生成器。通过使用简单的位元码，在机器代码产生时，要将输出最佳化就变得容易许多。</p>\n<p>  V8不是将原始程序转换成中间语言，而是将抽象语法直接产生机器语言并加以执行。没有虚拟机，且因为不需要中间表示式，程序处理会更早开始了。然而，另一方面，它也丧失了虚拟机的好处，例如透过字节码解释器和混合模式等，所带来的高可移植性(portability)和优化的简易性等。</p>\n</li>\n</ul>\n<h2 id=\"-\">垃圾回收管理</h2>\n<h3 id=\"java-\">Java标准特性的精妙实现</h3>\n<p>　　第二个关键的特性是，V8将垃圾回收管理（garbage collection, GC<em>）实作为「精确的GC</em>」。相反的，大部分的JavaScript引擎、Ruby及其他语言编译器都是使用保守的GC*(conservative GC)，因为保守的GC实作简单许多。虽然精确的GC更为复杂，但也有性能上的优点。Oracle(Sun)的Java VM就是使用精确GC。</p>\n<ul>\n<li>Garbage collection（GC）垃圾回收管理：自动侦测被程序保留但已不再使用的存储器空间并释放。</li>\n<li>保守(conservative) GC：没有分别严格管理指标器和数字值之存储器回收管理。此方法是如果它可以成为指标，那就以指标来看待它，即使它可能个数值。此方法防止对象被意外回收，但它也无法释出可能的存储器。</li>\n</ul>\n<p>　　虽然精确GC本身就是高效率的，但以精确GC为基础的高级算法，如分代(Generational) GC、复制(copy) GC以及标记和精简处理（mark-and-compact processing）等在性能上有明显的改善。分代(Generational) GC藉由分开管理「年青分代(Young Generational)」对象（经常收集）和「旧分代(Old Generational)」对象（相对长寿的对象）而提升了GC效率。\nV8使用了分代(Generational)GC，在新分代(Generational)处理上使用轻度(light-load)复制GC，而在旧GC上使用标记和精简GC，因为它须在内存空间内移动对象。这很难在保守GC中执行。在对象的复制中，压缩（compaction）（在硬盘方面称为defrag）和类似动作时，对象的地址会改变，且基于这个原因，最普遍的方法是用「句柄」（handles）间接地引用地址。然而，V8不使用句柄(handles)，而是重写该对象引用的所有数据。不使用句柄(handles)会使实现更困难，但却能改善性能因为少了间接引用。Java VM HotSpot也使用相同的技术。</p>\n<h2 id=\"-inline-cache-\">内嵌缓存(inline cache)</h2>\n<h3 id=\"javascript-\">JavaScript中不可用？</h3>\n<p>　　V8目前可以针对x86和ARM架构产生适合的机器语言。虽然没采用C++或Java中传统的优化方式，V8还是有动态语言与生俱来的速度。</p>\n<p>　　其中一项良好范例是内嵌缓存（inline cache），这项技巧可以避免方法呼叫和属性存取时的哈希表搜寻。它可以立即缓存之前的搜寻结果，因此称为「内嵌」。人们知道此技术已有一段时间了，已经被应用在Smalltalk、Java和Ruby等语言中。</p>\n<p>　　内嵌缓存假设对象都有类型之分，但在JavaScript语言中却没有。直到V8出现后，而这就是为什么以前的JavaScript引擎都没有内嵌缓存的原因。</p>\n<p>　　为了突破此限制，V8在执行时就分析程序操作，并利用「隐藏类」（hidden classes）为对象指定暂时的类。有了隐藏类，即使是JavaScript也可以使用内嵌缓存。但是这些类是提升执行速度之技巧，不是语言规范的延伸。所以它们无法在JavaScript代码中引用。</p>\n<h2 id=\"-\">隐藏类</h2>\n<h3 id=\"-\">储存类型转换信息</h3>\n<p>　　隐藏类为没有类之分的JavaScript语言规范带来有趣的挑战，同时也是V8用来提升速度最独特的技巧。它们值得更深入的探究。</p>\n<p>　　在V8中建立类有两个主要的理由，即（1）将属性名称相同的对象归类，及（2）识别属性名称不同的对象。前一类中的对象有完全相同的对象描述，而这可以加速属性存取。</p>\n<p>　　在V8，符合归类条件的类会配置在各种JavaScript对象上。对象引用所配置的类（图5）。然而这些类只存在于V8作为方便之用，所以它们是「隐藏」的。\n<img src=\"/images/v85.jpg\" alt=\"\"></p>\n<center>图5 V8对象有隐藏类的引用</center>\n&gt; 如果对象的描述是相同的，那么隐藏类也会相同。在此范例中，对象p和q都属于相同的隐藏类\n\n　　我上面提到随时可以在JavaScript中新增或删除属性。然而当此事发生时会毁坏归类条件（归纳名称相同的属性）。V8借由建立属性变化所需的新类来解决。属性改变的对象透过一个称为「类型转换(class transition)」的程序纳入新级别中。\n\n　　第二个目标－识别属性名称不同的对象－则是借由建立新类来达成。然而，如果每一次属性改变就建立一个新类的话，那就无法持续达到第一个目标了（归纳名称相同的属性）。\n<img src=\"/images/v86.jpg\" alt=\"\">\n<center>图6 配置新类：类型转换</center>\n\n<blockquote>\n<p>属性改变的对象会被归为新类。当对象p增加了新属性z时，对象p就会被归为新类。</p>\n</blockquote>\n<p>　　V8将变换信息储存在类内，来解决此问题。考量图7，它说明了图6中所示的情形，当隐藏类Point有x和y属性时，新属性x就会新增至Point级的对象p中。当新属性z加到对象p时，V8会将「新增属性p，建立Point2类」的信息储存在Point级的内部表格中（图7，步骤1）。\n<img src=\"/images/v87.jpg\" alt=\"\">\n图7 在类中储存类变换信息当在对象p中加入新属性z时，V8会在Point类内的表格上记录「加入属性z，建立类Point2」（步骤1）。当同一Point类的对象q加入属性z时，V8会先搜寻Point类表。如果它发现了Point2类已加入属性z时，就会将对象q设定在Point2类（步骤2）。</p>\n<p>　　当新属性z新增至也是Point级的对象q时，V8会先搜寻Point级的表格，并发现Point2级已加入属性z。在表格中找到类时，对象q就会被设定至该类（Point2），而不建立新类（图7，步骤2）。这就达到了归纳属性名称相同的对象之目的。</p>\n<p>　　然而此方法，意味着与隐藏类对应的空对象会有庞大的转换表格。V8透过为各个建构函数建立隐藏类来处理。如果建构函数不同，就算对象的陈述(layout)完全相同，也会为它建立一个新的隐藏类。</p>\n<h1 id=\"-\">内嵌缓存</h1>\n<p>　　其它的JavaScript引擎和V8不同，它们将对象属性储存在哈希表中，但V8则将它们储存在数组中。位移信息－指定个别属性在数组中的位置－是储存在隐藏类的哈希表中。同一隐藏类的对象具有相同的属性名称。如果知道对象类，那么就可以利用位移依数组操作存取属性。这比搜寻哈希表快许多。</p>\n<p>　　然而，在JavaScript等动态语言中，很难事先知道对象类型。例如，图8的原始码为对象类型p和q呼叫lengthSquared()函数。对象类型p和q的属性不同，隐藏类也不同。因此无法判定lengthSquared()函数代码的参数（arguments）类型。</p>\n<p>　　若要读取函数中的对象属性，必须先检查对象的隐藏类，并有搜寻类的哈希表，以找出该属性的位移。然后利用位移存取数组。尽管是在数组中存取属性，要先搜寻哈希表的需求就毁掉了使用数组的优点。</p>\n<p>　　然而，从不同的观点来看，情况有所不同。在实际的程序中，依赖代码执行判断类型的情况并不多。例如，在图8的lengthSquared()函数甚至假设大部分通过成为参数的值，都是Point类对象，而一般而言这是正确的。</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">lengthSquared</span><span class=\"hljs-params\">(p)</span> </span>{\n   <span class=\"hljs-keyword\">return</span> p.x* p.x+ p.y* p.y;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">LabeledLocation</span><span class=\"hljs-params\">(name, x, y)</span> </span>{\n   <span class=\"hljs-keyword\">this</span>.name= name;\n   <span class=\"hljs-keyword\">this</span>.x= x;\n   <span class=\"hljs-keyword\">this</span>.y= y;\n}\n\n<span class=\"hljs-keyword\">var</span> p= <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>);\n\n<span class=\"hljs-keyword\">var</span> q= <span class=\"hljs-keyword\">new</span> LabeledLocation(<span class=\"hljs-string\">\"hello\"</span>, <span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>);\n\n<span class=\"hljs-keyword\">var</span> plen= lengthSquared(p);\n<span class=\"hljs-keyword\">var</span> qlen= lengthSquared(q);\n</code></pre>\n<p>图8 代码样本：JavaScript无法判断函数参数类型</p>\n<blockquote>\n<p>在执行之前根本无法判断参数是Point型或是lengthSquared()函数的LabeledLocation型。</p>\n</blockquote>\n<p>　　内嵌缓存是一项加速技术，此设计是为了利用程序中局部（local）类别的方法。若要程序化的属性存取，V8会产生一个指令串来搜寻隐藏类列表（图9）。此代码称为premonomorphic stub。此stub是为了在函数存取属性（图10）。Premonomorphic stub拥有两个信息：搜寻用的隐藏类，以及取自隐藏的位移。最后会产生新代码以缓存此信息（图11）。</p>\n<pre><code class=\"lang-c++\">Object* find_x_for_p_premorphic(Object* p) {\n    C<span class=\"hljs-function\"><span class=\"hljs-title\">lass</span>* klass= p-&gt;</span>get_class();\n    <span class=\"hljs-function\"><span class=\"hljs-title\">int</span> offset = klass-&gt;</span>lookup_offset(<span class=\"hljs-string\">\"x\"</span>);\n    update_cache(klass, offset);\n    <span class=\"hljs-function\"><span class=\"hljs-title\">return</span> p-&gt;</span>properties[offset];\n}\n</code></pre>\n<p>图9 在伪代码（pseudocode）中的premonomorphic stub 从隐藏类中取得属性位移。\n<img src=\"/images/v88.png\" alt=\"\"></p>\n<center>图10 premonomorphic stub呼叫存取函数中的属性时会呼叫premonomorphic stub。</center>\n\n<pre><code class=\"lang-c++\">Object* find_x_for_p_monomorphic(Object* p) {\n    <span class=\"hljs-keyword\">if</span> (CACHED_KLASS == p-&gt;get_class()) {\n        <span class=\"hljs-keyword\">return</span> p-&gt;properties[CACHED_OFFSET];\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">return</span> lookup_property_on_monomorphic(p, <span class=\"hljs-string\">\"x\"</span>);\n    }\n}\n</code></pre>\n<p>图11伪代码的monomorphic stub 处理直接嵌入代码中的位移是用来存取属性的常数。</p>\n<p>　　在搜寻表格之前，带有属性的对象之隐藏类会与缓存隐藏类比较。如果相符就不需要再搜寻，且可以使用缓存的位移来存取属性。如果隐藏类不相符，就透过隐藏类哈希表以一般方式判断位移。</p>\n<p>　　新产生的代码被称为monomorphic stub。「内嵌」这个字的意思是查询隐藏类所需的位移，是以立即可用的形式嵌入在所产生的代码中。当第一次叫出monomorphic stub时，它会将功能从pre-monomorphic stub位址中所叫出的第一个位址重写成monomorphic stub位址（图12）。自此，使用高速的monomorphic stub，单靠类比较和数组存取就可以处理属性存取。\n<img src=\"/images/v89.png\" alt=\"\"></p>\n<center>图 12 monomorphic stub呼叫</center>\n\n<blockquote>\n<p>当呼叫monomorphic stub时，它会将功能从premonomorphic stub位址中叫出的第一个位址，重写成monomorphic stub位址。</p>\n</blockquote>\n<p>　　如果只有一个具有属性的对象，monomorphic stub的效率就会很高。然而，如果类型愈多，缓存失误就会更频繁，进而降低monomorphic stub的效率。</p>\n<p>　　当缓存失误时，V8藉由产生另一个称为megamorphic stub的代码来解决（图13）。与个别类对应的monomorphic stub都写在哈希表中，其在执行时搜寻和叫出stub。如果没有类型对应的monomorphic stub时，就会从类型哈希表中搜寻位移。</p>\n<pre><code class=\"lang-c++\"><span class=\"hljs-function\">Object* <span class=\"hljs-title\">find_x_for_p_megamorphic</span><span class=\"hljs-params\">(Object* p)</span> </span>{\n    Class* klass= p-&gt;get_class();\n    <span class=\"hljs-comment\">//内嵌处理实际的搜寻</span>\n    Stub* stub= klass-&gt;lookup_cached_stub(<span class=\"hljs-string\">\"x\"</span>)\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">NULL</span> != stub) {\n        <span class=\"hljs-keyword\">return</span> (*stub)(p);\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">return</span> lookup_property_on_megamorphic(p, <span class=\"hljs-string\">\"x\"</span>);\n    }\n}\n</code></pre>\n<p>图13伪代码中的Megamorphic stub处理与类型对应的monomorphic stub事先储存在哈希表中，并在执行时被搜寻和叫出。如果无法找到对应的monomorphic stub，就会在类型哈希表中搜寻位移。</p>\n<p>　　当monomorphic stub发生缓存失误时，monomorphic stub会将功能从monomorphic stub位址叫出的第一个位址以megamorphic stub位址重写。在代码搜寻方面，megamorphic stub的性能比monomorphic stub低，但是megamorphic代码却比使用缓存更新、代码生成及其他辅助处理的premonomorphic stubs快许多。</p>\n<p>　　涵盖多种类的内嵌缓存称为多型态内嵌缓存(polymorphic inline cache)。V8内嵌缓存系统被用来呼叫方法以及存取属性。</p>\n<h1 id=\"-\">机器语言的特性</h1>\n<p>　　如以上所述，V8在设计时使用了例如内嵌缓存等，来达到动态语言中天生的速度。创建使用于内嵌缓存之stub的机器语言生成模块密切地与JIT编译器连结。</p>\n<p>　　一些经常使用的方法也被写成机器语言以达到与内嵌拓展相同的效果，使它们成为「内在」的。V8原始码列出了内在转换的候选名单。</p>\n<p>　　V8所含的shell程序可以用来检查V8所产生的机器语言。所产生的指令串可以和V8代码比较，以便显出它的特性。</p>\n<p>　　例如，在执行图14a所示的JavaScript函数时，就会产生一个如图14b所示的x86机器语言指令串。此函数在第39个指令中被呼叫，是个「n+one」加法。在JavaScript中，「+」操作数指示数字变量的加法，以及字符串的连续性。编译器不是产生代码来判决这是哪一种，而是呼叫函数来负责判断。\n<img src=\"/images/v810.png\" alt=\"\"></p>\n<center>图14 V8从JavaScript代码产生的机器语言加法处理被转换成函数呼叫的机器语言（a、b）</center>\n\n<p>　　如果图14的函数稍做更改（图15），那图14b的函数呼叫就会消失，但会有个加法指令（第20），及分支指令（JNZ的若不是零就跳出，第31）。当使用整数作为「+」操作数的操作数，V8编译器在不呼叫函数下会产生一个有「加法」指令的指令串。如果发现操作数（在此为「n」）成了Number对象或String对象等的指标（pointer），</p>\n<p>就会叫出函数。「加法」只会发生在当两个「+」运算的操作数都是整数时。在这种情况下，因为可以跳过函数呼叫所以执行就会比较快。\n<img src=\"/images/v811.png\" alt=\"\"></p>\n<center>图15 V8从图14之JavaScript中所产生的机器语言，经小幅修改</center>\n\n<p>　　此外，0x2会加上「加法」指令，因为为最低有效位（least significant bit, LSB）被用来区别整数（0）和指标（1）。加0x2（二进制中的十）就如同在该值加上1，LSB除外。在jo指令的溢位（overflow）处理中，利用测试和jnz指令来判定指标，跳到下游处理（注1）。</p>\n<p>　　这类的窍门在编译器中到处都有。然而，产生器代码也透露了编译器的限制。具传统最佳化的编译器可以针对图14和15产生完全一样的机器语言，这是由于常数进位的关系。然而V8编译器是在抽象语法树*（abstract syntax tree）单元中产生代码，因此在处理延伸多个节点时就没有最佳化。这在大量的push和pop指令也非常明显。\n<img src=\"/images/v812.png\" alt=\"\">\n图16显示了C语言里相同的处理提供参考。由于C和JavaScript之间的语言规范不同，因此所产生的机器语言是图14和图15的不同，这和编译器的性能无关。</p>\n<p>　　图16 C编译器从C代码所产生的机器语言所产生的机器语言比V8所产生的干净许多（a、b），大部分是因为C和JavaScript语言规范的差异所致。</p>\n<p>　　注1：当溢位信号出现时，jo指令会跳至特定的位址。测试指令将逻辑AND结果反映成零和符号指标等。除非零信号出现，否则jnz指令会跳至特定的位址。</p>\n<ul>\n<li>Abstract syntax tree抽象语法树：在树状架构中代表程序架构的数据。</li>\n</ul>\n<h1 id=\"-oop-\">附录：熟悉OOP的程序员之参考</h1>\n<p>　　JavaScript没有类，但为了让熟悉使用类（面向对象的代码）之程序员更方便使用，可以使用「new」的操作数来建立对象，就像在Java一样。在「new」操作数之后会定义一个特别的「constructor」建构函数（图B-1 a, b）。</p>\n<p>　　然而，即使没有建构函数，也可以建立对象（图B-1c）和设定属性的（图B-1 d）。JavaScript对象的属性和法等随时都可以新增或删除。</p>\n<p>　　除了用点标记（dot notation）存取JavaScript属性以外，也可以使用括号，建议散列(hashing)存取（图B-1 e、f）或是以变量特定属性名称字符串（图B-1 g）。从这些范例中明确显示JavaScript对象的设计是为了使用哈希表。</p>\n<pre><code>a) 定义建构函数「Point」\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Point</span><span class=\"hljs-params\">(x, y)</span> </span>{\n    <span class=\"hljs-comment\">// this是指它自己</span>\n   <span class=\"hljs-keyword\">this</span>.x= x;\n     <span class=\"hljs-keyword\">this</span>.y= y;\n}\n\nb) 当增加新的及呼叫建构器函数时所建立的对象\n<span class=\"hljs-keyword\">var</span> p= <span class=\"hljs-keyword\">new</span> Point(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>);\n\nc) 没有建构器函数也可以建立对象\n<span class=\"hljs-keyword\">var</span> p= { x: <span class=\"hljs-number\">10</span>, y: <span class=\"hljs-number\">20</span> };\n\nd) 可以自由地在对象上新增属性\np.z= <span class=\"hljs-number\">30</span>;\n\ne) 使用点标记存取属性\n<span class=\"hljs-keyword\">var</span> y= p.y\n\nf) 使用括号之散列(hashing)存取\n<span class=\"hljs-keyword\">var</span> y= p[<span class=\"hljs-string\">\"y\"</span>];\n\ng) 也可以使用变量进行散列(hashing)存取\n<span class=\"hljs-keyword\">var</span> name= <span class=\"hljs-string\">\"y\"</span>;\n<span class=\"hljs-keyword\">var</span> p[name];\n</code></pre><p>本文虽然写于2009年V8刚刚推出的时候，其中仍对理解V8有很大帮助。</p>\n<p>原文地址：<a href=\"http://techon.nikkeibp.co.jp/article/HONSHI/20090106/163615/\">http://techon.nikkeibp.co.jp/article/HONSHI/20090106/163615/</a></p>\n<p>繁体中文版地址: <a href=\"http://www.greenpublishers.com/neat/200901/3coverstory.pdf\">http://www.greenpublishers.com/neat/200901/3coverstory.pdf</a></p>\n<p>*本文是以繁体中文版为基础重新修订的。看起来繁体中文版本多为机翻后人工校正的，除去两岸的专业词汇不同外，仍有不少不通的地方。最明显的就是将class翻译为层级。</p>\n<p>转自：<a href=\"http://www.xuanfengge.com/why-v8-so-fast.html\">http://www.xuanfengge.com/why-v8-so-fast.html</a></p>\n","head":{"title":"「转」为什么V8 JavaScript引擎这么快","date":"02 May 2016","tags":["jit","垃圾回收","转"],"categories":["Studying"]}},"「转」也许，这才是大学真正的意义":{"content":"<p>听过太多道理依然过不好这一生，上了这么多年大学依然不知道为什么要如此为难自己。</p>\n<p>可是突然一瞬间一觉醒来，我似乎想明白了大学真正的意义：所谓的大学，不过是让你清楚的明白，离开父母离开朋友离开一切庇护你的港湾和结实的依靠，只身一人在外地的你，在这个小型社会的你，在这个鱼龙混杂之地的你，在这个无人懂无人在乎的环境的你，是否依然能坚强的拥抱自己，为自己铸造一片属于自己的清幽之地，是否有勇气面对这一切陌生的未来和迷茫的自己。</p>\n<p>以下这些，我希望你我都懂，我不是教你怎么做，而是告诉你怎么认清。你可以时刻提醒自己，时刻问自己，这些你确定都知道吗？</p>\n<hr>\n<!--more-->\n<p>01</p>\n<blockquote>\n<p>你不是世界的中心，地球没你照样转行</p>\n</blockquote>\n<p>大学是真正意义上的远离家长远离熟悉的城市，只身一人拉着行李坐在通往陌生地点的车，有新奇也有恐慌。以往习惯了身边朋友的迁就，父母的宠溺，老师的夸奖，同学的羡慕，突然的你在这个大学里变得如同一颗无人问津的小草，你再也不是那个被那么多人围拥仰望的光芒，你被淹没在人山人海的世界里，找不到自己存在的意义。以往你可以任性可以张扬，不过是因为身边有一群足够忍让你在乎你的人，可是大学这个小型社会，来自五湖四海的同学，千万人中你不是唯一，也没有人会过度在意你如何怎样。</p>\n<p>在这里，没有太多人可以容忍你任你胡闹，你不是世界的中心，离了你地球照样转行，所以少把以前的小性子和直言直语不顾及人尊严的话不动脑子轻易的说出来，也切记什么事情都想着别人一定要考虑你的想法，因为一点小事就和别人吵得不可开交，你长大了，要学会心平气和的处事，从容的面对生活了。</p>\n<p>02</p>\n<blockquote>\n<p>除去一切避风港，你还有地方可藏吗？</p>\n</blockquote>\n<p>少了父母的庇护，朋友的陪伴，无依无靠的你，能够挺过去一切困难吗？</p>\n<p>小的时候受伤了难过了，我们总会哭着喊着找妈妈，可是离开父母身边的你，再也不能在哭泣时躲到他们温暖的怀抱里，甚至有时候你会发现，即便你难过委屈哭泣的时候，却是不敢打电话给他们的，因为你会怕他们担心怕他们着急，即便告诉了他们他们也顶多在电话那头安慰你几句，无法给你一个怀抱，也许听听他们的声音就足够了，可是你确定你不会在听到他们声音的时候哭出来吗？我们都听过这么一个例子，小孩子当着外人的面摔倒了会拍拍身上坚强的站起来，可是爸妈一关心的问一句没事吧就会忍不住嚎啕大哭。</p>\n<p>大学一开始肯定会有一些抵触，甚至对父母的思念愈渐浓烈，委屈时更是想家，<strong>这就是在告诉你，究竟什么才是最能让你内心安定下来让你温暖的地方，除去家这个温暖的避风港湾，很多时候我们根本无地可藏，只有父母才会是那个不管你如何都不会离开你抛弃你的人。</strong></p>\n<p><strong>所以，多给父母主动打几个电话，他们在城市的另一边正挂念着你，也无比期待听见你的声音。</strong></p>\n<p>03</p>\n<blockquote>\n<p>你足够坚强应付一切吗？你有能力拼搏自己想要的未来吗？</p>\n</blockquote>\n<p><strong>也许大学真正的意义就在这里，让你清楚自己的能力究竟是个什么样子，让你看看自己孤身一人能否应付一切困难，能否配得上自己想要的生活，能否足够为自己撑起一片天。</strong></p>\n<p>遇到困难的你怎么办，生活费不够的你怎么办，厌学的你怎么办，和同学关系处理不好的你怎么办，这些问题你都能轻而易举的解决吗？这些难关你都能渡过吗？好好想想这些问题，才会清楚的知道自己究竟几斤几两。</p>\n<p>大学就是一个磨砺的过程，首先不考虑你学习成绩怎样，首先在生活方面就是一个难题，为的就是锻炼你自己一人面对这世界所能承受的程度和处事的能力。我们首先要学会的就是勇敢独立和坚强，让自己内心强大起来，让自己努力起来。</p>\n<p>04</p>\n<blockquote>\n<p>你懂的人情世故尔虞我诈吗？</p>\n</blockquote>\n<p>竞争，是个亘久不变的生存法则，也许大学并不像社会上那么激烈，但它的竞争意识和观念也已经显现出来了。例如在学生会就是一个很好的锻炼机会，它是一个相当于公司类型的学生组织，下设很多部门，各部门的人分工合作共同促进学校纪律严明。但是在这个部门之下，已经有的人开始暗地里为了部长主席之位而讨好学哥学姐讨好老师，我并不是告诉你也要这么做，而是以防自己受伤，要看清这一切本质，别傻傻的被人卖了还不知道。以后工作上有时候这种问题出现的次数更多，这个社会不需要傻白甜，<strong>亲爱的，有的时候你那不是单纯而是傻，如果你到现在还不知道这个社会的生存法则你就真的要被社会所抛弃了。</strong></p>\n<p>有时候表面相处好的不一定真心就是朋友，有时候这个人嘴上讨厌另一人但也会笑着聊天，有时候我们要学会违背自己的心愿去做一些自己不喜欢做的事，因为，这就是复杂的人生啊。愿你知世故而不世故，愿你能看清社会的黑暗仍然永葆善良。</p>\n<p>05</p>\n<blockquote>\n<p>你能够自己挣够一月生活费吗？</p>\n</blockquote>\n<p>你心安理得的接受父母打来的生活费，心安理得的拿着钱四处挥霍，心安理得的买着各种衣服包包，在网吧里昏天暗地的打游戏，而你是否想过，你浪费的钱是父母多少汗水换来的？如果让你自己赚钱，你能赚够自己的生活费吗？</p>\n<p>记得大一周末第一次去兼职发传单，顶着炙热的太阳站在人来人往的马路上，把手里的传单一张张递出去，换来的可能是别人的无动于衷，还要一站一整天，又要担心遇到城管，中午可能就吃个面包填饱肚子，一直到下午领到五十块钱工资，那一刻才知道有多么心酸，钱有多么难挣。回去的路上紧紧攥着五十元心却没来由的酸涩，借着夜晚的车窗嘲笑当初那个挥霍无度不知节俭的自己有多可悲。</p>\n<p>由此可以想象我们的一个月生活费包含了多少父母的心血，<strong>当你再挥霍的时候请想一下他们头上的白发脸上的皱纹和手心的粗糙，以及那双炙热的宠溺你的眼神。</strong></p>\n<p>既然知道钱有多难挣，我们就该学会替父母分担一些，学会合理的计划安排自己的开支，不铺张浪费不攀比，适当的兼职也可以锻炼自己的能力和为自己得到一份额外的收入。</p>\n<p>06</p>\n<blockquote>\n<p>你身边的朋友是真心的吗？身边的恋人是可靠的吗？你们能走到最后吗？</p>\n</blockquote>\n<p><strong>逢人只说三分话，不可全抛一颗心。</strong>你身边的人说不定哪天就在背后陷害了你损害了你的利益，或者背地里和其他同学一起说你的坏话。交朋友真的不必在多，到最后你就会发现一辈子能有两三个知己就已经足够了。交朋友看得是质量而不是数量，当你有困难需要借钱的时候你身边还剩下几个所谓的朋友会帮你。</p>\n<p>你可以谈恋爱，但你要清楚你已经不小了，感情不是游戏，你要找到一个真正适合真正对你好的人，外表真的不重要，对方的人品、是否有上进心才是你该优先考虑的。所谓毕业季就是分手季其实不用太担心，如果你们感情真的牢固，一切的问题都不是问题。</p>\n<p>07</p>\n<blockquote>\n<p>有时候图书馆比宿舍更安静，有时候宿舍比图书馆还安静。</p>\n</blockquote>\n<p>其实我极度不喜欢宿舍，有时候受不了它的喧嚣逃去图书馆，沐浴在书海里，可以一坐一整天。有时候宿舍又太过安静，每个人人抱着一个手机躺在各自床上，没有交谈没有声音，寂静的比图书馆还可怕。这两种氛围我都不太过喜欢，喧闹的让我静不下心来，安静的又让我觉得可怕。</p>\n<p>其实大学宿舍无非就是一个让你有一个可以归宿的地方，大学的室友也不一定是可以和你心灵相通的，人越长大对于朋友的理念越来越浅薄，也越来越不愿随便，一切都看你怎么选择。</p>\n<p>有时候和室友难免闹矛盾，但是你该知道，我听过那么一句话，“大学不要和室友闹矛盾，因为你压根无处可去。”</p>\n<p>你已经长大了，该成熟了。成熟就是学会把委屈咽下，把委屈藏在心底，不再对别人任意揭开，学会自我疗伤自我调解，自己消化掉坏情绪，不再因为一点小事就火急火燎，要学会心平气和的处事，以更好的状态迎接生活。生活已经不允许你再任性，而真正成熟的你也知道对什么人在什么时候不该任性。</p>\n<p>08</p>\n<blockquote>\n<p>你可以不努力，但不要嘲笑别人努力。</p>\n</blockquote>\n<p>看到有的同学每天一大早起来去教室自习，你捂紧了被子，心里暗暗骂了声“神经病。”看到有的同学周末不出去玩，而是抱着一堆学习资料去自习室，你不屑的暗暗嘲笑书呆子。当你在宿舍里抱着手机追韩剧，其他同学坐在床上看书，你抬头瞧一眼暗暗鄙视别人装。可殊不知，其实最令人瞧不起的是你自己，到头来被嘲笑的是你自己，最后一无所有的仍然是你自己。</p>\n<p>你可以不努力，但不要嘲笑别人的努力，也许别人的努力在你眼里一文不值，可是，所有的事情最终都会有一个答案，时间会告诉你什么是对什么是错什么该珍惜，更会把你的信誓旦旦换成打在脸上的一巴掌。你有多堕落，时光就有多疼痛。你有多嘲笑别人，别人就有多成功，而你嘲笑的最后都变成了你所后悔的。</p>\n<p>09</p>\n<blockquote>\n<p>你想清楚未来要做什么了吗？你该考的证都考出来了吗？</p>\n</blockquote>\n<p>你以后要做什么？你的梦想是什么？你将来要从事什么？你的英语四级考出来了吗？</p>\n<p>……</p>\n<p>你已经大学了，很多事情已经不容许你再往后拖延了，你要为自己的未来所提前做打算，不是等到毕业后还一脸茫然不知道该去什么，那时候再去着急已经太晚了。所以从现在开始你就要清楚的知道自己将来要从事一个什么行业，并怎么去做。</p>\n<p>譬如会计专业，你现在就最好能考出会计从业证，为自己面试时争取一个更好的机会，当然，最好还能考出来初级，在一个从业和初级的水平下，我相信大部分公司都会选择有初级证书的同学。再比如四级，在校内最好能考出来，它也是你简历上可以优先让公司录取的一点，多一个证书其实你就相应的多一个机会。</p>\n<p><strong>机会都是留给有准备的人。</strong></p>\n<p>010</p>\n<blockquote>\n<p>讨厌本专业？讨厌学习？</p>\n</blockquote>\n<p>我听到过很多人说讨厌本专业，后悔报了本专业，又没兴趣，所以破罐子破摔，任由自己一步步堕落下去。可是你别忘了，这是你自己当初的选择，你要为它所负责。</p>\n<p>生活中我们总会遇到很多我们不喜欢但必须要做的事情，例如你生病不喜欢吃药不喜欢打针可是你还是必须要去做，否则你的病只会越拖越严重，到最后就不是吃药这么简单了。</p>\n<p>一个人把自己喜欢的事情做好是认真努力，把自己不喜欢的事情还能做好才是最值得人钦佩的，哪怕你不喜欢，也要善于发现它的乐趣，为自己找到一个坚持下去的理由，而不是在心里就一次次否定“我不喜欢我肯定做不好。”你有试着去做吗？你有真的去努力吗？</p>\n<p>如果你实在不喜欢，将来也不打算从事本行业，那么，你就要学着从其他方面着手，考虑自己该怎样去做才不荒废大学时光，而不是既然我不从事这个专业那以后学了也就没用了，既然你对这个不感兴趣，那必然会有你所感兴趣的东西，把你所感兴趣的去做好也是一件本事。</p>\n<p>例如有的时候我就不喜欢男生打游戏，我认为又耽误时间又浪费钱，你可以去打游戏，但是我想说，如果你做不到像人家打游戏能打出冠军来的，就不要以为自己多了不起，一个人不管做什么从事什么职业，只要他有信心责任心和坚持，并且把这件事情做好，那么任何职业都是好的。学习只是为了给你提供更多的机会，而如果你能从其他方面找到更多的机会你可以不去学习，怕的就是你不学习还没有可以任性的优点，最终一事无成！</p>\n<p>011</p>\n<blockquote>\n<p>你可以不化妆不打扮，但请着装整洁</p>\n</blockquote>\n<p>我们走在校园里总是随处可见化着妆穿着时尚的女生和打扮帅气的男生，任是谁都忍不住多看他们两眼，而那些长相平凡衣着纯朴的自然被淹没在人群中毫不起眼。这时就会有人嫉妒，阴阳怪气的说别人骚气，肤浅，然而，事实真的如此吗？</p>\n<p>爱美之心人皆有之，把自己打扮的漂亮点错了吗？我们不可以用批判的眼光去这么看待别人。不过大学生的我们，并不是需要人人化妆，衣着整齐干净会给人一种很舒服的感觉，如果你都懒得打扮自己收拾自己，你还怎么指望别人怎么看待你，如果你连自己都不尊重自己，让别人怎么尊重你。</p>\n<p>外表与穿着是第一印象的法宝，不要让自己给别人留下不好的印象。</p>\n<p>012</p>\n<blockquote>\n<p>现在不旅游以后更没时间了</p>\n</blockquote>\n<p>我们总是说，时间还很多，未来还很长，我们可以骑马喝酒走四方，不必急于一时，于是一拖再拖。可是，计划永远赶不上变化，有些事你当下不去做将来可能真的没有时间了。就像是我们小时候写作业，总爱说“没事、时间还多呢，开学早着呢”，可是一眨眼全都在开学前一天晚上拼命加班，把所有的事情都堆在了一起。</p>\n<p>你想想看，现在我们是学生，时间最多最充裕，周末假期……可是以后一步入社会，我们就开始为了生活打拼，为了财米油盐奋斗，为了能有一席之地而挣扎，我们天天忙的焦头烂额，在生活与工作之间奔波，面临的事情越来越多，很多东西真的开始顾及不上。</p>\n<p>所以很多事情，想做就抓紧去做，不要计划更不要拖延，因为你不知道意外会哪天到来，计划也赶不上变化。</p>\n<p>趁年轻趁有空，趁学生证还能半价，世界那么大，你该去看看。</p>\n<hr>\n<p>别人说的道理是别人的人生，而这个道理不过是告诉你他们的经历，引导你成为更好的人，该怎么做还是在你自己，别人插手不了你的人生。</p>\n<p>但愿你活的不后悔，该珍惜的都珍惜。你还年轻，就是最大的资本。</p>\n<p>文／丑妹（简书作者）\n原文链接：<a href=\"http://www.jianshu.com/p/76537e65ce4b\">http://www.jianshu.com/p/76537e65ce4b</a></p>\n","head":{"title":"「转」也许，这才是大学真正的意义","date":"26 Apr 2016","categories":["会心"],"tags":["转","随笔"]}},"「项目拾遗」HTTP文件浏览（静态文件-express4-x-md-code文件渲染）":{"content":"<h1 id=\"-\">问题暴露</h1>\n<p>之前做的<a href=\"http://moyuyc.github.io/2016/05/28/node-express-jade%E5%AE%9E%E7%8E%B0HTTP%E6%96%87%E4%BB%B6%E6%B5%8F%E8%A7%88%E5%99%A8/\">HTTP浏览</a>是使用express2.x版本做的...，因为参考书比较旧了。</p>\n<ol>\n<li><code>express2.x</code>中没有<code>express4.x</code>中的<code>res.sendFile()</code>方法，之前发送文件是使用的<code>stream.pipe()</code>方法，导致不支持继续下载，而且用户不能知道下载进度，在线音乐视频播放也不能选择时间跳跃欣赏。<code>res.sendFile()</code>方法可以将本地文件以静态资源发送给用户，所有问题迎刃而解。</li>\n<li>旧版本不支持<code>java/c/cpp/js/css/html</code>等代码文件和<code>md/markdown</code>文件在线查看，所以进行改进。</li>\n<li>利用<code>Bootstrap responsive utils</code>和<code>Bootstrap grid system</code>进行响应式布局。</li>\n<li>监控<code>root.txt</code>文件，改变root后无需重启服务器。</li>\n<li>去除对<code>q.js</code>依赖，使用原生<code>Promise</code></li>\n</ol>\n<!--more-->\n<h1 id=\"-\">效果预览</h1>\n<ul>\n<li><code>json</code>文件查看\n<img src=\"/images/package.png\" alt=\"\"></li>\n<li><code>md</code>文件查看\n<img src=\"/images/md.png\" alt=\"\"></li>\n<li><code>html</code>文件查看\n<img src=\"/images/html.png\" alt=\"\"></li>\n</ul>\n<h1 id=\"-\">代码改进</h1>\n<h2 id=\"-root-txt-\"><code>root.txt</code>文件监控</h2>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">//全局对象</span>\nglobal.root = fs.readFileSync(<span class=\"hljs-string\">'./root.txt'</span>).toString().split(<span class=\"hljs-regexp\">/\\s+/</span>)[<span class=\"hljs-number\">0</span>];\nfs.watchFile(<span class=\"hljs-string\">'./root.txt'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-comment\">//root.txt 文件修改后触发</span>\n  global.root = fs.readFileSync(<span class=\"hljs-string\">'./root.txt'</span>).toString().split(<span class=\"hljs-regexp\">/\\s+/</span>)[<span class=\"hljs-number\">0</span>];\n});\n</code></pre>\n<h2 id=\"-promise-\">原生<code>Promise</code></h2>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> statP = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">root,file</span>)</span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">resolve</span>)</span>{\n      fs.stat(root+<span class=\"hljs-string\">'/'</span>+file,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, stats</span>) </span>{\n        <span class=\"hljs-keyword\">var</span> t = {};\n        <span class=\"hljs-keyword\">if</span>(err){\n            t.reason=err;\n            resolve(t);\n        }\n        <span class=\"hljs-keyword\">else</span> {\n           t.state=<span class=\"hljs-string\">'ok'</span>;\n           stats.name = file;\n           stats.type = stats.isDirectory()?<span class=\"hljs-string\">'文件夹'</span>:<span class=\"hljs-string\">'文件'</span>;\n           t.value=stats;\n           resolve(t);\n        }\n      });\n    })\n};\n<span class=\"hljs-built_in\">Promise</span>.all(files.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">x,i,a</span>)=&gt;</span>{<span class=\"hljs-keyword\">return</span> statP(r,x);}))\n    .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">results</span>) </span>{\n        <span class=\"hljs-keyword\">var</span> values = [];\n        results.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span>=&gt;</span>{\n            <span class=\"hljs-keyword\">if</span>(x.state===<span class=\"hljs-string\">'ok'</span>){\n                values.push(x.value);\n            }<span class=\"hljs-keyword\">else</span>\n                <span class=\"hljs-built_in\">console</span>.error(x.reason);\n        });\n        <span class=\"hljs-comment\">//...render</span>\n    },<span class=\"hljs-built_in\">console</span>.error);\n</code></pre>\n<h2 id=\"-sendfile-\"><code>sendFile</code>方法使用</h2>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// noraw为url上的noraw参数值</span>\n<span class=\"hljs-keyword\">if</span>(!!noraw){\n    <span class=\"hljs-comment\">// f为文件名</span>\n    <span class=\"hljs-keyword\">if</span>(f.<span class=\"hljs-keyword\">match</span>(/\\.(avi|mp4|mkv|rmvb|mpg|rm|wma)$/i)){\n        res.<span class=\"hljs-keyword\">render</span>(<span class=\"hljs-string\">'video'</span>,o);\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(f.<span class=\"hljs-keyword\">match</span>(/\\.(jpg|png|bmp|jpeg|gif)$/i)){\n        res.<span class=\"hljs-keyword\">render</span>(<span class=\"hljs-string\">'img'</span>,o);\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(f.<span class=\"hljs-keyword\">match</span>(/\\.(mp3|wma|aac)$/i)){\n        res.<span class=\"hljs-keyword\">render</span>(<span class=\"hljs-string\">'audio'</span>,o);\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(f.<span class=\"hljs-keyword\">match</span>(/\\.(md|markdown)$/i)){\n        fs.readFile(<span class=\"hljs-keyword\">file</span>,(<span class=\"hljs-keyword\">error</span>,data) =&gt; {\n            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">error</span>) throw <span class=\"hljs-keyword\">error</span>;\n            o.content = data.toString();\n            res.<span class=\"hljs-keyword\">render</span>(<span class=\"hljs-string\">'md'</span>,o);\n        });\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(f.<span class=\"hljs-keyword\">match</span>(/\\.(java|c|cpp|js|css|jsp|php|json|txt)$/i)){\n        fs.readFile(<span class=\"hljs-keyword\">file</span>,(<span class=\"hljs-keyword\">error</span>,data) =&gt; {\n            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">error</span>) throw <span class=\"hljs-keyword\">error</span>;\n            <span class=\"hljs-comment\">// 在服务器渲染高亮代码方法被淘汰，因为对大文件调用下面方法十分耗时间，</span>\n            <span class=\"hljs-comment\">// 而node为单线程，所以其他用户请求也会被阻塞，而且本用户也要等待很久。</span>\n            <span class=\"hljs-comment\">// 所以选择在浏览器端解析。</span>\n            <span class=\"hljs-comment\">// console.time('hl');</span>\n            <span class=\"hljs-comment\">// o.content=hl.highlightAuto(data.toString()).value;</span>\n            <span class=\"hljs-comment\">// console.timeEnd('hl');</span>\n            o.content = data.toString();\n            res.<span class=\"hljs-keyword\">render</span>(<span class=\"hljs-string\">'code'</span>,o);\n        });\n    }<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(f.<span class=\"hljs-keyword\">match</span>(/\\.(html|htm)$/i)){\n        fs.readFile(<span class=\"hljs-keyword\">file</span>,(<span class=\"hljs-keyword\">error</span>,data) =&gt; {\n            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">error</span>) throw <span class=\"hljs-keyword\">error</span>;\n            o.content = data.toString();\n            res.<span class=\"hljs-keyword\">render</span>(<span class=\"hljs-string\">'html'</span>,o);\n        });\n    }<span class=\"hljs-keyword\">else</span>{\n        <span class=\"hljs-comment\">// rela 为相对路径，root 为文件根目录</span>\n        res.sendFile(rela,{root:<span class=\"hljs-keyword\">global</span>.root});\n    }\n}<span class=\"hljs-keyword\">else</span>{\n    res.sendFile(rela,{root:<span class=\"hljs-keyword\">global</span>.root});\n}\n</code></pre>\n<h2 id=\"-layout-jade-\"><code>layout.jade</code></h2>\n<pre><code class=\"lang-jade\">doctype\nhtml(<span class=\"hljs-name\">lang=</span><span class=\"hljs-string\">\"zh\"</span>)\n  head\n    title= title\n    meta(<span class=\"hljs-name\">name=</span><span class=\"hljs-string\">\"renderer\"</span>,content=<span class=\"hljs-string\">\"webkit\"</span>)\n    meta(<span class=\"hljs-name\">http-equiv=</span><span class=\"hljs-string\">\"X-UA-Compatible\"</span>,content=<span class=\"hljs-string\">\"IE=edge\"</span>)\n    meta(<span class=\"hljs-name\">name=</span><span class=\"hljs-string\">\"viewport\"</span> content=<span class=\"hljs-string\">\"width=device-width, initial-scale=1\"</span>)\n    link(<span class=\"hljs-name\">rel=</span>'stylesheet', href='/stylesheets/bootstrap.min.css')\n    link(<span class=\"hljs-name\">rel=</span>'stylesheet', href='/stylesheets/style.css')\n    link(<span class=\"hljs-name\">rel=</span>'stylesheet', href='/stylesheets/hljs-github.min.css')\n    link(<span class=\"hljs-name\">rel=</span>'stylesheet', href='/stylesheets/pilcrow.css')\n    link(<span class=\"hljs-name\">rel=</span>'stylesheet', href='/stylesheets/github-markdown.css')\n  body\n    block content\n</code></pre>\n<h2 id=\"-code-jade-\"><code>code.jade</code></h2>\n<pre><code class=\"lang-jade\"><span class=\"hljs-keyword\">extends </span>layout\n\n<span class=\"hljs-keyword\">block </span>content\n    <span class=\"hljs-keyword\">script(src=\"http://cdn.bootcss.com/highlight.js/8.0/highlight.min.js\")\n</span>    <span class=\"hljs-keyword\">div.container-fluid\n</span>        h1=title\n        include <span class=\"hljs-keyword\">btns\n</span>        <span class=\"hljs-keyword\">div.markdown-body\n</span>            pre\n                code!=content\n        <span class=\"hljs-keyword\">script </span>hljs.initHighlightingOnLoad()<span class=\"hljs-comment\">;//自动寻找&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;进行解析</span>\n        footer\n            p<span class=\"hljs-meta\">.text</span>-center<span class=\"hljs-meta\">.text</span>-info Running on node with Express, <span class=\"hljs-keyword\">Jade. </span><span class=\"hljs-keyword\">By </span>Moyu.\n</code></pre>\n<h2 id=\"-md-jade-\"><code>md.jade</code></h2>\n<pre><code class=\"lang-jade\"><span class=\"hljs-comment\">//</span>\n   Created by Yc on <span class=\"hljs-number\">2016</span><span class=\"hljs-regexp\">/6/</span><span class=\"hljs-number\">9</span>.\n<span class=\"hljs-keyword\">extends</span> layout\n\nblock content\n    script(src=<span class=\"hljs-string\">\"http://cdn.bootcss.com/marked/0.3.5/marked.min.js\"</span>)\n    script(src=<span class=\"hljs-string\">\"http://cdn.bootcss.com/highlight.js/8.0/highlight.min.js\"</span>)\n    <span class=\"hljs-keyword\">div</span>.container-fluid\n        h1=title\n        <span class=\"hljs-keyword\">include</span> btns\n        <span class=\"hljs-keyword\">div</span>.row\n            <span class=\"hljs-keyword\">div</span>.col-lg-<span class=\"hljs-number\">6</span>.visible-lg\n                h2 解析前\n                <span class=\"hljs-keyword\">div</span>.markdown-body\n                    pre\n                        code(id=<span class=\"hljs-string\">'markdown-raw'</span>)=content <span class=\"hljs-comment\">//\"=\"会被转义(如 &lt; : &amp;lt;),\"!=\"不会</span>\n            <span class=\"hljs-keyword\">div</span>.col-lg-<span class=\"hljs-number\">6</span>\n                h2 解析后\n                <span class=\"hljs-keyword\">div</span>.markdown-body(id=<span class=\"hljs-string\">'markdown-show'</span>)\n        script(src=<span class=\"hljs-string\">\"/javascripts/md.js\"</span>)\n        <span class=\"hljs-comment\">//renderer 来自md.js</span>\n        script document.getElementById(<span class=\"hljs-string\">'markdown-show'</span>).innerHTML = marked(document.getElementById(<span class=\"hljs-string\">'markdown-raw'</span>).innerText,{renderer:renderer});\n        footer\n            p.text-center.text-info Running on node with Express, Jade. By Moyu.\n</code></pre>\n<h2 id=\"-md-js-\"><code>md.js</code></h2>\n<pre><code class=\"lang-javascript\">~<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{\n    marked.setOptions({\n        highlight: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(code)</span> </span>{\n            <span class=\"hljs-keyword\">return</span> hljs.highlightAuto(code).value;\n        }\n    });\n    renderer = <span class=\"hljs-keyword\">new</span> marked.Renderer();\n    <span class=\"hljs-keyword\">var</span> map = {};\n    <span class=\"hljs-comment\">//重写默认'#','##'... 格式的转换方法</span>\n    renderer.heading = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(text, level)</span> </span>{<span class=\"hljs-comment\">//level 表示层级，如#为1，##为2</span>\n        <span class=\"hljs-keyword\">var</span> escapedText = text.toLowerCase();\n        <span class=\"hljs-comment\">// 防止出现重复的锚点</span>\n        <span class=\"hljs-keyword\">if</span>(!!map[text])\n            escapedText+=<span class=\"hljs-string\">'-'</span>+map[text]++;\n        <span class=\"hljs-keyword\">else</span>\n            map[text]=<span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'&lt;h'</span> + level + <span class=\"hljs-string\">'&gt;&lt;a name=\"'</span> +\n            escapedText +\n            <span class=\"hljs-string\">'\" class=\"anchor\" href=\"#'</span> +\n            escapedText +\n            <span class=\"hljs-string\">'\"&gt;&lt;span class=\"header-link\"&gt;&lt;/span&gt;&lt;/a&gt;'</span> +\n            text + <span class=\"hljs-string\">'&lt;/h'</span> + level + <span class=\"hljs-string\">'&gt;'</span>;\n    };\n}();\n</code></pre>\n<h1 id=\"-\">问题归纳</h1>\n<p><strong>通过url的noraw控制展示方式，对SEO不友好</strong>\nGitHub的解决方法是，在raw文件提供独立的三级域名<code>raw.githubusercontent.com/{username}/{repo}/{branch}/{file}</code></p>\n<p>后期希望更加完善这个web应用吧，比如在线查看压缩文件等功能。</p>\n<h1 id=\"-\">代码地址</h1>\n<p><a href=\"https://github.com/moyuyc/http-file-explorer-express4.x\">http-file-explorer-express4.x</a></p>\n<h1 id=\"-\">参考资料</h1>\n<ul>\n<li><a href=\"https://github.com/mixu/markdown-styles\">markdown-styles</a>: 提供高大上的CSS样式。</li>\n<li><a href=\"https://github.com/chjj/marked\">marked</a>: 提供强大的markdown格式转化API。</li>\n<li><a href=\"https://github.com/isagalaev/highlight.js\">highlight.js</a>:  提供强大的code格式转化为具有class样式的标签，方便用户自定义样式。</li>\n<li><a href=\"http://www.expressjs.com.cn/4x/api.html#res.sendFile\">express4.x</a>:  express4.x详细API文档。</li>\n</ul>\n","head":{"title":"「项目拾遗」HTTP文件浏览（静态文件+express4.x+md/code文件渲染）","date":"10 Jun 2016","categories":["后端"],"tags":["express","jade","markdown","highlight"]}},"「项目拾遗」几个计算机图形学的前端程序":{"content":"<h1 id=\"-\">前言</h1>\n<p>这是一篇不太正规的「计算机图形学论文」，其实论文谈不上，因为根本上不到研究的层次，就是自己瞎捣鼓。\n主要介绍了几个与图形学相关的程序，皆采用前端技术实现，点击即可查看。</p>\n<ul>\n<li><a href=\"http://moyuyc.github.io/htm/painter/\">简单的绘图程序</a></li>\n<li><a href=\"http://moyuyc.github.io/2016/04/26/canvas%E7%BB%98%E5%88%B6%E5%B9%B3%E9%9D%A2%E8%8A%B1%E7%93%A3/\">三次贝赛尔曲线应用-绘制平面动态花瓣</a></li>\n<li><a href=\"/htm/bezier.html\">动态绘制三次贝赛尔曲线</a></li>\n<li><a href=\"http://moyuyc.xyz/play_3d/play_3d_demo1.html\">三维几何体的基本变换与组合变换应用</a></li>\n</ul>\n<!--more-->\n<h1 id=\"-\">主要内容</h1>\n<h2 id=\"-\">简单的绘图程序</h2>\n<h3 id=\"-\">介绍</h3>\n<p>主要运用HTML5 canvas API与相关图形学知识实现的绘图程序（还包括部分图像处理功能，不介绍）。\n能够选择图形类型（Pen/Line/Circle）,画笔颜色（随机生成）,画笔宽度, 图形对象拖拽移动，图形种子填充算法。</p>\n<h3 id=\"-\">演示图片</h3>\n<p><img src=\"/images/gif1.gif\" alt=\"img\"></p>\n<h3 id=\"-\">代码解释</h3>\n<p><code>Shape.js ： 主要包含一些图形类</code></p>\n<p>点类代码</p>\n<pre><code>Point: function (x, y) {\n    <span class=\"hljs-keyword\">this</span>.x = x;\n    <span class=\"hljs-keyword\">this</span>.y = y;\n    <span class=\"hljs-keyword\">this</span>.distance = function (p) {\n        p = p?p:new Shape.Point(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n        <span class=\"hljs-keyword\">return</span> Math.sqrt(Math.pow(p.x-<span class=\"hljs-keyword\">this</span>.x,<span class=\"hljs-number\">2</span>)+Math.pow(p.y-<span class=\"hljs-keyword\">this</span>.y,<span class=\"hljs-number\">2</span>));\n    };\n    <span class=\"hljs-keyword\">this</span>.move = function(offsetX,offsetY){\n        <span class=\"hljs-keyword\">this</span>.x+=offsetX;<span class=\"hljs-keyword\">this</span>.y+=offsetY;\n    };\n    <span class=\"hljs-keyword\">this</span>.draw = function (paint, color, linewidth) {\n        <span class=\"hljs-keyword\">this</span>.color = color?color:<span class=\"hljs-keyword\">this</span>.color;\n        <span class=\"hljs-keyword\">this</span>.linewidth = linewidth?linewidth:<span class=\"hljs-keyword\">this</span>.linewidth;\n        paint.strokeStyle = <span class=\"hljs-keyword\">this</span>.color ? <span class=\"hljs-keyword\">this</span>.color : <span class=\"hljs-string\">'black'</span>;\n        paint.lineWidth = <span class=\"hljs-keyword\">this</span>.linewidth!=<span class=\"hljs-literal\">null</span> ? <span class=\"hljs-keyword\">this</span>.linewidth : <span class=\"hljs-number\">1</span>;\n        paint.beginPath();\n        paint.moveTo(<span class=\"hljs-keyword\">this</span>.x, <span class=\"hljs-keyword\">this</span>.y);\n        paint.lineTo(<span class=\"hljs-keyword\">this</span>.x + <span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">this</span>.y + <span class=\"hljs-number\">1</span>);\n        paint.stroke();\n        paint.save();\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n    }\n}\n</code></pre><p>线段类代码</p>\n<pre><code>Line: function (p1, p2) {\n    this.sp = p1;\n    this.ep = p2;\n    //this.<span class=\"hljs-built_in\">color</span>;this.<span class=\"hljs-built_in\">linewidth</span>;\n    this.move = function(offsetX,offsetY){\n        this.sp.x+=offsetX;this.sp.y+=offsetY;\n        this.ep.x+=offsetX;this.ep.y+=offsetY;\n    };\n    // 不足：未考虑线宽，用户较难选中\n    this.isIn = function (point) {\n        <span class=\"hljs-built_in\">var</span> x = point.x, y = point.y;\n        <span class=\"hljs-keyword\">if</span>((y-this.sp.y)*(x-this.ep.x)==(y-this.ep.y)*(x-this.sp.x))\n            <span class=\"hljs-built_in\">return</span> <span class=\"hljs-literal\">true</span>;\n        <span class=\"hljs-built_in\">return</span> <span class=\"hljs-literal\">false</span>;\n    };\n    // 中点划线法\n    this.<span class=\"hljs-built_in\">draw</span> = function (paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>) {\n        this.<span class=\"hljs-built_in\">color</span> = <span class=\"hljs-built_in\">color</span>?<span class=\"hljs-built_in\">color</span>:this.<span class=\"hljs-built_in\">color</span>;\n        this.<span class=\"hljs-built_in\">linewidth</span> = <span class=\"hljs-built_in\">linewidth</span>!=null?<span class=\"hljs-built_in\">linewidth</span>:this.<span class=\"hljs-built_in\">linewidth</span>;\n        <span class=\"hljs-built_in\">color</span> = this.<span class=\"hljs-built_in\">color</span>; <span class=\"hljs-built_in\">linewidth</span> = this.<span class=\"hljs-built_in\">linewidth</span>;\n        <span class=\"hljs-built_in\">var</span> ep = this.ep, sp = this.sp,\n            dX = ep.x - sp.x,\n            dY = ep.y - sp.y,\n            a = sp.y - ep.y,\n            b = ep.x - sp.x;\n        <span class=\"hljs-keyword\">if</span> (Math.<span class=\"hljs-built_in\">abs</span>(dX) &gt;= Math.<span class=\"hljs-built_in\">abs</span>(dY)) {\n            <span class=\"hljs-keyword\">if</span> (dX &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; dY &gt;= <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-built_in\">var</span> d = b + <span class=\"hljs-number\">2</span> * a, d1 = <span class=\"hljs-number\">2</span> * a, d2 = <span class=\"hljs-number\">2</span> * (a + b);\n                <span class=\"hljs-built_in\">new</span> Shape.Point(sp.x, sp.y).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">var</span> x = sp.x + <span class=\"hljs-number\">1</span>, y = sp.y; x &lt; ep.x; x++) {\n                    <span class=\"hljs-keyword\">if</span> (d &gt;= <span class=\"hljs-number\">0</span>) d = d + d1;\n                    <span class=\"hljs-keyword\">else</span> {\n                        y++;\n                        d = d + d2;\n                    }\n                    <span class=\"hljs-built_in\">new</span> Shape.Point(x, y).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n                }\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (dX &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; dY &lt;= <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-built_in\">var</span> d = -b + a &lt;&lt; <span class=\"hljs-number\">1</span>, d1 = (a - b) &lt;&lt; <span class=\"hljs-number\">1</span>, d2 = a &lt;&lt; <span class=\"hljs-number\">1</span>;\n                <span class=\"hljs-built_in\">new</span> Shape.Point(sp.x, sp.y).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">var</span> x = sp.x + <span class=\"hljs-number\">1</span>, y = sp.y; x &lt; ep.x; x++) {\n                    <span class=\"hljs-keyword\">if</span> (d &gt;= <span class=\"hljs-number\">0</span>) {\n                        y--;\n                        d = d + d1;\n                    }\n                    <span class=\"hljs-keyword\">else</span> d = d + d2;\n                    <span class=\"hljs-built_in\">new</span> Shape.Point(x, y).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n                }\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (dX &lt;= <span class=\"hljs-number\">0</span> &amp;&amp; dY &lt;= <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-built_in\">var</span> d = -b - <span class=\"hljs-number\">2</span> * a, d1 = -<span class=\"hljs-number\">2</span> * a, d2 = -<span class=\"hljs-number\">2</span> * (a + b);\n                <span class=\"hljs-built_in\">new</span> Shape.Point(sp.x, sp.y).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">var</span> x = sp.x - <span class=\"hljs-number\">1</span>, y = sp.y; x &gt; ep.x; x--) {\n                    <span class=\"hljs-keyword\">if</span> (d &gt;= <span class=\"hljs-number\">0</span>) d = d + d1;\n                    <span class=\"hljs-keyword\">else</span> {\n                        y--;\n                        d = d + d2;\n                    }\n                    <span class=\"hljs-built_in\">new</span> Shape.Point(x, y).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n                }\n            }\n            <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-built_in\">var</span> d = b - <span class=\"hljs-number\">2</span> * a, d1 = <span class=\"hljs-number\">2</span> * (b - a), d2 = -<span class=\"hljs-number\">2</span> * a;\n                <span class=\"hljs-built_in\">new</span> Shape.Point(sp.x, sp.y).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">var</span> x = sp.x - <span class=\"hljs-number\">1</span>, y = sp.y; x &gt; ep.x; x--) {\n                    <span class=\"hljs-keyword\">if</span> (d &gt;= <span class=\"hljs-number\">0</span>) {\n                        y++;\n                        d = d + d1;\n                    }\n                    <span class=\"hljs-keyword\">else</span> d = d + d2;\n                    <span class=\"hljs-built_in\">new</span> Shape.Point(x, y).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n                }\n            }\n        }\n        <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">if</span> (dX &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; dY &gt;= <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-built_in\">var</span> d = a + <span class=\"hljs-number\">2</span> * b, d1 = <span class=\"hljs-number\">2</span> * (a + b), d2 = <span class=\"hljs-number\">2</span> * b;\n                <span class=\"hljs-built_in\">new</span> Shape.Point(sp.x, sp.y).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">var</span> x = sp.x, y = sp.y + <span class=\"hljs-number\">1</span>; y &lt; ep.y; y++) {\n                    <span class=\"hljs-keyword\">if</span> (d &gt;= <span class=\"hljs-number\">0</span>) {\n                        x++;\n                        d = d + d1;\n                    }\n                    <span class=\"hljs-keyword\">else</span> {\n                        d = d + d2;\n                    }\n                    <span class=\"hljs-built_in\">new</span> Shape.Point(x, y).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n                }\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (dX &gt;= <span class=\"hljs-number\">0</span> &amp;&amp; dY &lt;= <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-built_in\">var</span> d = a - <span class=\"hljs-number\">2</span> * b, d1 = -<span class=\"hljs-number\">2</span> * b, d2 = <span class=\"hljs-number\">2</span> * (a - b);\n                <span class=\"hljs-built_in\">new</span> Shape.Point(sp.x, sp.y).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">var</span> x = sp.x, y = sp.y - <span class=\"hljs-number\">1</span>; y &gt; ep.y; y--) {\n                    <span class=\"hljs-keyword\">if</span> (d &gt;= <span class=\"hljs-number\">0</span>)      d = d + d1;\n                    <span class=\"hljs-keyword\">else</span> {\n                        x++;\n                        d = d + d2;\n                    }\n                    <span class=\"hljs-built_in\">new</span> Shape.Point(x, y).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n                }\n\n            }\n            <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (dX &lt;= <span class=\"hljs-number\">0</span> &amp;&amp; dY &lt;= <span class=\"hljs-number\">0</span>) {\n                <span class=\"hljs-built_in\">var</span> d = -a - <span class=\"hljs-number\">2</span> * b, d1 = -<span class=\"hljs-number\">2</span> * (a + b), d2 = -<span class=\"hljs-number\">2</span> * b;\n                <span class=\"hljs-built_in\">new</span> Shape.Point(sp.x, sp.y).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">var</span> x = sp.x, y = sp.y - <span class=\"hljs-number\">1</span>; y &gt; ep.y; y--) {\n                    <span class=\"hljs-keyword\">if</span> (d &gt;= <span class=\"hljs-number\">0</span>) {\n                        x--;\n                        d = d + d1;\n                    }\n                    <span class=\"hljs-keyword\">else</span>               d = d + d2;\n                    <span class=\"hljs-built_in\">new</span> Shape.Point(x, y).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n                }\n\n            }\n            <span class=\"hljs-keyword\">else</span> {\n                <span class=\"hljs-built_in\">var</span> d = -a + <span class=\"hljs-number\">2</span> * b, d1 = <span class=\"hljs-number\">2</span> * b, d2 = <span class=\"hljs-number\">2</span> * (b - a);\n                <span class=\"hljs-built_in\">new</span> Shape.Point(sp.x, sp.y).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">var</span> x = sp.x, y = sp.y + <span class=\"hljs-number\">1</span>; y &lt; ep.y; y++) {\n                    <span class=\"hljs-keyword\">if</span> (d &gt;= <span class=\"hljs-number\">0</span>)           d = d + d1;\n                    <span class=\"hljs-keyword\">else</span> {\n                        x--;\n                        d = d + d2;\n                    }\n                    <span class=\"hljs-built_in\">new</span> Shape.Point(x, y).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n                }\n            }\n        }\n        <span class=\"hljs-built_in\">return</span> this;\n    }\n}\n</code></pre><p>圆类代码</p>\n<pre><code>Circle: function (cp, r) {\n    this.cp = cp;\n    this.r = r;\n    this.move = function(offsetX,offsetY){\n        this.cp.x+=offsetX;this.cp.y+=offsetY;\n    };\n    //this.<span class=\"hljs-built_in\">color</span>;this.<span class=\"hljs-built_in\">linewidth</span>;\n    this.isIn = function (point) {\n        <span class=\"hljs-built_in\">var</span> x = point.x, y = point.y;\n        <span class=\"hljs-built_in\">return</span> (x-this.cp.x)*(x-this.cp.x)+(y-this.cp.y)*(y-this.cp.y)&lt;=this.r*this.r;\n    };\n    // 八分法画圆\n    this.<span class=\"hljs-built_in\">draw</span> = function (paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>) {\n        this.<span class=\"hljs-built_in\">color</span> = <span class=\"hljs-built_in\">color</span>?<span class=\"hljs-built_in\">color</span>:this.<span class=\"hljs-built_in\">color</span>;\n        this.<span class=\"hljs-built_in\">linewidth</span> = <span class=\"hljs-built_in\">linewidth</span>?<span class=\"hljs-built_in\">linewidth</span>:this.<span class=\"hljs-built_in\">linewidth</span>;\n        <span class=\"hljs-built_in\">color</span> = this.<span class=\"hljs-built_in\">color</span>; <span class=\"hljs-built_in\">linewidth</span> = this.<span class=\"hljs-built_in\">linewidth</span>;\n        //console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-built_in\">color</span>);\n        <span class=\"hljs-built_in\">var</span> r = this.r, cp = this.cp,\n            d = <span class=\"hljs-number\">1</span> - r, p = <span class=\"hljs-built_in\">new</span> Shape.Point(<span class=\"hljs-number\">0</span>, r);\n        <span class=\"hljs-keyword\">while</span> (p.x &lt;= p.y) {\n            <span class=\"hljs-built_in\">new</span> Shape.Point(cp.x + p.x, cp.y + p.y).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n            <span class=\"hljs-built_in\">new</span> Shape.Point(cp.x + p.x, cp.y - p.y).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n            <span class=\"hljs-built_in\">new</span> Shape.Point(cp.x - p.x, cp.y + p.y).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n            <span class=\"hljs-built_in\">new</span> Shape.Point(cp.x - p.x, cp.y - p.y).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n            <span class=\"hljs-built_in\">new</span> Shape.Point(cp.x + p.y, cp.y + p.x).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n            <span class=\"hljs-built_in\">new</span> Shape.Point(cp.x + p.y, cp.y - p.x).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n            <span class=\"hljs-built_in\">new</span> Shape.Point(cp.x - p.y, cp.y + p.x).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n            <span class=\"hljs-built_in\">new</span> Shape.Point(cp.x - p.y, cp.y - p.x).<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>, <span class=\"hljs-built_in\">linewidth</span>);\n            p.x++;\n            <span class=\"hljs-keyword\">if</span> (d &lt; <span class=\"hljs-number\">0</span>) d = d + <span class=\"hljs-number\">2</span> * p.x + <span class=\"hljs-number\">1</span>;\n            <span class=\"hljs-keyword\">else</span> {\n                p.y--;\n                d = d + <span class=\"hljs-number\">2</span> * p.x - <span class=\"hljs-number\">2</span> * p.y + <span class=\"hljs-number\">1</span>;\n            }\n        }\n        <span class=\"hljs-built_in\">return</span> this;\n    };\n    //种子填充算法 深度优先搜索，基于栈，isam表示是否含动画填充效果\n    this.dfsFill = function (paint,p,<span class=\"hljs-built_in\">color</span>,isam) {\n        isam = isam || <span class=\"hljs-literal\">false</span>;\n        <span class=\"hljs-built_in\">var</span> stack = [p],hashmap = {},container=[];\n        <span class=\"hljs-keyword\">while</span> (stack.<span class=\"hljs-built_in\">length</span> !== <span class=\"hljs-number\">0</span>){\n            p = stack.<span class=\"hljs-built_in\">pop</span>();\n            <span class=\"hljs-keyword\">if</span>(isam)\n                container.<span class=\"hljs-built_in\">push</span>(p);\n            <span class=\"hljs-keyword\">else</span>\n                p.<span class=\"hljs-built_in\">draw</span>(paint,<span class=\"hljs-built_in\">color</span>);\n            [<span class=\"hljs-built_in\">new</span> Shape.Point(p.x,p.y-<span class=\"hljs-number\">1</span>), <span class=\"hljs-built_in\">new</span> Shape.Point(p.x-<span class=\"hljs-number\">1</span>,p.y), <span class=\"hljs-built_in\">new</span> Shape.Point(p.x,p.y+<span class=\"hljs-number\">1</span>), <span class=\"hljs-built_in\">new</span> Shape.Point(p.x+<span class=\"hljs-number\">1</span>,p.y)]\n                .forEach(ele=&gt;{\n                    <span class=\"hljs-keyword\">if</span>(this.isIn(ele) &amp;&amp; !hashmap[ele]) {\n                        stack.<span class=\"hljs-built_in\">push</span>(ele);\n                        hashmap[ele] = hashmap[ele]+<span class=\"hljs-number\">1</span> || <span class=\"hljs-number\">0</span>;\n                    }\n                });\n        }\n        console.<span class=\"hljs-built_in\">log</span>(hashmap);\n        <span class=\"hljs-keyword\">if</span>(isam) {\n            <span class=\"hljs-built_in\">var</span> animate = requestAnimationFrame;\n            animate(function () {\n                <span class=\"hljs-keyword\">if</span> (!container.<span class=\"hljs-built_in\">length</span>) <span class=\"hljs-built_in\">return</span>;\n                container.shift().<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>);container.shift().<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>);\n                container.shift().<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>);container.shift().<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>);\n                container.shift().<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>);container.shift().<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>);\n                container.shift().<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>);container.shift().<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>);\n                animate(arguments.callee);\n            })\n        }\n    };\n    //种子填充算法 广度优先搜索，基于队列。\n    this.bfsFill = function (paint,p,<span class=\"hljs-built_in\">color</span>,isam) {\n        isam = isam || <span class=\"hljs-literal\">false</span>;\n        <span class=\"hljs-built_in\">var</span> queue = [p],hashmap = {},container=[];\n        <span class=\"hljs-keyword\">while</span> (queue.<span class=\"hljs-built_in\">length</span> !== <span class=\"hljs-number\">0</span>){\n            p = queue.shift();\n            <span class=\"hljs-keyword\">if</span>(isam)\n                container.<span class=\"hljs-built_in\">push</span>(p);\n            <span class=\"hljs-keyword\">else</span>\n                p.<span class=\"hljs-built_in\">draw</span>(paint,<span class=\"hljs-built_in\">color</span>);\n            [<span class=\"hljs-built_in\">new</span> Shape.Point(p.x,p.y-<span class=\"hljs-number\">1</span>), <span class=\"hljs-built_in\">new</span> Shape.Point(p.x-<span class=\"hljs-number\">1</span>,p.y), <span class=\"hljs-built_in\">new</span> Shape.Point(p.x,p.y+<span class=\"hljs-number\">1</span>), <span class=\"hljs-built_in\">new</span> Shape.Point(p.x+<span class=\"hljs-number\">1</span>,p.y)]\n                .forEach(ele=&gt;{\n                    <span class=\"hljs-keyword\">if</span>(this.isIn(ele) &amp;&amp; !hashmap[ele]) {\n                        queue.<span class=\"hljs-built_in\">push</span>(ele);\n                        hashmap[ele] = hashmap[ele]+<span class=\"hljs-number\">1</span> || <span class=\"hljs-number\">0</span>;\n                    }\n                });\n        }\n        console.<span class=\"hljs-built_in\">log</span>(hashmap);\n        <span class=\"hljs-keyword\">if</span>(isam) {\n            <span class=\"hljs-built_in\">var</span> animate = requestAnimationFrame;\n            animate(function () {\n                <span class=\"hljs-keyword\">if</span> (!container.<span class=\"hljs-built_in\">length</span>) <span class=\"hljs-built_in\">return</span>;\n                container.shift().<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>);container.shift().<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>);\n                container.shift().<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>);container.shift().<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>);\n                container.shift().<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>);container.shift().<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>);\n                container.shift().<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>);container.shift().<span class=\"hljs-built_in\">draw</span>(paint, <span class=\"hljs-built_in\">color</span>);\n                animate(arguments.callee);\n            })\n        }\n    }\n}\n</code></pre><p>路径类代码</p>\n<pre><code>Path: function (points) {\n    <span class=\"hljs-keyword\">this</span>.ps = points;\n    <span class=\"hljs-keyword\">this</span>.move = function(offsetX,offsetY){\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-keyword\">this</span>.ps.length;i++){\n            <span class=\"hljs-keyword\">this</span>.ps[i].x+=offsetX;\n            <span class=\"hljs-keyword\">this</span>.ps[i].y+=offsetY;\n        }\n    };\n    <span class=\"hljs-keyword\">this</span>.isIn = function (point) {\n        <span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-keyword\">this</span>.ps[<span class=\"hljs-number\">0</span>];\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">1</span>;i&lt;<span class=\"hljs-keyword\">this</span>.ps.length;i++){\n            <span class=\"hljs-keyword\">if</span>(new Shape.Line(p,<span class=\"hljs-keyword\">this</span>.ps[i]).isIn(point))\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            p = <span class=\"hljs-keyword\">this</span>.ps[i];\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    };\n    <span class=\"hljs-comment\">// 调用canvas提供的api</span>\n    <span class=\"hljs-keyword\">this</span>.draw = function (paint,color,linewidth) {\n        <span class=\"hljs-keyword\">this</span>.color = color?color:<span class=\"hljs-keyword\">this</span>.color;\n        <span class=\"hljs-keyword\">this</span>.linewidth = linewidth?linewidth:<span class=\"hljs-keyword\">this</span>.linewidth;\n        color = <span class=\"hljs-keyword\">this</span>.color; linewidth = <span class=\"hljs-keyword\">this</span>.linewidth;\n        <span class=\"hljs-comment\">//console.log(color);</span>\n        <span class=\"hljs-keyword\">var</span> arr = <span class=\"hljs-keyword\">this</span>.ps;\n        <span class=\"hljs-keyword\">if</span>(arr.length==<span class=\"hljs-number\">0</span>)  <span class=\"hljs-keyword\">return</span>;\n        paint.beginPath();\n        paint.strokeStyle = color ? color : <span class=\"hljs-string\">'black'</span>;\n        paint.lineWidth = linewidth ? linewidth : <span class=\"hljs-number\">1</span>;\n        paint.moveTo(arr[<span class=\"hljs-number\">0</span>].x,arr[<span class=\"hljs-number\">0</span>].y);\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i =<span class=\"hljs-number\">1</span>;i&lt;arr.length;i++){\n            paint.lineTo(arr[i].x,arr[i].y);\n        }\n        paint.stroke();\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n    }\n}\n</code></pre><p><code>canvas.js: 包含其他一些对事件的绑定或者对控件的控制等代码</code></p>\n<p>选中图形进行拖动函数</p>\n<pre><code>dragMoveHandle = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> f1 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">e</span>)</span>{\n    <span class=\"hljs-keyword\">var</span> x = e.offsetX, y = e.offsetY;\n    <span class=\"hljs-keyword\">var</span> v = Tool.getInFirstShape(<span class=\"hljs-keyword\">new</span> Shape.Point(x,y));\n    <span class=\"hljs-keyword\">if</span>(v){\n    <span class=\"hljs-keyword\">var</span> f2 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e2</span>) </span>{\n        <span class=\"hljs-keyword\">if</span>(e2.buttons==<span class=\"hljs-number\">1</span>){\n        <span class=\"hljs-keyword\">var</span> offsetx = e2.offsetX-x, offsety = e2.offsetY-y;\n        x=e2.offsetX; y = e2.offsetY;\n        v.move(offsetx,offsety);\n        Tool.refresh();\n        }\n    },f3 = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e3</span>) </span>{\n        <span class=\"hljs-keyword\">var</span> offsetx = e3.offsetX-x, offsety = e3.offsetY-y;\n        v.move(offsetx,offsety);\n        Tool.refresh();\n        <span class=\"hljs-comment\">// e3.stopPropagation();</span>\n        $(<span class=\"hljs-keyword\">this</span>).off(<span class=\"hljs-string\">'mousemove'</span>,f2).off(<span class=\"hljs-string\">'mouseup'</span>,f3);\n    };\n    $(paint.canvas).on(<span class=\"hljs-string\">'mousemove'</span>,f2).on(<span class=\"hljs-string\">'mouseup'</span>,f3).off(<span class=\"hljs-string\">'mousedown'</span>,f1);\n    }<span class=\"hljs-keyword\">else</span>\n    $(<span class=\"hljs-string\">'[role=opType-item]'</span>).removeClass(<span class=\"hljs-string\">'active'</span>);\n}\n$(paint.canvas).on(<span class=\"hljs-string\">'mousedown'</span>,f1)\n}\n</code></pre><p>关于Tool对象</p>\n<pre><code>Tool = {\n    getInFirstShape : function(p){\n        <span class=\"hljs-keyword\">var</span> f = function(d){\n            <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i =<span class=\"hljs-number\">0</span>;i&lt; d.length;i++){\n                <span class=\"hljs-keyword\">if</span>(d[i].isIn(p))<span class=\"hljs-comment\">//点p是否在d[i]图形对象中？</span>\n                    <span class=\"hljs-keyword\">return</span> d[i];\n            }\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        };\n        <span class=\"hljs-keyword\">var</span> r;\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> d <span class=\"hljs-keyword\">in</span> paint.<span class=\"hljs-keyword\">data</span>)\n            <span class=\"hljs-comment\">//paint.data 表示存在于画布中的所有图形对象</span>\n            <span class=\"hljs-keyword\">if</span>((r=f(paint.<span class=\"hljs-keyword\">data</span>[d]))!=<span class=\"hljs-literal\">false</span>)\n                <span class=\"hljs-keyword\">return</span> r;\n    },\n    <span class=\"hljs-comment\">// 重新绘制</span>\n    refresh : function () {\n        paint.clearRect(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,paint.canvas.width,paint.canvas.height);\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i =<span class=\"hljs-number\">0</span>;i&lt;paint.<span class=\"hljs-keyword\">data</span>.Paths.length;i++)\n            paint.<span class=\"hljs-keyword\">data</span>.Paths[i].draw(paint);\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i =<span class=\"hljs-number\">0</span>;i&lt;paint.<span class=\"hljs-keyword\">data</span>.Lines.length;i++)\n            paint.<span class=\"hljs-keyword\">data</span>.Lines[i].draw(paint);\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i =<span class=\"hljs-number\">0</span>;i&lt;paint.<span class=\"hljs-keyword\">data</span>.Circles.length;i++)\n            paint.<span class=\"hljs-keyword\">data</span>.Circles[i].draw(paint);\n    }\n}\n</code></pre><h3 id=\"-\">不足之处</h3>\n<ol>\n<li>对于<code>Line</code>的<code>isIn</code>方法，未考虑到线宽的因素，用户很难准确选中线段</li>\n<li>对于拖动图形的事件处理逻辑较复杂。</li>\n<li>对于图形类中未使用到<code>js</code>中的原型与原型继承，降低了代码复用度。</li>\n</ol>\n<h2 id=\"-\">三次贝赛尔曲线应用-绘制平面动态花瓣</h2>\n<h3 id=\"-\">介绍</h3>\n<p>主要运用HTML5 canvas API与相关图形学知识实现的平面动态花瓣绘制。</p>\n<h3 id=\"-\">演示图片</h3>\n<p><img src=\"/images/gif2.gif\" alt=\"img\"></p>\n<h3 id=\"-\">代码解释</h3>\n<ul>\n<li>核心代码<pre><code class=\"lang-javascript\">function Flower(c,petals,size,x,y,rotate){\n  <span class=\"hljs-keyword\">this</span>.c = c || [<span class=\"hljs-number\">255</span>,<span class=\"hljs-number\">255</span>,<span class=\"hljs-number\">255</span>];\n  <span class=\"hljs-keyword\">this</span>.petals = petals || <span class=\"hljs-number\">4</span>;\n  <span class=\"hljs-keyword\">this</span>.size = size || <span class=\"hljs-number\">5</span>;\n  <span class=\"hljs-keyword\">this</span>.x = x || <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">this</span>.y = y || <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">this</span>.rotate = rotate || <span class=\"hljs-number\">0</span>;\n}\nFlower.prototype.draw = function(){\n  <span class=\"hljs-keyword\">var</span> _rad = <span class=\"hljs-keyword\">this</span>.size,_num_pts=<span class=\"hljs-keyword\">this</span>.petals,_x=<span class=\"hljs-keyword\">this</span>.x,_y=<span class=\"hljs-keyword\">this</span>.y,c=<span class=\"hljs-keyword\">this</span>.c;\n  ctx.save();\n  ctx.shadowBlur = <span class=\"hljs-number\">30</span>; <span class=\"hljs-comment\">//阴影程度</span>\n  ctx.lineWidth = <span class=\"hljs-number\">1</span>;\n  ctx.shadowColor = utils.rgba(c[<span class=\"hljs-number\">0</span>],c[<span class=\"hljs-number\">1</span>],c[<span class=\"hljs-number\">2</span>],<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">//阴影颜色</span>\n  ctx.fillStyle = utils.rgba(c[<span class=\"hljs-number\">0</span>],c[<span class=\"hljs-number\">1</span>],c[<span class=\"hljs-number\">2</span>],<span class=\"hljs-number\">.6</span>); <span class=\"hljs-comment\">//填充颜色</span>\n  c2 = c.map((x)=&gt;Math.floor(x/<span class=\"hljs-number\">1.6</span>));           <span class=\"hljs-comment\">//lambda表达式写法</span>\n  ctx.strokeStyle = utils.rgba(c2[<span class=\"hljs-number\">0</span>],c2[<span class=\"hljs-number\">1</span>],c2[<span class=\"hljs-number\">2</span>],<span class=\"hljs-number\">1</span>);  <span class=\"hljs-comment\">//边框颜色</span>\n  <span class=\"hljs-keyword\">var</span> pts = [];\n  <span class=\"hljs-keyword\">var</span> _a = <span class=\"hljs-keyword\">this</span>.rotate+(tick*<span class=\"hljs-number\">1</span>);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span> ; i &lt;= _num_pts ; i++){<span class=\"hljs-comment\">//增量法提高效率</span>\n      pts.push({x:utils.P2L(_rad, _a).x,y:utils.P2L(_rad, _a).y}); <span class=\"hljs-comment\">//P2L将极坐标转换为平面坐标</span>\n      _a += (<span class=\"hljs-number\">360</span>/_num_pts);\n  }\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">1</span> ; i&lt;= _num_pts; i+=<span class=\"hljs-number\">2</span>){\n      idx= i%_num_pts;\n      ctx.beginPath();<span class=\"hljs-comment\">//开始绘制</span>\n      ctx.moveTo(_x,_y);<span class=\"hljs-comment\">//起点为(_x,_y)</span>\n      ctx.bezierCurveTo(_x+pts[i<span class=\"hljs-number\">-1</span>].x,_y+pts[i<span class=\"hljs-number\">-1</span>].y,_x+pts[idx+<span class=\"hljs-number\">1</span>].x,_y+pts[idx+<span class=\"hljs-number\">1</span>].y,_x,_y);<span class=\"hljs-comment\">//绘制贝塞尔曲线</span>\n      ctx.stroke();<span class=\"hljs-comment\">//闭合图形边框</span>\n      ctx.fill();<span class=\"hljs-comment\">//填充图形</span>\n  }\n  ctx.restore();\n}\nHTMLCanvasElement.prototype.magicBg = function(){\n  <span class=\"hljs-keyword\">var</span> ctx = <span class=\"hljs-keyword\">this</span>.getContext(<span class=\"hljs-string\">'2d'</span>);\n  <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-keyword\">this</span>.grd){\n      <span class=\"hljs-comment\">//实现从画布中心往外呈圆形扩散，渐变。</span>\n      <span class=\"hljs-keyword\">this</span>.grd=ctx.createRadialGradient(<span class=\"hljs-keyword\">this</span>.width/<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">this</span>.height/<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">this</span>.width/<span class=\"hljs-number\">2</span>,<span class=\"hljs-keyword\">this</span>.height/<span class=\"hljs-number\">2</span>,Math.min(<span class=\"hljs-keyword\">this</span>.width,<span class=\"hljs-keyword\">this</span>.height)/<span class=\"hljs-number\">1.2</span>);\n      <span class=\"hljs-keyword\">this</span>.grd.addColorStop(<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">\"rgba(255,255,255,.25)\"</span>);\n      <span class=\"hljs-keyword\">this</span>.grd.addColorStop(<span class=\"hljs-number\">1</span>,<span class=\"hljs-keyword\">this</span>.utils.rgba(<span class=\"hljs-number\">200</span>+<span class=\"hljs-keyword\">this</span>.utils.randomInt(<span class=\"hljs-number\">56</span>),<span class=\"hljs-number\">200</span>+<span class=\"hljs-keyword\">this</span>.utils.randomInt(<span class=\"hljs-number\">56</span>),<span class=\"hljs-number\">200</span>+<span class=\"hljs-keyword\">this</span>.utils.randomInt(<span class=\"hljs-number\">56</span>),<span class=\"hljs-number\">.65</span>));\n  }\n  ctx.save();\n  ctx.clearRect(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">this</span>.width,<span class=\"hljs-keyword\">this</span>.height);\n  ctx.fillStyle = <span class=\"hljs-keyword\">this</span>.grd;\n  ctx.fillRect(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,<span class=\"hljs-keyword\">this</span>.width,<span class=\"hljs-keyword\">this</span>.height);\n  ctx.restore();\n}\n</code></pre>\n</li>\n<li>Flower对象解释</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>默认</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>c</code></td>\n<td>花瓣的颜色</td>\n<td>[255,255,255]</td>\n<td>Array</td>\n</tr>\n<tr>\n<td><code>petals</code></td>\n<td>花瓣个数</td>\n<td>4</td>\n<td>Number</td>\n</tr>\n<tr>\n<td><code>size</code></td>\n<td>半径大小</td>\n<td>5</td>\n<td>Number</td>\n</tr>\n<tr>\n<td><code>x</code></td>\n<td>中心 x 坐标</td>\n<td>0</td>\n<td>Number</td>\n</tr>\n<tr>\n<td><code>y</code></td>\n<td>中心 y 坐标</td>\n<td>0</td>\n<td>Number</td>\n</tr>\n<tr>\n<td><code>rotate</code></td>\n<td>绕中心旋转角度</td>\n<td>0</td>\n<td>Number(单位：度)</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><code>Flower.draw</code> 方法解释</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>_rad</code></td>\n<td>radix，对应<code>size</code></td>\n</tr>\n<tr>\n<td><code>_num_pts</code></td>\n<td>对应<code>petals</code></td>\n</tr>\n<tr>\n<td><code>_x</code></td>\n<td>对应<code>x</code></td>\n</tr>\n<tr>\n<td><code>_y</code></td>\n<td>对应<code>y</code></td>\n</tr>\n<tr>\n<td><code>c</code></td>\n<td>对应<code>c</code></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>关于贝塞尔曲线，<a href=\"http://bbs.csdn.net/topics/390358020\">参考资料</a></li>\n</ul>\n<p><img src=\"/images/bezier3.gif\" alt=\"IMG\"></p>\n<p><center>图：三次贝塞尔曲线动态绘制效果</center>\n<img src=\"/htm/images/canvas1.png\" alt=\"IMG\"></p>\n<p><center>图：花瓣与其贝塞尔曲线控制点</center></p>\n<ul>\n<li>怎么使用？</li>\n</ul>\n<ol>\n<li><code>&lt;script src=&#39;drawflower.js&#39;&gt;&lt;/script&gt;</code></li>\n<li><code>canvas.drawFlower(option);</code></li>\n</ol>\n<pre><code class=\"lang-javascript\">//default option\n{\n<span class=\"hljs-attr\">    animate:</span><span class=\"hljs-literal\">false</span>,\n<span class=\"hljs-attr\">    rotate:</span><span class=\"hljs-number\">90</span>,\n<span class=\"hljs-attr\">    randomSize:</span><span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-attr\">    randomColor:</span><span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-attr\">    randomPetals:</span> <span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-attr\">    pos:</span>{\n<span class=\"hljs-attr\">        x:</span>this.width/<span class=\"hljs-number\">2</span>,\n<span class=\"hljs-attr\">        y:</span>this.height/<span class=\"hljs-number\">2</span>\n    }\n}\n</code></pre>\n<p>or</p>\n<pre><code class=\"lang-javascript\">{\n<span class=\"hljs-attr\">    animate:</span><span class=\"hljs-literal\">true</span>,\n<span class=\"hljs-attr\">    rotate:</span><span class=\"hljs-bullet\">-20</span>,\n<span class=\"hljs-attr\">    randomSize:</span><span class=\"hljs-literal\">false</span>,\n<span class=\"hljs-attr\">    size:</span><span class=\"hljs-number\">10</span>,\n<span class=\"hljs-attr\">    randomColor:</span><span class=\"hljs-literal\">false</span>,\n<span class=\"hljs-attr\">    color:</span>[<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">100</span>,<span class=\"hljs-number\">100</span>],\n<span class=\"hljs-attr\">    randomPetals:</span> <span class=\"hljs-literal\">false</span>,\n<span class=\"hljs-attr\">    petals:</span><span class=\"hljs-number\">6</span>,\n<span class=\"hljs-attr\">    pos:</span>{\n<span class=\"hljs-attr\">        x:</span><span class=\"hljs-number\">0</span>,\n<span class=\"hljs-attr\">        y:</span><span class=\"hljs-number\">0</span>\n    }\n}\n</code></pre>\n<h2 id=\"-\">动态绘制三次贝赛尔曲线</h2>\n<h3 id=\"-\">介绍</h3>\n<p>应用canvas API, 事件绑定, 达到动态绘制三次贝赛尔曲线效果。</p>\n<h3 id=\"-\">演示图片</h3>\n<p><img src=\"/images/gif3.gif\" alt=\"img\"></p>\n<h3 id=\"-\">代码解释</h3>\n<p>自己定义的<code>Pos</code> <code>Rect</code> <code>Circle</code> 类</p>\n<pre><code class=\"lang-javascript\">function Pos(x,y){<span class=\"hljs-keyword\">this</span>.x=x;<span class=\"hljs-keyword\">this</span>.y=y;}\nfunction Circle(p,r){<span class=\"hljs-keyword\">this</span>.p=p;<span class=\"hljs-keyword\">this</span>.r=r;}\nCircle.prototype.draw = function(sty){\n    ctx.save();\n    ctx.strokeStyle=sty||<span class=\"hljs-string\">'blue'</span>;\n    ctx.beginPath();\n    ctx.arc(<span class=\"hljs-keyword\">this</span>.p.x, <span class=\"hljs-keyword\">this</span>.p.y, <span class=\"hljs-keyword\">this</span>.r, <span class=\"hljs-number\">0</span>, Math.PI * <span class=\"hljs-number\">2</span>, <span class=\"hljs-literal\">true</span>);\n    ctx.stroke();\n    ctx.restore();\n}\n<span class=\"hljs-comment\">// p is in Circle?</span>\nCircle.prototype.around=function(p){\n    <span class=\"hljs-keyword\">return</span> (p.x-<span class=\"hljs-keyword\">this</span>.p.x)*(p.x-<span class=\"hljs-keyword\">this</span>.p.x)+ (p.y-<span class=\"hljs-keyword\">this</span>.p.y)*(p.y-<span class=\"hljs-keyword\">this</span>.p.y)&lt;=<span class=\"hljs-keyword\">this</span>.r*<span class=\"hljs-keyword\">this</span>.r;\n}\nfunction Rect(p,w,h){<span class=\"hljs-keyword\">this</span>.p=p;<span class=\"hljs-keyword\">this</span>.w=w;<span class=\"hljs-keyword\">this</span>.h=h;};\nRect.prototype.draw = function (style) {\n    ctx.save();\n    ctx.strokeStyle=style||<span class=\"hljs-string\">'blue'</span>;\n    <span class=\"hljs-keyword\">var</span> v = <span class=\"hljs-keyword\">this</span>.w&gt;&gt;&gt; <span class=\"hljs-number\">1</span>,t = <span class=\"hljs-keyword\">this</span>.h&gt;&gt;&gt;<span class=\"hljs-number\">1</span>;\n    ctx.strokeRect(<span class=\"hljs-keyword\">this</span>.p.x-v, <span class=\"hljs-keyword\">this</span>.p.y-t,<span class=\"hljs-keyword\">this</span>.w,<span class=\"hljs-keyword\">this</span>.h);\n    ctx.restore();\n}\n<span class=\"hljs-comment\">// p is in Rect?</span>\nRect.prototype.around = function (p) {\n    <span class=\"hljs-keyword\">var</span> v = <span class=\"hljs-keyword\">this</span>.w&gt;&gt;&gt; <span class=\"hljs-number\">1</span>,t = <span class=\"hljs-keyword\">this</span>.h&gt;&gt;&gt;<span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">return</span> p.x&gt;=<span class=\"hljs-keyword\">this</span>.p.x-v &amp;&amp; p.x&lt;=<span class=\"hljs-keyword\">this</span>.p.x+v &amp;&amp; p.y&gt;=<span class=\"hljs-keyword\">this</span>.p.y-t &amp;&amp; p.y&lt;=<span class=\"hljs-keyword\">this</span>.p.y+t;\n}\n</code></pre>\n<p>初始化</p>\n<pre><code class=\"lang-javascript\">var midP = new Pos(window.innerWidth&gt;&gt;&gt;<span class=\"hljs-number\">1</span>,window.innerHeight&gt;&gt;&gt;<span class=\"hljs-number\">1</span>),\n    sP = new Circle(new Pos(midP.x<span class=\"hljs-number\">-100</span>,midP.y<span class=\"hljs-number\">-100</span>),<span class=\"hljs-number\">4</span>),\n    cP1= new Rect(new Pos(midP.x<span class=\"hljs-number\">-80</span>,midP.y+<span class=\"hljs-number\">10</span>),<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">8</span>),\n    cP2= new Rect(new Pos(midP.x+<span class=\"hljs-number\">80</span>,midP.y+<span class=\"hljs-number\">20</span>),<span class=\"hljs-number\">8</span>,<span class=\"hljs-number\">8</span>),\n    eP = new Circle(new Pos(midP.x+<span class=\"hljs-number\">100</span>,midP.y+<span class=\"hljs-number\">100</span>),<span class=\"hljs-number\">4</span>);\n</code></pre>\n<p>绘制三次贝塞尔曲线</p>\n<pre><code class=\"lang-javascript\">function drawBezier(ps){\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(ps[<span class=\"hljs-number\">0</span>].x,ps[<span class=\"hljs-number\">0</span>].y);\n    ctx.bezierCurveTo(ps[<span class=\"hljs-number\">1</span>].x,ps[<span class=\"hljs-number\">1</span>].y,ps[<span class=\"hljs-number\">2</span>].x,ps[<span class=\"hljs-number\">2</span>].y,ps[<span class=\"hljs-number\">3</span>].x,ps[<span class=\"hljs-number\">3</span>].y);\n    ctx.stroke();\n    <span class=\"hljs-comment\">// 自己实现的绘制虚线方法</span>\n    ctx.dashedLineTo(ps[<span class=\"hljs-number\">0</span>].x,ps[<span class=\"hljs-number\">0</span>].y,ps[<span class=\"hljs-number\">1</span>].x,ps[<span class=\"hljs-number\">1</span>].y);\n    ctx.dashedLineTo(ps[<span class=\"hljs-number\">3</span>].x,ps[<span class=\"hljs-number\">3</span>].y,ps[<span class=\"hljs-number\">2</span>].x,ps[<span class=\"hljs-number\">2</span>].y);\n    ctx.restore();\n}\n</code></pre>\n<p><code>ctx.dashedLineTo</code>方法</p>\n<pre><code class=\"lang-javascript\">CanvasRenderingContext2D.prototype.dashedLineTo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">fromX, fromY, toX, toY, pattern</span>) </span>{\n    <span class=\"hljs-comment\">// default interval distance -&gt; 5px</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> pattern === <span class=\"hljs-string\">\"undefined\"</span>) {\n        pattern = <span class=\"hljs-number\">5</span>;\n    }\n    <span class=\"hljs-comment\">// calculate the delta x and delta y</span>\n    <span class=\"hljs-keyword\">var</span> dx = (toX - fromX);\n    <span class=\"hljs-keyword\">var</span> dy = (toY - fromY);\n    <span class=\"hljs-keyword\">var</span> distance = <span class=\"hljs-built_in\">Math</span>.floor(<span class=\"hljs-built_in\">Math</span>.sqrt(dx*dx + dy*dy));\n    <span class=\"hljs-keyword\">var</span> dashlineInteveral = (pattern &lt;= <span class=\"hljs-number\">0</span>) ? distance : (distance/pattern);\n    <span class=\"hljs-keyword\">var</span> deltay = (dy/distance) * pattern;\n    <span class=\"hljs-keyword\">var</span> deltax = (dx/distance) * pattern;\n\n    <span class=\"hljs-comment\">// draw dash line</span>\n    <span class=\"hljs-keyword\">this</span>.beginPath();\n    <span class=\"hljs-keyword\">var</span> f = <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">while</span> (dashlineInteveral--&gt;<span class=\"hljs-number\">0</span>){\n        <span class=\"hljs-keyword\">if</span>(f) {\n            <span class=\"hljs-keyword\">this</span>.lineTo(fromX, fromY);\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">this</span>.moveTo(fromX, fromY);\n        }\n        fromX += deltax; fromY += deltay; <span class=\"hljs-comment\">// 增量法</span>\n        f = <span class=\"hljs-number\">1</span>-f;\n    }\n    <span class=\"hljs-keyword\">this</span>.stroke();\n};\n</code></pre>\n<p>鼠标事件绑定处理</p>\n<pre><code class=\"lang-javascript\">canvas.addEventListener(<span class=\"hljs-string\">'mousedown'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e1</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> p1 = <span class=\"hljs-keyword\">new</span> Pos(e1.offsetX,e1.offsetY),c;\n    [sP,cP1,cP2,eP].every(<span class=\"hljs-function\"><span class=\"hljs-params\">ele</span>=&gt;</span>{\n        <span class=\"hljs-keyword\">if</span>(ele.around(p1)){\n            c = ele;\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    });\n    <span class=\"hljs-keyword\">if</span>(c){\n        c.draw(<span class=\"hljs-string\">'red'</span>);\n        canvas.addEventListener(<span class=\"hljs-string\">'mousemove'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n            <span class=\"hljs-keyword\">this</span>.mousemove = <span class=\"hljs-built_in\">arguments</span>.callee;\n            <span class=\"hljs-keyword\">if</span>(e.buttons===<span class=\"hljs-number\">1</span>){<span class=\"hljs-comment\">// left mouse pressed down</span>\n                <span class=\"hljs-keyword\">var</span> pos = <span class=\"hljs-keyword\">new</span> Pos(e.offsetX,e.offsetY);\n                c.p = pos;\n                rePaint([c]);\n                c.draw(<span class=\"hljs-string\">'red'</span>);\n            }\n        });\n    }\n})\ncanvas.addEventListener(<span class=\"hljs-string\">'mouseup'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n    <span class=\"hljs-keyword\">this</span>.removeEventListener(<span class=\"hljs-string\">'mousemove'</span>,<span class=\"hljs-keyword\">this</span>.mousemove);\n    rePaint();\n});\n</code></pre>\n<p><code>rePaint(ignores)</code> 重新绘制函数</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// ignores 为跳过不重绘的点(Circle/Rect)</span>\n<span class=\"hljs-selector-tag\">function</span> <span class=\"hljs-selector-tag\">rePaint</span>(ignores){\n    <span class=\"hljs-selector-tag\">ctx</span><span class=\"hljs-selector-class\">.save</span>();\n    <span class=\"hljs-selector-tag\">ctx</span><span class=\"hljs-selector-class\">.clearRect</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>,canvas.width,canvas.height);\n    <span class=\"hljs-selector-tag\">if</span>(ignores==null){\n        <span class=\"hljs-selector-tag\">cP1</span><span class=\"hljs-selector-class\">.draw</span>();\n        <span class=\"hljs-selector-tag\">cP2</span><span class=\"hljs-selector-class\">.draw</span>();\n        <span class=\"hljs-selector-tag\">sP</span><span class=\"hljs-selector-class\">.draw</span>();\n        <span class=\"hljs-selector-tag\">eP</span><span class=\"hljs-selector-class\">.draw</span>();\n    }\n    <span class=\"hljs-selector-tag\">else</span> {\n        <span class=\"hljs-selector-attr\">[sP,cP1,cP2,eP]</span><span class=\"hljs-selector-class\">.forEach</span>(el=&gt;{\n            <span class=\"hljs-selector-tag\">if</span>(ignores.indexOf(el)==-<span class=\"hljs-number\">1</span>)\n                <span class=\"hljs-selector-tag\">el</span><span class=\"hljs-selector-class\">.draw</span>();\n        });\n    }\n    <span class=\"hljs-selector-tag\">drawBezier</span>([sP.p,cP1.p,cP2.p,eP.p]);\n    <span class=\"hljs-selector-tag\">ctx</span><span class=\"hljs-selector-class\">.restore</span>();\n}\n</code></pre>\n<h2 id=\"-\">三维几何体的基本变换与组合变换应用</h2>\n<h3 id=\"-\">介绍</h3>\n<p>运用前端WebGL框架<a href=\"http://three.org\">threejs</a>，结合相关矩阵变换知识完成。</p>\n<h3 id=\"-\">演示图片</h3>\n<p><img src=\"/images/gif4.gif\" alt=\"img\"></p>\n<h3 id=\"-\">代码解释</h3>\n<p><a href=\"/htm/4三维基本变换5组合变换.doc\">三维基本变换组合变换文档参考下载</a></p>\n<ol>\n<li><p>基本变换之平移变换\n <img src=\"/htm/images/doc1.png\" alt=\"/htm/doc1.png\"></p>\n<pre><code class=\"lang-javascript\"> <span class=\"hljs-keyword\">var</span> matD = <span class=\"hljs-function\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title\">THREE</span>.<span class=\"hljs-title\">Matrix4</span>();\n <span class=\"hljs-comment\">//thressjs 封装的API，产生平移变换矩阵</span>\n <span class=\"hljs-title\">matD</span>.<span class=\"hljs-title\">makeTranslation</span>(myctls[<span class=\"hljs-number\">0</span>].x,myctls[<span class=\"hljs-number\">0</span>].y,myctls[<span class=\"hljs-number\">0</span>].z);\n <span class=\"hljs-comment\">// mesh为几何体，将其矩阵与平移变换矩阵相乘</span>\n <span class=\"hljs-title\">mesh</span>.<span class=\"hljs-title\">matrix</span>.<span class=\"hljs-title\">multiply</span>(matD);</span>\n</code></pre>\n</li>\n<li><p>基本变换之比例变换\n <img src=\"/htm/images/doc2.png\" alt=\"/htm/doc2.png\"></p>\n<pre><code class=\"lang-javascript\"> <span class=\"hljs-selector-tag\">matD</span><span class=\"hljs-selector-class\">.makeScale</span>(<span class=\"hljs-selector-tag\">myctls</span><span class=\"hljs-selector-attr\">[1]</span><span class=\"hljs-selector-class\">.x</span>,<span class=\"hljs-selector-tag\">myctls</span><span class=\"hljs-selector-attr\">[1]</span><span class=\"hljs-selector-class\">.y</span>,<span class=\"hljs-selector-tag\">myctls</span><span class=\"hljs-selector-attr\">[1]</span><span class=\"hljs-selector-class\">.z</span>);\n <span class=\"hljs-selector-tag\">mesh</span><span class=\"hljs-selector-class\">.matrix</span><span class=\"hljs-selector-class\">.multiply</span>(<span class=\"hljs-selector-tag\">matD</span>);\n</code></pre>\n</li>\n<li><p>组合变换之关于任意向量旋转</p>\n<pre><code class=\"lang-javascript\"> var v3 = myctls[<span class=\"hljs-number\">2</span>].<span class=\"hljs-type\">vector</span>.toVector3();\n matD.makeRotationAxis(v3.normalize(),myctls[<span class=\"hljs-number\">2</span>].degree/<span class=\"hljs-number\">360</span>*Math.<span class=\"hljs-literal\">PI</span>)\n mesh.matrix.multiply(matD);\n</code></pre>\n</li>\n<li><p>...</p>\n</li>\n</ol>\n<h1 id=\"-\">总结</h1>\n<ol>\n<li>学习巩固了相关图形学的知识。</li>\n<li>学习了相关前端技术对图形的处理方法。</li>\n<li>对于WebGL简单入门了，以后可以往更酷炫的3D效果靠近。</li>\n</ol>\n","head":{"title":"「项目拾遗」几个计算机图形学的前端程序","date":"10 May 2016","categories":["前端"],"tags":["js","canvas","threejs"],"cover":"/images/gif1.gif"}},"「项目拾遗」简单图形处理及图形绘制":{"content":"<h1 id=\"-\">引言</h1>\n<p> 这个学期，我学习了图像处理的相关课程，对图像有了初步的认识，并且利用web知识，做了相关实践。<br>\n 在线地址：<a href=\"http://moyuyc.github.io/htm/painter/\">moyuyc.github.io/htm/painter/</a><br>\n <strong>姓名：余聪</strong><br><strong>学号：19130126</strong>\n<!--more--></p>\n<h1 id=\"-\">实现技术说明</h1>\n<p> 使用了前端HTML5 canvas API 以及后端Java Web搭建的后台服务。<br>\n 也就是说，<strong>图像处理功能既有使用JavaScript语言实现的，也有利用Java语言实现的，但是都将以网页形式展现</strong><br>\n 具体技术说明如下图所示。\n <img src=\"/images/imp.png\" alt=\"\"></p>\n<h1 id=\"-\">使用说明</h1>\n<ol>\n<li>Image Choose\n <img src=\"/images/imgp1.png\" alt=\"\"></li>\n<li>点击白色面板，选择图像起点\n <img src=\"/images/imgp2.png\" alt=\"\">\n 右侧Message出现该图片灰度分布情况</li>\n<li>操作面板解释\n <img src=\"/images/imgp3.png\" alt=\"\"></li>\n<li>注意\n <strong>对于Server操作，由于需要将图像传输给服务器，所以对于图像大小有要求，请使用下面的图片(较小)进行测试</strong>\n <img src=\"/images/sea.jpg\" alt=\"\"></li>\n</ol>\n<h1 id=\"-\">功能介绍</h1>\n<h2 id=\"-\">设置图像透明度(直接像素点操作)</h2>\n<ul>\n<li>如图\n  <img src=\"/images/imgpro1.png\" alt=\"imgpro1.png\"></li>\n<li>代码<pre><code class=\"lang-javascript\">  alphaHandle = function () {\n      setImageAlpha = function(index,alph){\n          <span class=\"hljs-keyword\">if</span>(paint.images &amp;&amp; paint.images.<span class=\"hljs-built_in\">length</span>&gt;index ) {\n              <span class=\"hljs-built_in\">var</span> <span class=\"hljs-built_in\">image</span> = paint.images[index],\n                  img = paint.getImageData(<span class=\"hljs-built_in\">image</span>.x,<span class=\"hljs-built_in\">image</span>.y,<span class=\"hljs-built_in\">image</span>.<span class=\"hljs-built_in\">width</span>,<span class=\"hljs-built_in\">image</span>.<span class=\"hljs-built_in\">height</span>);\n              <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;img.data.<span class=\"hljs-built_in\">length</span>;i+=<span class=\"hljs-number\">4</span>){\n                  // 设置alph\n                  img.data[i+<span class=\"hljs-number\">3</span>] = alph;\n              }\n              paint.<span class=\"hljs-built_in\">save</span>();\n              paint.putImageData(img,<span class=\"hljs-built_in\">image</span>.x,<span class=\"hljs-built_in\">image</span>.y);\n              paint.restore();\n          }\n      };\n      <span class=\"hljs-built_in\">var</span> alph;\n      <span class=\"hljs-keyword\">while</span>((alph=parseInt(<span class=\"hljs-built_in\">prompt</span>('please set images alpha. (<span class=\"hljs-number\">0</span>~<span class=\"hljs-number\">255</span>)',<span class=\"hljs-number\">120</span>)))&gt;<span class=\"hljs-number\">255</span> || alph&lt;<span class=\"hljs-number\">0</span>);\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;paint.images.<span class=\"hljs-built_in\">length</span>;i++)\n          setImageAlpha(i,alph);\n  };\n</code></pre>\n</li>\n</ul>\n<h2 id=\"-\">图像灰化(直接像素点操作)</h2>\n<ul>\n<li>如图\n  <img src=\"/images/imgpro2.png\" alt=\"imgpro2.png\"></li>\n<li>代码<pre><code class=\"lang-javascript\">  imgGrayHandle = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span> () {\n      paint.images.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span> (ele) {\n          var imgData = paint.getImageData(ele.x,ele.y,ele.width,ele.height);\n          for (var i=<span class=\"hljs-number\">0</span>;i&lt;imgData.<span class=\"hljs-keyword\">data</span>.length;i+=<span class=\"hljs-number\">4</span>) {\n              var r = imgData.<span class=\"hljs-keyword\">data</span>[i],g=imgData.<span class=\"hljs-keyword\">data</span>[i+<span class=\"hljs-number\">1</span>],b = imgData.<span class=\"hljs-keyword\">data</span>[i+<span class=\"hljs-number\">2</span>];\n              var <span class=\"hljs-keyword\">value</span> = (r+g+b)/<span class=\"hljs-number\">3</span>; //rgb平均值-&gt;灰度\n              imgData.<span class=\"hljs-keyword\">data</span>[i]=imgData.<span class=\"hljs-keyword\">data</span>[i+<span class=\"hljs-number\">1</span>]=imgData.<span class=\"hljs-keyword\">data</span>[i+<span class=\"hljs-number\">2</span>]=<span class=\"hljs-keyword\">value</span>;\n          }\n          paint.putImageData(imgData,ele.x,ele.y);\n      })\n  };\n</code></pre>\n</li>\n</ul>\n<h2 id=\"-\">高对比度(直接像素点操作)</h2>\n<ul>\n<li>如图\n  <img src=\"/images/imgpro3.png\" alt=\"imgpro3.png\"></li>\n<li>代码<pre><code class=\"lang-javascript\">  hgHandle = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span> () {\n      paint.images.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span> (ele) {\n          var imgData = paint.getImageData(ele.x,ele.y,ele.width,ele.height);\n          for (var i=<span class=\"hljs-number\">0</span>;i&lt;imgData.<span class=\"hljs-keyword\">data</span>.length;i+=<span class=\"hljs-number\">4</span>) {\n              // 取背景色的反作为前景色\n              imgData.<span class=\"hljs-keyword\">data</span>[i] = <span class=\"hljs-number\">255</span>-imgData.<span class=\"hljs-keyword\">data</span>[i];\n              imgData.<span class=\"hljs-keyword\">data</span>[i+<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">255</span>-imgData.<span class=\"hljs-keyword\">data</span>[i+<span class=\"hljs-number\">1</span>];\n              imgData.<span class=\"hljs-keyword\">data</span>[i+<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">255</span>-imgData.<span class=\"hljs-keyword\">data</span>[i+<span class=\"hljs-number\">2</span>];\n          }\n          paint.putImageData(imgData,ele.x,ele.y);\n      })\n  };\n</code></pre>\n</li>\n</ul>\n<h2 id=\"-\">浮雕效果(锐化滤波器)</h2>\n<ul>\n<li>如图\n  <img src=\"/images/imgpro4.png\" alt=\"imgpro4.png\"></li>\n<li>代码<pre><code class=\"lang-javascript\">  function ConvolutionMatrix(input, matrix, divisor, offset) {\n      <span class=\"hljs-comment\">// 创建一个输出的 imageData 对象</span>\n      var output = document.createElement(<span class=\"hljs-string\">\"canvas\"</span>)\n          .getContext('<span class=\"hljs-number\">2</span>d').createImageData(input);\n      var w = input.width, h = input.height;\n      var iD = input.data, oD = output.data;\n      var m = matrix;\n      <span class=\"hljs-comment\">// 对除了边缘的点之外的内部点的 RGB 进行操作，透明度在最后都设为 255</span>\n      for (var y = <span class=\"hljs-number\">1</span>; y &lt; h - <span class=\"hljs-number\">1</span>; y += <span class=\"hljs-number\">1</span>) {\n          for (var x = <span class=\"hljs-number\">1</span>; x &lt; w - <span class=\"hljs-number\">1</span>; x += <span class=\"hljs-number\">1</span>) {\n              for (var c = <span class=\"hljs-number\">0</span>; c &lt; <span class=\"hljs-number\">3</span>; c += <span class=\"hljs-number\">1</span>) {\n                  var i = (y * w + x) * <span class=\"hljs-number\">4</span> + c;\n                  oD[i] = offset\n                      + (m[<span class=\"hljs-number\">0</span>] * iD[i - w * <span class=\"hljs-number\">4</span> - <span class=\"hljs-number\">4</span>] + m[<span class=\"hljs-number\">1</span>] * iD[i - w * <span class=\"hljs-number\">4</span>] + m[<span class=\"hljs-number\">2</span>] * iD[i - w * <span class=\"hljs-number\">4</span> + <span class=\"hljs-number\">4</span>]\n                      + m[<span class=\"hljs-number\">3</span>] * iD[i - <span class=\"hljs-number\">4</span>] + m[<span class=\"hljs-number\">4</span>] * iD[i] + m[<span class=\"hljs-number\">5</span>] * iD[i + <span class=\"hljs-number\">4</span>]\n                      + m[<span class=\"hljs-number\">6</span>] * iD[i + w * <span class=\"hljs-number\">4</span> - <span class=\"hljs-number\">4</span>] + m[<span class=\"hljs-number\">7</span>] * iD[i + w * <span class=\"hljs-number\">4</span>] + m[<span class=\"hljs-number\">8</span>] * iD[i + w * <span class=\"hljs-number\">4</span> + <span class=\"hljs-number\">4</span>])\n                      / divisor;\n                  oD[(y * w + x) * <span class=\"hljs-number\">4</span> + <span class=\"hljs-number\">3</span>] = <span class=\"hljs-number\">255</span>; <span class=\"hljs-comment\">// 设置透明度</span>\n              }\n          }\n      }\n      return output;\n  };\n</code></pre>\n</li>\n</ul>\n<h2 id=\"-\">图像黑化(直接像素点操作)</h2>\n<ul>\n<li>如图\n  <img src=\"/images/imgpro5.png\" alt=\"imgpro5.png\"></li>\n<li>代码<pre><code class=\"lang-javascript\">  blackHandle = function () {\n      paint.images.forEach(function (ele) {\n          <span class=\"hljs-keyword\">var</span> imgData = paint.getImageData(ele.x,ele.y,ele.width,ele.height);\n          <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;imgData.<span class=\"hljs-keyword\">data</span>.length;i+=<span class=\"hljs-number\">4</span>) {\n              <span class=\"hljs-keyword\">var</span> r = imgData.<span class=\"hljs-keyword\">data</span>[i],g=imgData.<span class=\"hljs-keyword\">data</span>[i+<span class=\"hljs-number\">1</span>],b = imgData.<span class=\"hljs-keyword\">data</span>[i+<span class=\"hljs-number\">2</span>];\n              <span class=\"hljs-keyword\">var</span> grey = r*<span class=\"hljs-number\">0.3</span>+g*<span class=\"hljs-number\">0.59</span>+b*<span class=\"hljs-number\">0.11</span>;\n              <span class=\"hljs-comment\">// 取0或者255,非黑即白</span>\n              imgData.<span class=\"hljs-keyword\">data</span>[i] = imgData.<span class=\"hljs-keyword\">data</span>[i+<span class=\"hljs-number\">1</span>] = imgData.<span class=\"hljs-keyword\">data</span>[i+<span class=\"hljs-number\">2</span>] = grey&gt;<span class=\"hljs-number\">125</span> ? <span class=\"hljs-number\">255</span> : <span class=\"hljs-number\">0</span>;\n          }\n          paint.putImageData(imgData,ele.x,ele.y);\n      })\n  }\n</code></pre>\n</li>\n</ul>\n<h2 id=\"-\">模糊效果(线性平滑滤波器)</h2>\n<ul>\n<li>如图\n  <img src=\"/images/imgpro6.png\" alt=\"imgpro6.png\"></li>\n<li>代码<pre><code class=\"lang-javascript\">  blurHandle = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span></span>{\n      paint.images.<span class=\"hljs-keyword\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(ele)</span> </span>{\n          <span class=\"hljs-keyword\">var</span> imgData = paint.getImageData(ele.x, ele.y, ele.width, ele.height);\n          <span class=\"hljs-keyword\">var</span> blurR = <span class=\"hljs-number\">3</span>, totalnum = (<span class=\"hljs-number\">2</span> * blurR + <span class=\"hljs-number\">1</span>) * (<span class=\"hljs-number\">2</span> * blurR + <span class=\"hljs-number\">1</span>);\n          <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = blurR; i &lt; ele.height - blurR; i++)\n              <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = blurR; j &lt; ele.width - blurR; j++) {\n                  <span class=\"hljs-keyword\">var</span> totalr = <span class=\"hljs-number\">0</span>, totalg = <span class=\"hljs-number\">0</span>, totalb = <span class=\"hljs-number\">0</span>;\n                  <span class=\"hljs-comment\">//2*blurR 模糊的正方形长宽，total 范围内RGB的总和</span>\n                  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> dx = -blurR; dx &lt;= blurR; dx++)\n                      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> dy = -blurR; dy &lt;= blurR; dy++) {\n                          <span class=\"hljs-keyword\">var</span> x = i + dx\n                          <span class=\"hljs-keyword\">var</span> y = j + dy\n                          <span class=\"hljs-keyword\">var</span> p = (x * ele.width + y)*<span class=\"hljs-number\">4</span>;\n                          totalr += imgData.data[p + <span class=\"hljs-number\">0</span>]\n                          totalg += imgData.data[p + <span class=\"hljs-number\">1</span>]\n                          totalb += imgData.data[p + <span class=\"hljs-number\">2</span>]\n                      }\n                  <span class=\"hljs-keyword\">var</span> p = (i*ele.width + j)*<span class=\"hljs-number\">4</span>;\n                  imgData.data[p+<span class=\"hljs-number\">0</span>] = totalr / totalnum;\n                  imgData.data[p+<span class=\"hljs-number\">1</span>] = totalg / totalnum;\n                  imgData.data[p+<span class=\"hljs-number\">2</span>] = totalb / totalnum;\n              }\n          paint.putImageData(imgData,ele.x,ele.y);\n      });\n  };\n</code></pre>\n</li>\n</ul>\n<h2 id=\"-\">马赛克效果(平滑滤波器)</h2>\n<ul>\n<li>如图\n  <img src=\"/images/imgpro7.png\" alt=\"imgpro7.png\"></li>\n<li>代码<pre><code class=\"lang-javascript\">  mosaicHandle = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>)</span>{\n      paint.images.forEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">ele</span>) </span>{\n          <span class=\"hljs-built_in\">var</span> imgData = paint.getImageData(ele.x, ele.y, ele.width, ele.height);\n          <span class=\"hljs-built_in\">var</span> <span class=\"hljs-built_in\">size</span> = <span class=\"hljs-number\">16</span>\n          <span class=\"hljs-built_in\">var</span> totalnum = <span class=\"hljs-built_in\">size</span>*<span class=\"hljs-built_in\">size</span>;\n          <span class=\"hljs-keyword\">for</span>( <span class=\"hljs-built_in\">var</span> i = <span class=\"hljs-number\">0</span> ; i &lt; ele.height ; i += <span class=\"hljs-built_in\">size</span> )\n              <span class=\"hljs-keyword\">for</span>( <span class=\"hljs-built_in\">var</span> j = <span class=\"hljs-number\">0</span> ; j &lt; ele.width ; j += <span class=\"hljs-built_in\">size</span> ){\n                  <span class=\"hljs-built_in\">var</span> totalr = <span class=\"hljs-number\">0</span> , totalg = <span class=\"hljs-number\">0</span> , totalb = <span class=\"hljs-number\">0</span>\n                  <span class=\"hljs-comment\">//以size为大小作为一个像素方格</span>\n                  <span class=\"hljs-keyword\">for</span>( <span class=\"hljs-built_in\">var</span> dx = <span class=\"hljs-number\">0</span> ; dx &lt; <span class=\"hljs-built_in\">size</span> ; dx ++ )\n                      <span class=\"hljs-keyword\">for</span>( <span class=\"hljs-built_in\">var</span> dy = <span class=\"hljs-number\">0</span> ; dy &lt; <span class=\"hljs-built_in\">size</span> ; dy ++ ){\n                          <span class=\"hljs-built_in\">var</span> x = i + dx;\n                          <span class=\"hljs-built_in\">var</span> y = j + dy;\n                          <span class=\"hljs-built_in\">var</span> p = x*ele.width + y\n                          totalr += imgData.data[p*<span class=\"hljs-number\">4</span>+<span class=\"hljs-number\">0</span>]\n                          totalg += imgData.data[p*<span class=\"hljs-number\">4</span>+<span class=\"hljs-number\">1</span>]\n                          totalb += imgData.data[p*<span class=\"hljs-number\">4</span>+<span class=\"hljs-number\">2</span>]\n                      }\n                  <span class=\"hljs-built_in\">var</span> p = i*ele.width+j\n                  <span class=\"hljs-built_in\">var</span> resr = totalr / totalnum\n                  <span class=\"hljs-built_in\">var</span> resg = totalg / totalnum\n                  <span class=\"hljs-built_in\">var</span> resb = totalb / totalnum;\n                  <span class=\"hljs-comment\">//将size大小内的像素点全部设为平均rgb</span>\n                  <span class=\"hljs-keyword\">for</span>( <span class=\"hljs-built_in\">var</span> dx = <span class=\"hljs-number\">0</span> ; dx &lt; <span class=\"hljs-built_in\">size</span> ; dx ++ )\n                      <span class=\"hljs-keyword\">for</span>( <span class=\"hljs-built_in\">var</span> dy = <span class=\"hljs-number\">0</span> ; dy &lt; <span class=\"hljs-built_in\">size</span> ; dy ++ ){\n                          <span class=\"hljs-built_in\">var</span> x = i + dx\n                          <span class=\"hljs-built_in\">var</span> y = j + dy\n                          <span class=\"hljs-built_in\">var</span> p = x*ele.width + y\n                          imgData.data[p*<span class=\"hljs-number\">4</span>+<span class=\"hljs-number\">0</span>] = resr\n                          imgData.data[p*<span class=\"hljs-number\">4</span>+<span class=\"hljs-number\">1</span>] = resg\n                          imgData.data[p*<span class=\"hljs-number\">4</span>+<span class=\"hljs-number\">2</span>] = resb\n                      }\n              }\n          paint.putImageData(imgData,ele.x,ele.y);\n      })\n  }\n</code></pre>\n<h2 id=\"kmenus-\">KMenus算法(矢量量化)</h2>\n</li>\n<li>说明：KMenus算法是一个聚类算法，我们可以用该算法思想，找出图像中主要的rgb颜色。（可以将rgb想象为三维空间xyz，找出图像中rgb聚集的地方）然后把属于该聚类中的所有像素点全部赋值为聚类像素值，查看效果</li>\n<li>如图\n  <img src=\"/images/imgpro8.png\" alt=\"imgpro8.png\"></li>\n<li>代码<pre><code class=\"lang-javascript\">  kMeans : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">imgData</span>)</span>{\n          <span class=\"hljs-keyword\">var</span> data = imgData.data, w = imgData.width, h = imgData.height;\n          <span class=\"hljs-keyword\">var</span> clusters = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getRandomClusters</span>(<span class=\"hljs-params\">k</span>)</span>{\n              <span class=\"hljs-keyword\">var</span> rlt = [];\n              <span class=\"hljs-keyword\">while</span>(k--&gt;<span class=\"hljs-number\">0</span>)\n                  rlt.push([randomInt(<span class=\"hljs-number\">256</span>),randomInt(<span class=\"hljs-number\">256</span>),randomInt(<span class=\"hljs-number\">256</span>)]);\n              <span class=\"hljs-keyword\">return</span> rlt;\n          })(<span class=\"hljs-number\">3</span>);\n          <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getRGBDistance</span>(<span class=\"hljs-params\">clu,rgb</span>)</span>{\n              <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">parseInt</span>(<span class=\"hljs-built_in\">Math</span>.sqrt(<span class=\"hljs-built_in\">Math</span>.pow(rgb[<span class=\"hljs-number\">0</span>]-clu[<span class=\"hljs-number\">0</span>],<span class=\"hljs-number\">2</span>)+<span class=\"hljs-built_in\">Math</span>.pow(rgb[<span class=\"hljs-number\">1</span>]-clu[<span class=\"hljs-number\">1</span>],<span class=\"hljs-number\">2</span>),<span class=\"hljs-built_in\">Math</span>.pow(rgb[<span class=\"hljs-number\">2</span>]-clu[<span class=\"hljs-number\">2</span>],<span class=\"hljs-number\">2</span>)).toFixed(<span class=\"hljs-number\">0</span>));\n          }\n          <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getCenterCluster</span>(<span class=\"hljs-params\">rgbs</span>)</span>{\n              <span class=\"hljs-keyword\">var</span> sumr= <span class=\"hljs-number\">0</span>,sumg= <span class=\"hljs-number\">0</span>,sumb=<span class=\"hljs-number\">0</span>;\n              <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i <span class=\"hljs-keyword\">in</span> rgbs){\n                  sumr+=rgbs[i][<span class=\"hljs-number\">0</span>];sumg+=rgbs[i][<span class=\"hljs-number\">1</span>];sumb+=rgbs[i][<span class=\"hljs-number\">2</span>];\n              }\n              <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-built_in\">parseInt</span>((sumr/rgbs.length).toFixed(<span class=\"hljs-number\">0</span>)),\n                  <span class=\"hljs-built_in\">parseInt</span>((sumg/rgbs.length).toFixed(<span class=\"hljs-number\">0</span>)),\n                  <span class=\"hljs-built_in\">parseInt</span>((sumb/rgbs.length).toFixed(<span class=\"hljs-number\">0</span>))]\n          }\n          <span class=\"hljs-keyword\">var</span> forNewClus = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(clusters.length),forNewData = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(clusters.length);\n          <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>) {\n              <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;forNewClus.length;i++) {\n                  forNewClus[i] = [];\n                  forNewData[i] = [];\n              }\n              <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; data.length; i += <span class=\"hljs-number\">4</span>) {\n                  <span class=\"hljs-keyword\">var</span> myCluIndex, minDist = <span class=\"hljs-built_in\">Number</span>.MAX_VALUE, rgb = [data[i], data[i + <span class=\"hljs-number\">1</span>], data[i + <span class=\"hljs-number\">2</span>]];\n                  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = <span class=\"hljs-number\">0</span>; j &lt; clusters.length; j++) {\n                      <span class=\"hljs-keyword\">var</span> dist = getRGBDistance(clusters[j], rgb);\n                      <span class=\"hljs-keyword\">if</span> (dist &lt; minDist) {\n                          myCluIndex = j;\n                          minDist = dist;\n                      }\n                  }\n                  forNewData[myCluIndex].push(i);\n                  forNewClus[myCluIndex].push(rgb);\n              }\n              <span class=\"hljs-keyword\">var</span> isUpdate=<span class=\"hljs-literal\">false</span>;\n              <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;forNewClus.length;i++) {\n                  <span class=\"hljs-keyword\">if</span>(forNewClus[i].length==<span class=\"hljs-number\">0</span>)\n                      <span class=\"hljs-keyword\">continue</span>;\n                  <span class=\"hljs-keyword\">var</span> c = getCenterCluster(forNewClus[i]);\n                  <span class=\"hljs-keyword\">if</span>(c[<span class=\"hljs-number\">0</span>]!=clusters[i][<span class=\"hljs-number\">0</span>]||c[<span class=\"hljs-number\">1</span>]!=clusters[i][<span class=\"hljs-number\">1</span>]||c[<span class=\"hljs-number\">2</span>]!=clusters[i][<span class=\"hljs-number\">2</span>]) {\n                      clusters[i] = c;\n                      isUpdate = <span class=\"hljs-literal\">true</span>;\n                  }\n              }\n              <span class=\"hljs-keyword\">if</span>(!isUpdate)\n                  <span class=\"hljs-keyword\">break</span>;\n          }\n          <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;forNewData.length;i++) {\n              <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> j=<span class=\"hljs-number\">0</span>;j&lt;forNewClus[i].length;j++){\n                  <span class=\"hljs-keyword\">var</span> val = forNewData[i][j];\n                  data[val] = clusters[i][<span class=\"hljs-number\">0</span>];\n                  data[val+<span class=\"hljs-number\">1</span>] = clusters[i][<span class=\"hljs-number\">1</span>];\n                  data[val+<span class=\"hljs-number\">2</span>] = clusters[i][<span class=\"hljs-number\">1</span>];\n              }\n          }\n          <span class=\"hljs-built_in\">console</span>.log(forNewClus,clusters);\n          <span class=\"hljs-keyword\">return</span> {<span class=\"hljs-attr\">c</span>:clusters,<span class=\"hljs-attr\">md</span>:imgData};\n      }\n</code></pre>\n<h2 id=\"-\">直方图均衡化(空域点处理)</h2>\n</li>\n<li>说明：直方图均衡化：我们把一张图片对应的rgb像素点分成3个(对应rgb)256(0-255)等级，并且将等级绘制为直方图，我们把直方图变得分布均匀，这就是直方图均衡化。这样的图片往往具有高对比度。</li>\n<li>如图\n  <img src=\"/images/imgpro9.png\" alt=\"imgpro9.png\"></li>\n<li>代码<pre><code class=\"lang-javascript\">  <span class=\"hljs-comment\">//http://blog.csdn.net/jia20003/article/details/8119563</span>\n  <span class=\"hljs-comment\">//http://hello-wangfeng.iteye.com/blog/1717150</span>\n  average: function (imgData) {\n      <span class=\"hljs-keyword\">var</span> <span class=\"hljs-keyword\">data</span> = imgData.<span class=\"hljs-keyword\">data</span>, w = imgData.width, h = imgData.height;\n      <span class=\"hljs-keyword\">var</span> histogramR = [],\n          histogramG = [],\n          histogramB = [];\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-keyword\">data</span>.length; i+=<span class=\"hljs-number\">4</span>){\n          histogramR[<span class=\"hljs-keyword\">data</span>[i]] = histogramR[<span class=\"hljs-keyword\">data</span>[i]]+<span class=\"hljs-number\">1</span> || <span class=\"hljs-number\">1</span>;\n          histogramG[<span class=\"hljs-keyword\">data</span>[i+<span class=\"hljs-number\">1</span>]] = histogramG[<span class=\"hljs-keyword\">data</span>[i+<span class=\"hljs-number\">1</span>]]+<span class=\"hljs-number\">1</span> || <span class=\"hljs-number\">1</span>;\n          histogramB[<span class=\"hljs-keyword\">data</span>[i+<span class=\"hljs-number\">2</span>]] = histogramB[<span class=\"hljs-keyword\">data</span>[i+<span class=\"hljs-number\">2</span>]]+<span class=\"hljs-number\">1</span> || <span class=\"hljs-number\">1</span>;\n      }\n      <span class=\"hljs-comment\">//直方图均衡化</span>\n      function getRate(grayHis,total,index) {\n          <span class=\"hljs-keyword\">var</span> s = <span class=\"hljs-number\">0</span>;\n          <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i=<span class=\"hljs-number\">0</span>;i&lt;index;i++){\n              <span class=\"hljs-keyword\">var</span> v = grayHis[i]||<span class=\"hljs-number\">0</span>;\n              s+=(v/total);\n          }\n          <span class=\"hljs-keyword\">return</span> Math.floor(s*<span class=\"hljs-number\">255</span>);\n      }\n      <span class=\"hljs-keyword\">var</span> total = w*h,\n          newHisR = [],\n          newHisG = [],\n          newHisB = [];\n      <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i&lt;<span class=\"hljs-number\">256</span>; i++){\n          newHisR[i] = getRate(histogramR,total,i);\n          newHisG[i] = getRate(histogramG,total,i);\n          newHisB[i] = getRate(histogramB,total,i);\n      }\n      console.log([histogramR,histogramG,histogramB],[newHisR,newHisG,newHisB]);\n      <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>; i&lt;h; i++){\n          <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> j=<span class=\"hljs-number\">0</span>; j&lt;w; j++){\n              <span class=\"hljs-keyword\">var</span> v = (i*w+j)&lt;&lt;<span class=\"hljs-number\">2</span>;\n              <span class=\"hljs-keyword\">data</span>[v] = newHisR[<span class=\"hljs-keyword\">data</span>[v]];\n              <span class=\"hljs-keyword\">data</span>[v+<span class=\"hljs-number\">1</span>]=newHisG[<span class=\"hljs-keyword\">data</span>[v+<span class=\"hljs-number\">1</span>]];\n              <span class=\"hljs-keyword\">data</span>[v+<span class=\"hljs-number\">1</span>]=newHisB[<span class=\"hljs-keyword\">data</span>[v+<span class=\"hljs-number\">2</span>]];\n          }\n      }\n      <span class=\"hljs-keyword\">return</span> imgData;\n  }\n</code></pre>\n<h2 id=\"-\">图像复原</h2>\n</li>\n<li>说明：图像在形成、记录、处理和传输过程中，由于成像系统、记录设备、传输介质和处理方法的问题，导致图像质量下降，这种现象叫图像退化。而图像复原就是对退化的图像进行处理，尽可能的复原图像的本来面目。</li>\n<li>如图\n  <img src=\"/images/r1.png\" alt=\"imgpro10.png\">\n  <img src=\"/images/r2.png\" alt=\"imgpro10.png\"></li>\n<li><p>代码</p>\n<pre><code class=\"lang-java\">  <span class=\"hljs-comment\">//图像恢复</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">int</span>[] imRestore(<span class=\"hljs-keyword\">int</span>[] pixels, <span class=\"hljs-keyword\">int</span> iw, <span class=\"hljs-keyword\">int</span> ih)\n  {\n      <span class=\"hljs-keyword\">double</span>[] newPixels = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">double</span> [iw*ih];\n      <span class=\"hljs-keyword\">double</span>[] newKernel = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">double</span> [iw*ih];\n\n      <span class=\"hljs-comment\">//初始化</span>\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>; j &lt; ih; j++)\n      {\n          <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; iw; i++)\n          {\n              newPixels[i+j*iw] = pixels[i+j*iw]&amp;<span class=\"hljs-number\">0xff</span>;\n              <span class=\"hljs-keyword\">if</span>((i&lt;<span class=\"hljs-number\">5</span>) &amp;&amp; (j&lt;<span class=\"hljs-number\">5</span>))\n                  newKernel[i+j*iw] = <span class=\"hljs-number\">1.0</span>/<span class=\"hljs-number\">25</span>;\n              <span class=\"hljs-keyword\">else</span>\n                  newKernel[i+j*iw] = <span class=\"hljs-number\">0</span>;\n          }\n      }\n\n      <span class=\"hljs-comment\">//初始化</span>\n      Complex[] <span class=\"hljs-keyword\">complex</span>   = <span class=\"hljs-keyword\">new</span> Complex[iw*ih];\n      Complex[] comKernel = <span class=\"hljs-keyword\">new</span> Complex[iw*ih];\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>;i &lt; iw*ih; i++)\n      {\n          <span class=\"hljs-keyword\">complex</span>[i]   = <span class=\"hljs-keyword\">new</span> Complex(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n          comKernel[i] = <span class=\"hljs-keyword\">new</span> Complex(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>);\n      }\n\n      <span class=\"hljs-comment\">//对原图像进行FFT (快速傅氏变换)</span>\n      fft2 = <span class=\"hljs-keyword\">new</span> FFT2();\n      fft2.setData2(iw, ih, newPixels);\n      <span class=\"hljs-keyword\">complex</span> = fft2.getFFT2();\n\n      <span class=\"hljs-comment\">//对卷积核进行FFT</span>\n      fft2 = <span class=\"hljs-keyword\">new</span> FFT2();\n      fft2.setData2(iw, ih, newKernel);\n      comKernel = fft2.getFFT2();\n\n      <span class=\"hljs-comment\">//逆滤波复原</span>\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>;j &lt; ih; j++)\n      {\n          <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; iw; i++)\n          {\n              <span class=\"hljs-keyword\">double</span> re = <span class=\"hljs-keyword\">complex</span>[i+j*iw].re;\n              <span class=\"hljs-keyword\">double</span> im = <span class=\"hljs-keyword\">complex</span>[i+j*iw].im;\n              <span class=\"hljs-keyword\">double</span> reKernel = comKernel[i+j*iw].re;\n              <span class=\"hljs-keyword\">double</span> imKernel = comKernel[i+j*iw].im;\n              <span class=\"hljs-keyword\">double</span> x = reKernel*reKernel+imKernel*imKernel;\n\n              <span class=\"hljs-keyword\">if</span>(x &gt; <span class=\"hljs-number\">1e-3</span>)\n              {\n                  <span class=\"hljs-keyword\">double</span> r = (re*reKernel+im*imKernel)/x;\n                  <span class=\"hljs-keyword\">double</span> m = (im*reKernel-re*imKernel)/x;\n                  <span class=\"hljs-keyword\">complex</span>[i+j*iw].re = r;\n                  <span class=\"hljs-keyword\">complex</span>[i+j*iw].im = m;\n              }\n          }\n      }\n\n      <span class=\"hljs-comment\">//进行FFT反变换</span>\n      fft2 = <span class=\"hljs-keyword\">new</span> FFT2();\n      fft2.setData2i(iw, ih, <span class=\"hljs-keyword\">complex</span>);\n      pixels = fft2.getPixels2i();\n      <span class=\"hljs-keyword\">return</span> pixels;\n  }\n</code></pre>\n<h2 id=\"-\">边界检测(自定义方法)</h2>\n</li>\n<li>说明：人们看一个物体是，首先感受的就是它的边缘，灰度或结构等信息的突变处称为边缘。边缘是一个区域的结束，也是另一个区域的开始，利用这种特征可以分割图像。\n  物体边缘上的这种变化可以用微分算子检测出来，通常用一阶或二阶导数来检测边缘。</li>\n<li>如图\n  <img src=\"/images/imgpro11.png\" alt=\"imgpro11.png\"></li>\n<li>代码<pre><code class=\"lang-java\">  <span class=\"hljs-comment\">//边界提取</span>\n  <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">byte</span>[] Bound(<span class=\"hljs-keyword\">byte</span> bw[], <span class=\"hljs-keyword\">int</span> iw, <span class=\"hljs-keyword\">int</span> ih)\n  {\n      <span class=\"hljs-keyword\">int</span> p, r;\n      <span class=\"hljs-keyword\">byte</span>[] tem = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-keyword\">byte</span>[iw*ih];\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">0</span>;j &lt; ih; j++)\n          <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; iw; i++)\n              tem[i+j*iw] = bw[i+j*iw];\n      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt; ih - <span class=\"hljs-number\">1</span>; j++)\n      {\n          <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt; iw - <span class=\"hljs-number\">1</span>; i++)\n          {\n              p = bw[i+j*iw];\n              <span class=\"hljs-keyword\">if</span>(p == <span class=\"hljs-number\">0</span>)<span class=\"hljs-comment\">//如果当前象素是白色, 进入下一个循环</span>\n                  <span class=\"hljs-keyword\">continue</span>;\n              <span class=\"hljs-keyword\">else</span>\n              {\n                  <span class=\"hljs-comment\">// 检查周边的8-连通域</span>\n                  r = <span class=\"hljs-number\">1</span>;\n                  LB:\n                  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> k =-1;k&lt;<span class=\"hljs-number\">2</span>;k++)\n                  {\n                      <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">int</span> l=<span class=\"hljs-number\">-1</span>;l&lt;<span class=\"hljs-number\">2</span>;l++)\n                      {\n                          <span class=\"hljs-keyword\">if</span>(bw[i+k+(j+l)*iw] == <span class=\"hljs-number\">0</span>)\n                          {\n                              r = <span class=\"hljs-number\">0</span>;\n                              <span class=\"hljs-keyword\">break</span> LB;<span class=\"hljs-comment\">//跳出2重循环</span>\n                          }\n                      }\n                  }\n                  <span class=\"hljs-comment\">//如果都是黑点,判定为内部点,改变颜色</span>\n                  <span class=\"hljs-keyword\">if</span>(r == <span class=\"hljs-number\">1</span>)\n                      tem[i+j*iw] = <span class=\"hljs-number\">0</span>;\n              }\n          }\n      }\n      <span class=\"hljs-keyword\">return</span> tem;\n  }\n</code></pre>\n<h2 id=\"-roberts-\">素描效果(roberts边界检测)</h2>\n</li>\n<li>说明：上面说到边缘可以用微分算子检测，roberts算子就是基于一阶导数的边缘检测算子的一种。</li>\n<li>如图\n  <img src=\"/images/imgpro12.png\" alt=\"imgpro12.png\"></li>\n<li><p>代码</p>\n<pre><code class=\"lang-java\">  //Roberts算法\n  <span class=\"hljs-meta\">public</span> <span class=\"hljs-keyword\">int</span>[] robert(<span class=\"hljs-keyword\">int</span>[] px, <span class=\"hljs-keyword\">int</span> iw, <span class=\"hljs-keyword\">int</span> ih, <span class=\"hljs-keyword\">int</span> thresh, boolean flag)\n  {\n      ColorModel cm = ColorModel.getRGBdefault()<span class=\"hljs-comment\">;</span>\n      <span class=\"hljs-keyword\">int</span> r, <span class=\"hljs-built_in\">r0</span>, <span class=\"hljs-built_in\">r1</span>, <span class=\"hljs-built_in\">r2</span>, <span class=\"hljs-built_in\">r3</span>, g, g0, g1, g2, g3, b, b0, b1, b2, b3<span class=\"hljs-comment\">;</span>\n      for(<span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">1</span><span class=\"hljs-comment\">; j &lt; ih-1; j++)</span>\n      {\n          for(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">1</span><span class=\"hljs-comment\">; i &lt; iw-1; i++)</span>\n          {\n              <span class=\"hljs-built_in\">r0</span> = cm.getRed(px[i+j*iw])<span class=\"hljs-comment\">;</span>\n              <span class=\"hljs-built_in\">r1</span> = cm.getRed(px[i+(j+<span class=\"hljs-number\">1</span>)*iw])<span class=\"hljs-comment\">;</span>\n              <span class=\"hljs-built_in\">r2</span> = cm.getRed(px[i+<span class=\"hljs-number\">1</span>+j*iw])<span class=\"hljs-comment\">;</span>\n              <span class=\"hljs-built_in\">r3</span> = cm.getRed(px[i+<span class=\"hljs-number\">1</span>+(j+<span class=\"hljs-number\">1</span>)*iw])<span class=\"hljs-comment\">;</span>\n              /*--------------------------------------------*\n               * -------------------------\n               * |<span class=\"hljs-built_in\">r0</span>:(i,j)  |<span class=\"hljs-built_in\">r1</span>:(i, j+<span class=\"hljs-number\">1</span>) |\n               * |-----------------------| 交叉\n               * |<span class=\"hljs-built_in\">r2</span>:(i+<span class=\"hljs-number\">1</span>,j)|<span class=\"hljs-built_in\">r3</span>:(i+<span class=\"hljs-number\">1</span>,j+<span class=\"hljs-number\">1</span>)|\n               * -------------------------\n               *--------------------------------------------*/\n              r = (<span class=\"hljs-keyword\">int</span>)Math.sqrt((<span class=\"hljs-built_in\">r0</span>-<span class=\"hljs-built_in\">r3</span>)*(<span class=\"hljs-built_in\">r0</span>-<span class=\"hljs-built_in\">r3</span>)+(<span class=\"hljs-built_in\">r1</span>-<span class=\"hljs-built_in\">r2</span>)*(<span class=\"hljs-built_in\">r1</span>-<span class=\"hljs-built_in\">r2</span>))<span class=\"hljs-comment\">;</span>\n\n              g0 = cm.getGreen(px[i+j*iw])<span class=\"hljs-comment\">;</span>\n              g1 = cm.getGreen(px[i+(j+<span class=\"hljs-number\">1</span>)*iw])<span class=\"hljs-comment\">;</span>\n              g2 = cm.getGreen(px[i+<span class=\"hljs-number\">1</span>+j*iw])<span class=\"hljs-comment\">;</span>\n              g3 = cm.getGreen(px[i+<span class=\"hljs-number\">1</span>+(j+<span class=\"hljs-number\">1</span>)*iw])<span class=\"hljs-comment\">;</span>\n              g = (<span class=\"hljs-keyword\">int</span>)Math.sqrt((g0-g3)*(g0-g3)+(g1-g2)*(g1-g2))<span class=\"hljs-comment\">;</span>\n\n              b0 = cm.getBlue(px[i+j*iw])<span class=\"hljs-comment\">;</span>\n              b1 = cm.getBlue(px[i+(j+<span class=\"hljs-number\">1</span>)*iw])<span class=\"hljs-comment\">;</span>\n              b2 = cm.getBlue(px[i+<span class=\"hljs-number\">1</span>+j*iw])<span class=\"hljs-comment\">;</span>\n              b3 = cm.getBlue(px[i+<span class=\"hljs-number\">1</span>+(j+<span class=\"hljs-number\">1</span>)*iw])<span class=\"hljs-comment\">;</span>\n              b = (<span class=\"hljs-keyword\">int</span>)Math.sqrt((b0-b3)*(b0-b3)+(b1-b2)*(b1-b2))<span class=\"hljs-comment\">;</span>\n              if(flag)\n              {\n                  if(r &gt; thresh) r = <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">;//黑色，边缘点</span>\n                  else r = <span class=\"hljs-number\">255</span><span class=\"hljs-comment\">;</span>\n                  px[i+j*iw] = (<span class=\"hljs-number\">255</span>&lt;&lt;<span class=\"hljs-number\">24</span>)|(r&lt;&lt;<span class=\"hljs-number\">16</span>)|(r&lt;&lt;<span class=\"hljs-number\">8</span>)|r<span class=\"hljs-comment\">;</span>\n              }\n              else\n                  px[i+j*iw] = (<span class=\"hljs-number\">255</span>&lt;&lt;<span class=\"hljs-number\">24</span>)|(r&lt;&lt;<span class=\"hljs-number\">16</span>)|(g&lt;&lt;<span class=\"hljs-number\">8</span>)|b<span class=\"hljs-comment\">;</span>\n          }\n      }\n      return px<span class=\"hljs-comment\">;</span>\n  }\n</code></pre>\n</li>\n</ul>\n<h2 id=\"-\">其他</h2>\n<ol>\n<li>清空画板</li>\n<li>选择图片下载</li>\n<li>画板图片下载</li>\n<li>添加文字</li>\n<li>图形绘制，图形拖拽，图形填充</li>\n</ol>\n<h1 id=\"-\">参考资料</h1>\n<ul>\n<li>数字图像处理——Java编程与实验 （孙燮华著）</li>\n</ul>\n","head":{"title":"「项目拾遗」简单图形处理及图形绘制","date":"03 Jun 2016","categories":["Studying"],"tags":["图像处理","canvas"]}},"「项目拾遗」谈谈websocket":{"content":"<h1 id=\"-\">前言</h1>\n<p>在2015年寒假期间，我完成了考友无忧项目的考友互动板块模块，主要是基于websocket实现的公共聊天室/一对一好友聊天/实时消息推送，基于websql实现的历史聊天纪录存取。\n<em>项目地址 <a href=\"http://moyuyc.xyz/autoexam/\">http://moyuyc.xyz/autoexam/</a></em> 测试用户 moyumoyu，密码 moyumoyu\n<!--more--></p>\n<h1 id=\"-websocket\">关于websocket</h1>\n<p>通过websocket，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。\nwebsocket数据传输不是采用的http协议，而是自己定义的协议。具有传输数据量少的特点。\nchrome控制台中可以查看到这一次握手动作\n<img src=\"/htm/images/chat1_console.png\" alt=\"img\"></p>\n<h1 id=\"-\">预览</h1>\n<ol>\n<li>实时好友聊天\n<img src=\"/htm/images/chat1.png\" alt=\"img\"></li>\n<li>实时消息推送\n<img src=\"/htm/images/chat1_push.png\" alt=\"img\"></li>\n</ol>\n<h1 id=\"-\">实现</h1>\n<h2 id=\"-\">前端</h2>\n<ul>\n<li>利用jQuery封装的 websocket 接口<pre><code class=\"lang-javascript\">(<span class=\"hljs-name\">function</span>($) {\n  $.websocket = function(<span class=\"hljs-name\">options</span>) {\n      var defaults = {\n          domain: top.location.hostname,\n          port:80,\n          path: <span class=\"hljs-string\">\"\"</span>\n      }<span class=\"hljs-comment\">;</span>\n      var opts = $.extend(<span class=\"hljs-name\">defaults</span>,options)<span class=\"hljs-comment\">;</span>\n      // 注意：必须为绝对url，websocket不支持同源策略。\n      var szServer = (<span class=\"hljs-name\">top.location.protocol</span> == 'http:' ? <span class=\"hljs-string\">\"ws://\"</span> : <span class=\"hljs-string\">\"wss://\"</span>)\n                      + opts.domain + <span class=\"hljs-string\">\":\"</span> + opts.port + <span class=\"hljs-string\">\"/\"</span> + opts.path <span class=\"hljs-comment\">;</span>\n      var socket = null;\n      var bOpen = <span class=\"hljs-literal\">false</span><span class=\"hljs-comment\">;</span>\n      var t1 = <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">;</span>\n      var t2 = <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">;</span>\n      var messageevent = {\n          onInit:function(){\n              if(<span class=\"hljs-name\">!</span>(<span class=\"hljs-string\">\"WebSocket\"</span> in window) &amp;&amp; !(<span class=\"hljs-string\">\"MozWebSocket\"</span> in window)){\n                  if(<span class=\"hljs-name\">!Boolean</span>($.cookie(<span class=\"hljs-name\">'session'</span>))) {\n                      $.moyuAlert(<span class=\"hljs-name\">'</span>您的浏览器不支持websocket，将不能使用好友功能。')<span class=\"hljs-comment\">;</span>\n                      $.cookie(<span class=\"hljs-name\">'session'</span>, <span class=\"hljs-literal\">true</span>)<span class=\"hljs-comment\">;</span>\n                  }\n                  return <span class=\"hljs-literal\">false</span><span class=\"hljs-comment\">;</span>\n              }\n              if((<span class=\"hljs-string\">\"MozWebSocket\"</span> in window)){\n                  socket = new MozWebSocket(<span class=\"hljs-name\">szServer</span>)<span class=\"hljs-comment\">;</span>\n              }else{\n                  socket = new WebSocket(<span class=\"hljs-name\">szServer</span>)<span class=\"hljs-comment\">;</span>\n              }\n              if(<span class=\"hljs-name\">opts.onInit</span>){\n                  opts.onInit()<span class=\"hljs-comment\">;</span>\n              }\n              // 成功建立连接时触发\n              socket.onopen = messageevent.onOpen;\n              // 接受到服务器的数据触发\n              socket.onmessage = messageevent.onReceive;\n              // 发生错误时触发\n              socket.onerror = messageevent.onError;\n              // 连接关闭时触发\n              socket.onclose = messageevent.onClose;\n          },\n          onOpen:function(<span class=\"hljs-name\">event</span>){\n              bOpen = <span class=\"hljs-literal\">true</span><span class=\"hljs-comment\">;</span>\n              if(<span class=\"hljs-name\">opts.onOpen</span>){\n                  opts.onOpen(<span class=\"hljs-name\">event</span>)<span class=\"hljs-comment\">;</span>\n              }\n          },\n          onSend:function(<span class=\"hljs-name\">msg</span>){\n              t1 = new Date().getTime()<span class=\"hljs-comment\">;</span>\n              if(<span class=\"hljs-name\">opts.onSend</span>){\n                  opts.onSend(<span class=\"hljs-name\">msg</span>)<span class=\"hljs-comment\">;</span>\n              }\n              // 发送数据至服务器\n              socket.send(<span class=\"hljs-name\">msg</span>)<span class=\"hljs-comment\">;</span>\n          },\n          onReceive:function(<span class=\"hljs-name\">msg</span>){\n              t2 = new Date().getTime()<span class=\"hljs-comment\">;</span>\n              if(<span class=\"hljs-name\">opts.onReceive</span>){\n                  opts.onReceive(<span class=\"hljs-name\">msg.data</span>,t2 - t1)<span class=\"hljs-comment\">;</span>\n              }\n          },\n          onError:function(<span class=\"hljs-name\">event</span>){\n              if(<span class=\"hljs-name\">opts.onError</span>){\n                  opts.onError(<span class=\"hljs-name\">event</span>)<span class=\"hljs-comment\">;</span>\n              }\n          },\n          onClose:function(<span class=\"hljs-name\">event</span>){\n              if(<span class=\"hljs-name\">opts.onClose</span>){\n                  opts.onClose(<span class=\"hljs-name\">event</span>)<span class=\"hljs-comment\">;</span>\n              }\n              // 关闭连接\n              if(<span class=\"hljs-name\">socket.close</span>() != null){\n                  socket = null;\n              }\n          }\n      }\n      messageevent.onInit()<span class=\"hljs-comment\">;</span>\n      this.send = function(<span class=\"hljs-name\">pData</span>){\n          if(<span class=\"hljs-name\">bOpen</span> == <span class=\"hljs-literal\">false</span>){\n              return <span class=\"hljs-literal\">false</span><span class=\"hljs-comment\">;</span>\n          }\n          messageevent.onSend(<span class=\"hljs-name\">pData</span>)<span class=\"hljs-comment\">;</span>\n          return <span class=\"hljs-literal\">true</span><span class=\"hljs-comment\">;</span>\n      }\n      //\n      this.close = function(){\n          messageevent.onClose()<span class=\"hljs-comment\">;</span>\n      }\n      this.bOpen=bOpen;\n      return this;\n  }<span class=\"hljs-comment\">;</span>\n})(<span class=\"hljs-name\">jQuery</span>)<span class=\"hljs-comment\">;</span>\n</code></pre>\n</li>\n<li>利用封装好的 <code>jquery.websocket</code> 建立websocket对象，建立与服务器的长连接<pre><code class=\"lang-javascript\">ws = $.websocket({\n      <span class=\"hljs-comment\">// 服务器的连接的url</span>\n  path: <span class=\"hljs-string\">'autoexam/websocket/chat?tag='</span>+<span class=\"hljs-built_in\">window</span>.axTag,\n  <span class=\"hljs-attr\">onReceive</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data, time</span>) </span>{\n      <span class=\"hljs-comment\">/**\n       * data : 服务器来的数据\n       * time : 接受数据的时间戳\n       */</span>\n  },\n  <span class=\"hljs-attr\">onClose</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{}\n});\n</code></pre>\n</li>\n<li>发送数据至服务器和关闭连接<pre><code class=\"lang-javascript\"><span class=\"hljs-selector-tag\">ws</span><span class=\"hljs-selector-class\">.send</span>(JSON.stringify({\n  <span class=\"hljs-attribute\">to</span>:<span class=\"hljs-string\">''</span>, <span class=\"hljs-comment\">//'common'-&gt;公共聊天室; 用户名-&gt;好友聊天</span>\n  <span class=\"hljs-attribute\">content</span>: um.getContent() <span class=\"hljs-comment\">// 发送的内容</span>\n}));\n<span class=\"hljs-selector-tag\">ws</span><span class=\"hljs-selector-class\">.close</span>();\n</code></pre>\n</li>\n</ul>\n<h2 id=\"-java-\">后端 (Java)</h2>\n<h3 id=\"-\">基本数据集</h3>\n<pre><code class=\"lang-java\"><span class=\"hljs-meta\">@ServerEndpoint</span>(value = <span class=\"hljs-string\">\"/websocket/chat\"</span>,configurator=GetHttpSessionConfigurator.<span class=\"hljs-keyword\">class</span>)<span class=\"hljs-comment\">//configurator是为了得到HttpSession</span>\npublic <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ChatServer</span> </span>{\n    <span class=\"hljs-comment\">// 当前存在的所有websocket连接(被封装在ChatServer对象中)</span>\n    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>,<span class=\"hljs-built_in\">List</span>&lt;ChatServer&gt;&gt; connections = Collections.synchronizedMap(<span class=\"hljs-keyword\">new</span> HashMap&lt;&gt;());\n\n    <span class=\"hljs-comment\">// 下面4个Map对象是为了实现</span>\n    <span class=\"hljs-comment\">// 发送添加好友请求/被拒绝添加好友/被通过添加好友/发送消息接受 接受人当时不在线。</span>\n    <span class=\"hljs-comment\">// 当下次这4个Map中的key上线时，再发送相关的信息。 ...比较拗口</span>\n\n    <span class=\"hljs-comment\">// 暂时存放添加好友请求(未被处理)的Map，key-&gt;待接受人，value-&gt;发送请求人集合</span>\n    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>,<span class=\"hljs-built_in\">Set</span>&lt;<span class=\"hljs-built_in\">String</span>&gt;&gt; rev_sender = <span class=\"hljs-keyword\">new</span> ConcurrentHashMap();\n    <span class=\"hljs-comment\">// 暂时存放添加好友求被拒绝的Map，key-&gt;被拒绝人(发添加请求人)，value-&gt;拒绝人集合</span>\n    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>,<span class=\"hljs-built_in\">Set</span>&lt;<span class=\"hljs-built_in\">String</span>&gt;&gt; ignore_rev_sender = <span class=\"hljs-keyword\">new</span> ConcurrentHashMap();\n    <span class=\"hljs-comment\">// 暂时存放添加好友求被允许的Map，key-&gt;被允许人(发添加请求人)，value-&gt;允许人集合</span>\n    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>,<span class=\"hljs-built_in\">Set</span>&lt;<span class=\"hljs-built_in\">String</span>&gt;&gt; pass_rev_sender= <span class=\"hljs-keyword\">new</span> ConcurrentHashMap();\n    <span class=\"hljs-comment\">// 暂时存放好友聊天内容的Map，key-&gt;接受消息人，value-&gt;消息内容(包括时间/内容/发送人)</span>\n    public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>,<span class=\"hljs-built_in\">List</span>&lt;JSONObject&gt;&gt; remain_msgs = <span class=\"hljs-keyword\">new</span> ConcurrentHashMap();\n\n    private <span class=\"hljs-built_in\">String</span> name;\n    <span class=\"hljs-comment\">// websocket会话对象</span>\n    public Session session;\n    <span class=\"hljs-comment\">// httpsession会话对象</span>\n    public HttpSession httpSession;\n\n}\n</code></pre>\n<h3 id=\"-\">细节考虑</h3>\n<ol>\n<li><p>为了防止服务器重启/关闭导致数据丢失，所以在服务器关闭时触发的事件中，将必要的数据写入文件中；在服务器启动时触发的事件中，再将数据写回内存。</p>\n<pre><code class=\"lang-java\">public <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> writeData(<span class=\"hljs-built_in\">String</span> path) throws IOException {\n ObjectOutputStream oos = <span class=\"hljs-keyword\">new</span> ObjectOutputStream(<span class=\"hljs-keyword\">new</span> FileOutputStream(path));\n oos.writeObject(rev_sender);\n oos.writeObject(ignore_rev_sender);\n oos.writeObject(pass_rev_sender);\n <span class=\"hljs-comment\">// 因为JSONObject类没有implements Serializable，所以只好将JSONObject转换为String对象写入文件</span>\n <span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>,<span class=\"hljs-built_in\">List</span>&lt;<span class=\"hljs-built_in\">Object</span>&gt;&gt; new_remain_msgs = <span class=\"hljs-keyword\">new</span> ConcurrentHashMap&lt;&gt;();\n <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">String</span> key:remain_msgs.keySet()){\n     <span class=\"hljs-built_in\">List</span>&lt;JSONObject&gt; l = remain_msgs.<span class=\"hljs-keyword\">get</span>(key);\n     <span class=\"hljs-built_in\">List</span> newl = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();\n     <span class=\"hljs-keyword\">for</span>(JSONObject jo:l)\n         newl.add(jo.toString());\n     new_remain_msgs.put(key,newl);\n }\n oos.writeObject(new_remain_msgs);\n\n oos.flush();\n oos.close();\n}\npublic <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> loadData(<span class=\"hljs-built_in\">String</span> path) throws IOException, ClassNotFoundException {\n ObjectInputStream ois = <span class=\"hljs-keyword\">new</span> ObjectInputStream(<span class=\"hljs-keyword\">new</span> FileInputStream(path));\n rev_sender = (<span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">Set</span>&lt;<span class=\"hljs-built_in\">String</span>&gt;&gt;) ois.readObject();\n ignore_rev_sender = (<span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">Set</span>&lt;<span class=\"hljs-built_in\">String</span>&gt;&gt;) ois.readObject();\n pass_rev_sender = (<span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">Set</span>&lt;<span class=\"hljs-built_in\">String</span>&gt;&gt;) ois.readObject();\n <span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>,<span class=\"hljs-built_in\">List</span>&gt; new_remain_msgs = (<span class=\"hljs-built_in\">Map</span>&lt;<span class=\"hljs-built_in\">String</span>, <span class=\"hljs-built_in\">List</span>&gt;) ois.readObject();\n ois.close();\n <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">String</span> key : new_remain_msgs.keySet()){\n     <span class=\"hljs-built_in\">List</span> newl = new_remain_msgs.<span class=\"hljs-keyword\">get</span>(key);\n     <span class=\"hljs-built_in\">List</span>&lt;JSONObject&gt; l = <span class=\"hljs-keyword\">new</span> LinkedList&lt;&gt;();\n     <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-built_in\">Object</span> o:newl)\n         l.add(JSONObject.fromObject(o));\n     remain_msgs.put(key,l);\n }\n}\n</code></pre>\n</li>\n<li><p>用户在未进入考友互动模块时，应该也能实时地接受相关的添加好友请求，新的消息请求。\n<img src=\"/htm/images/chat1_notify.png\" alt=\"img\">\n首先，在其他非聊天界面，设置</p>\n<pre><code> window.axTag=<span class=\"hljs-string\">\"login\"</span><span class=\"hljs-comment\">;</span>\n</code></pre><p>而在聊天界面中设置</p>\n<pre><code> <span class=\"hljs-built_in\">window</span>.axTag=<span class=\"hljs-string\">'chat'</span>;\n</code></pre><p>回到上面的建立websocket连接的代码</p>\n<pre><code> path: <span class=\"hljs-string\">'autoexam/websocket/chat?tag='</span>+<span class=\"hljs-built_in\">window</span>.axTag\n</code></pre><p>这下就明白了，通过连接的url串传递是当前用户在哪类页面，然后进行不同的数据传输。</p>\n</li>\n<li><p>...</p>\n</li>\n</ol>\n<h1 id=\"-\">小结与源码地址</h1>\n<p>该在线考试交友系统是我独自花费了较大心血完成的项目，\n我也从中获取了许多，包括技术细节上的，项目规划上的。\n再推荐下该项目 <a href=\"http://moyuyc.xyz/autoexam\">http://moyuyc.xyz/autoexam</a>\n还可以 <a href=\"https://github.com/moyuyc/autoexam_system\">Fork It</a>\n最后做下功能总结</p>\n<ol>\n<li>发送邮件</li>\n<li>考卷Word导出</li>\n<li>图像上传切割与旋转</li>\n<li>聊天图片可放缩</li>\n<li>聊天历史记录</li>\n<li>新消息提示与跳转</li>\n<li>后台题库excel批量导入</li>\n<li>...</li>\n</ol>\n","head":{"title":"「项目拾遗」谈谈websocket","date":"30 Apr 2016","categories":["前端"],"tags":["websocket","Java Web"]}},"一次百度前端实习生面试":{"content":"<blockquote>\n<p>昨天下午3点至下午4点，进行了百度内推的前端实习生视频面试（当然得先过一轮<a href=\"https://github.com/cong25825933/person-list\">笔试测试</a>）</p>\n</blockquote>\n<h1 id=\"-\">开始</h1>\n<h2 id=\"-\">视频开启</h2>\n<p>用的是微软的Skype远程视频，一开始我还以为我能看到面试官的尊容的，没想到面试官太“羞涩”。\n<!-- more --></p>\n<h2 id=\"-\">自我介绍</h2>\n<p>真的是不太擅长自我介绍，说了下自己来自哪里，基本的情况，然后提了下我的项目，就不知道说什么了，导致面试官还有点不适应。</p>\n<h2 id=\"-\">问题</h2>\n<h3 id=\"-\">主观问题</h3>\n<ul>\n<li>你怎么学前端的啊？<pre><code>  在做项目的过程中，边做边学，查资料看视频看书。\n</code></pre></li>\n<li>你为什么选择前端？<pre><code>  <span class=\"hljs-keyword\">js</span>既灵活（闭包，函数对象等），又简单（单线程）；通过浏览器实现跨平台；\n  <span class=\"hljs-keyword\">js</span>还可以做服务器，游戏，桌面应用，webapp...\n</code></pre></li>\n<li>你觉得前端必须要掌握的知识<pre><code>  基本的HTML标签用法，常用的css重难点，<span class=\"hljs-keyword\">js</span>一定需要精通。\n</code></pre></li>\n<li>你会自己写技术博客吗<pre><code>  看到比较好的文章会收藏或者转载，自己一般都是写的项目总结报告，关于技术细节方面的写的比较少。\n</code></pre></li>\n<li>你有哪些前端学习的书籍<pre><code>  <span class=\"hljs-params\">...</span>只有一本《JavaScript高级程序设计》\n</code></pre></li>\n</ul>\n<h3 id=\"-\">客观问题</h3>\n<ul>\n<li>谈谈web标准</li>\n<li>谈谈HTML5语义化（面试官会挖坑）</li>\n<li>谈谈行内元素，块元素，img是块元素吗</li>\n<li>怎么改变元素的类型（行内，块元素）</li>\n<li><a href=\"http://www.cnblogs.com/zhongxinWang/archive/2013/03/27/2984764.html\">谈谈浮动，清除浮动</a></li>\n<li>谈谈css定位</li>\n<li><a href=\"http://blog.csdn.net/zzulp/article/details/8144520\">谈谈JavaScript作用域、闭包、对象与原型链</a></li>\n<li>谈谈js面向对象</li>\n<li>谈谈js基本数据类型</li>\n<li>数组的克隆，jQuery中怎么实现克隆(这个不太明白面试官考查的点，我觉得可以自己实现个数组复制的函数)</li>\n<li>说下快排的思想（唯一的一个算法题目）</li>\n<li>谈下事件委托</li>\n<li>谈下vui/yui/angularjs/reactjs这些主流的前端框架（...因为没用过，所以...）</li>\n<li>谈下浏览器兼容性方面</li>\n<li>谈下Yahoo提出的web性能优化标准</li>\n<li>你有什么对jQuery源码的深刻理解认识吗（(⊙﹏⊙)b，没有）</li>\n</ul>\n<h2 id=\"-\">提问</h2>\n<ul>\n<li>面试官你觉得我有什么需要提高的地方？<pre><code>  需要多写些技术博客，需要多接触主流的前端框架。\n</code></pre></li>\n</ul>\n<h1 id=\"-\">总结与计划</h1>\n<h2 id=\"-\">总结</h2>\n<blockquote>\n<p>面试官提的问题与面经上的题目大都一致，这些可以通过临时抱佛脚拾取；\n但是对于那些需要长时间积累的（比如技术博客，主流框架的学习），只能脚踏实地地积累了。\n多经历还是有好处的，至少知道了自己与大公司需要的人才有哪些需要提高的地方。\n还有，一面面试官居然没怎么问我的在线考试交友网站，可能他不太感兴趣吧。</p>\n</blockquote>\n<h2 id=\"-\">计划</h2>\n<ol>\n<li>搭建我的个人博客（做起来也更有动力成就感，说完我便搭建了这个网站）</li>\n<li>学习angularjs/seajs，减少对jQuery的依赖</li>\n<li>得开始准备期中考试了...，准备面试已经一个礼拜没上课了...</li>\n</ol>\n<h1 id=\"fighting-\">Fighting！</h1>\n","head":{"title":"一次百度前端实习生面试","date":"22 Apr 2016","tags":["计划","总结","offer"],"categories":["Life"]}},"为你的博客添加搜索功能吧":{"content":"<h1 id=\"search-spider-blog\">Search-Spider-Blog</h1>\n<p>提供个人博客文章搜索服务, 只需要配置个人博客地址, 载入博客数据, 开启Server服务, 即可开启文章搜索服务。\n对<code>blogconfig.json</code>配置文件监控, 修改后服务及时地更新博客数据\n<!--more-->\n<strong>本人用的为Hexo Blog, 所以Hexo用户体验更佳</strong></p>\n<p><a href=\"https://github.com/moyuyc/search-spider-blog\">代码地址</a></p>\n<h2 id=\"-\">使用说明</h2>\n<ul>\n<li><p>环境配置</p>\n<pre><code class=\"lang-sh\">  <span class=\"hljs-comment\"># after clone &amp;&amp; cd</span>\n  <span class=\"hljs-built_in\">npm</span> i\n</code></pre>\n</li>\n<li><p>对 <code>blogconfig.json</code> 进行配置（以我<a href=\"http://moyuyc.github.io/\">个人博客</a>为例）</p>\n<pre><code class=\"lang-text\">\n  {\n      <span class=\"hljs-string\">\"url\"</span>: <span class=\"hljs-string\">\"http://moyuyc.github.io/\"</span>,   <span class=\"hljs-regexp\">//</span>blog url\n      <span class=\"hljs-string\">\"mainPagePath\"</span>: <span class=\"hljs-string\">\"/archives/\"</span>,        <span class=\"hljs-regexp\">//</span> 所有文章页面（也就是第一页）\n      <span class=\"hljs-string\">\"spiderConfig\"</span>: {\n          <span class=\"hljs-string\">\"ArticleLinkEl\"</span>: <span class=\"hljs-string\">\".post-title-link\"</span>, <span class=\"hljs-regexp\">//</span> 在<span class=\"hljs-string\">\"mainPagePath\"</span>中进入文章页面的超链接jQuery选择器\n          <span class=\"hljs-string\">\"splitPagePath\"</span>: <span class=\"hljs-string\">\"/archives/page/${page}/\"</span>, <span class=\"hljs-regexp\">//</span> 所有文章分页的规则, <span class=\"hljs-variable\">${page}</span>表示页码\n          <span class=\"hljs-string\">\"ArticleDateEl\"</span>: <span class=\"hljs-string\">\"time\"</span>,         <span class=\"hljs-regexp\">//</span> 在文章页面中日期的Jquery选择器\n          <span class=\"hljs-string\">\"ArticleTitleEl\"</span>: <span class=\"hljs-string\">\".post-title\"</span>, <span class=\"hljs-regexp\">//</span> 在文章页面中标题的Jquery选择器\n          <span class=\"hljs-string\">\"ArticleContentEl\"</span>: <span class=\"hljs-string\">\".post-body\"</span> <span class=\"hljs-regexp\">//</span> 在文章页面中内容的Jquery选择器\n      }\n  }\n</code></pre>\n</li>\n<li><p>脚本指令说明</p>\n<pre><code class=\"lang-sh\">\n  <span class=\"hljs-built_in\">npm</span> start <span class=\"hljs-comment\"># 开启Server服务(默认端口7899, 可在scripts中修改), 开启后会自动更新一次数据</span>\n  <span class=\"hljs-built_in\">npm</span> load  <span class=\"hljs-comment\"># 更新博客数据</span>\n</code></pre>\n</li>\n<li><p>Server接口说明</p>\n<ol>\n<li><code>/load</code> : 重新加载博客数据</li>\n<li><code>/api/search/(:type)</code> : type可选值为<code>date/content/title/all</code>, 根据什么来搜索, 参数格式为<code>?q=想搜什么&amp;n=数目(可选)</code></li>\n<li><code>/api/search/all</code> : 当未传<code>q</code>时, 返回所有文章</li>\n<li><p>2 3点中的返回数据说明 : </p>\n<pre><code class=\"lang-text\">\n {\n     <span class=\"hljs-attribute\">type</span>: <span class=\"hljs-string\">'title/date/content'</span>,\n     <span class=\"hljs-attribute\">articles</span>: [ <span class=\"hljs-comment\">// 一般length为1</span>\n         {\n             <span class=\"hljs-attribute\">title</span>: <span class=\"hljs-string\">'title'</span>,\n             <span class=\"hljs-attribute\">date</span>: <span class=\"hljs-string\">'date'</span>,\n             <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">'content'</span>,\n             <span class=\"hljs-attribute\">path</span>: <span class=\"hljs-string\">'/url'</span>   <span class=\"hljs-comment\">// 文章链接地址 相对的</span>\n         }\n     ],\n     <span class=\"hljs-attribute\">indexs</span>: [] <span class=\"hljs-comment\">// 搜索到内容的索引位置</span>\n }\n</code></pre>\n</li>\n<li>注意: 提供了多关键词的搜索, 如<code>keyword1+keyword2</code> 或者 <code>keyword1 keyword2</code></li>\n<li>可以根据自己的需求, 直接使用 <code>/api/search/all</code> 所有数据做为静态数据进行本地搜索, 或者使用search服务都可</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"-\">工作流程</h2>\n<ol>\n<li>爬取博客文章数据, 保存至<code>db.json</code>中, 未使用数据库, 是为了轻量与方便移植, 而且只是提供个人服务</li>\n<li>为了更好的拓展性, 使用<code>cheerio</code>, 使用<code>jQuery选择器</code> 配置即可</li>\n<li>获取数据后, 便是搭建<code>http服务</code>, 提供搜索接口, 为了方便用户展示, 还提供了搜索到内容的索引位置</li>\n</ol>\n<h2 id=\"-\">效果查看</h2>\n<p><img src=\"/images/sear1.png\" alt=\"\">\n<img src=\"/images/sear2.png\" alt=\"\"></p>\n","head":{"title":"为你的博客添加搜索功能吧!","date":"06 Aug 2016","categories":" ","tags":["爬虫"]}},"从定时器到 Web Worker":{"content":"<h1 id=\"-\">前言</h1>\n<p>首先，JavaScript是单线程执行的，也就是同一时间只有你的一份js代码在运行（不论你cpu几核，os是以线程为基本单位分配任务调度的，为了利用多核cpu的优势，HTML5提出Web Worker标准，本文会讲到），\n那么JavaScript中的<code>setInterval</code>和<code>setTimeout</code> api是什么工作原理呢？\n<!--more--></p>\n<h1 id=\"javascript-\">JavaScript事件循环</h1>\n<p><img src=\"/htm/images/js_event_loop.jpg\" alt=\"js_event_loop.jpg\">\n如图，EventEmitters为事件发起者，比如你点击按钮，异步请求完成触发回调函数，定时器时间到了，事件触发...（这些是由多线程的浏览器来实现的）；\nEvents为事件队列，表示亟待处理的事件，Event Handlers表示从事件队列中取出队首的事件，在堆、栈中的进行函数调用，语句运行。\n明白了JavaScript的事件循环后，我们再来看看<code>setInterval</code>和<code>setTimeout</code>。</p>\n<h1 id=\"-setinterval-settimeout\">再探 setInterval setTimeout</h1>\n<h2 id=\"-\">定时器原理</h2>\n<p>先看下面这段代码</p>\n<pre><code class=\"lang-javascript\">console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-number\">1</span>);\nsetInterval(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span>{</span>\n    console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">'interval'</span>);\n},<span class=\"hljs-number\">1</span>);\nvar <span class=\"hljs-built_in\">i</span> = <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-keyword\">while</span>(<span class=\"hljs-built_in\">i</span>--&gt;<span class=\"hljs-number\">0</span>);\nconsole.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-number\">2</span>);\nsetTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span>{</span>\n    console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">'timeout'</span>);\n},<span class=\"hljs-number\">0</span>);\nconsole.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-number\">3</span>);\n</code></pre>\n<p>从事件循环角度解析下这段代码，首先执行<code>console.log(1);</code> 没问题，So Easy，然后继续，执行到<code>setInterval</code>，\n时间为 1ms ，于是<strong>在1ms之后将setInterval的处理函数加入到事件队列中</strong>，于此同时，继续执行直到<code>setTimeout</code>，\n于是<strong>在0ms之后将setTimeout的处理函数加入到事件队列中</strong>，最后执行完<code>console.log(3);</code>后，再从事件队列中取事件处理。\n<strong>也就是说，定时器中的时间指的是过多少时间将处理函数加入到事件队列中，而不是立即执行</strong>\n明白了上面的解释后，如果</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-keyword\">while</span>(i-<span class=\"hljs-function\">-&gt;</span><span class=\"hljs-number\">0</span>);\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">2</span>);\n</code></pre>\n<p>这段代码执行时间<strong>大于1ms</strong>，则setInterval在setTimeout之前加入事件队列，输出就应该如下</p>\n<pre><code><span class=\"hljs-number\">1</span>\n<span class=\"hljs-number\">2</span>\n<span class=\"hljs-number\">3</span>\ninterval\ntimeout\n...\n</code></pre><h2 id=\"-\">重复的定时器</h2>\n<h3 id=\"setinterval-\">setInterval问题暴露</h3>\n<ul>\n<li>场景重现\n某个click事件处理程序使用<code>setInterval</code>设置了一个200ms时间间隔的重复定时器，click处理程序花了300ms时间，定时器代码花了400ms时间。</li>\n<li>问题存在</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>时刻</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0ms</td>\n<td>进入click事件处理程序</td>\n</tr>\n<tr>\n<td>5ms</td>\n<td>创建setInterval定时器</td>\n</tr>\n<tr>\n<td>205ms</td>\n<td>定时器事件添加至事件队列</td>\n</tr>\n<tr>\n<td>300ms</td>\n<td>click处理完成，取出定时器事件，进入定时器代码</td>\n</tr>\n<tr>\n<td>405ms</td>\n<td>事件队列中不存在定时器代码，添加定时器事件至队列</td>\n</tr>\n<tr>\n<td>605ms</td>\n<td>事件队列中存在定时器代码，定时器事件未至队列</td>\n</tr>\n<tr>\n<td>700ms</td>\n<td>定时器代码执行完毕，取出下一个事件队列中事件（定时器代码）</td>\n</tr>\n</tbody>\n</table>\n<p><strong>可以看到，300ms-700ms执行完定时器代码后，紧接着下一个事件依旧是定时器事件，而不是预想的200ms</strong></p>\n<h3 id=\"-\">问题解决</h3>\n<p>可以用下列链式setTimeout解决该问题</p>\n<pre><code class=\"lang-javascript\">setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-comment\">//do something</span>\n    setTimeout(<span class=\"hljs-built_in\">arguments</span>.callee,interval);\n},interval);\n</code></pre>\n<h3 id=\"-\">举一反三</h3>\n<p>html5新增的api <code>requestAnimationFrame</code>，原理与<code>setTimeout</code>一致，详细参考<a href=\"/2016/04/23/requestAnimationFrame_Vs_setInterval/\">requestAnimationFrame Vs setInterval</a>\n<strong><code>setTimeout</code>,<code>requestAnimationFrame</code>注意放处理函数最后。</strong></p>\n<h1 id=\"javascript-\">JavaScript优劣</h1>\n<ul>\n<li><p>优点\n单线程简单，通过事件循环实现并发。而不是传统的请求-等待-响应模式。</p>\n</li>\n<li><p>缺点\n单线程，不能充分利用多核CPU性能。</p>\n</li>\n</ul>\n<h1 id=\"web-workers\">Web Workers</h1>\n<p>为了解决JavaScript单线程带来的不便，HTML5引入了Web Workers规范。\n能够解决长时间运行的JavaScript脚本导致页面&quot;冻结&quot;的问题。\n效果对比可以查看<a href=\"http://moyuyc.xyz/painter\">KMenus图像算法优化前</a> 和 <a href=\"/htm/painter\">KMenus图像算法优化后</a>\n选择Image Choose，选择图片，点击画板放置图片后，点击K-Menus后，你会发现好像没发生什么事情一样。\n其实在后台已经创建了一个Worker，处理冗长的K-Menus图像聚类算法了，而你能继续享受流畅的用户体验。\n耐心等待一段时间，处理的结果才会返回回来，显示在界面上。\n<img src=\"/htm/images/webworker1.png\" alt=\"web worker\"></p>\n<p>代码如下</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> worker = <span class=\"hljs-keyword\">new</span> Worker(<span class=\"hljs-string\">\"js/algorithm.js\"</span>);\n<span class=\"hljs-comment\">//发送data至worker中</span>\nworker.postMessage(data);\n<span class=\"hljs-comment\">//worker处理完数据后的回调函数</span>\nworker.onmessage = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(ext)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> data = ext.data;  <span class=\"hljs-comment\">//worker处理后返回的数据</span>\n}\n</code></pre>\n<p><code>js/algorithm.js</code></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-title\">onmessage</span> = function (evt) {\n    var <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span> = evt.<span class=\"hljs-keyword\">data</span>;//worker接受到的数据</span>\n    //<span class=\"hljs-keyword\">do</span> something about <span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span></span>\n    postMessage(<span class=\"hljs-class\"><span class=\"hljs-keyword\">data</span>);//发送处理后的数据</span>\n}\n</code></pre>\n","head":{"title":"从定时器到 Web Worker","date":"29 Apr 2016","categories":["前端"],"tags":["js","Web Worker","HTML5","定时器","事件循环"]}},"分享一个图标搜索网站(font-awesome)":{"content":"<p class='text-center'> <a href=\"http://www.thinkcmf.com/font/search.html\">Font-Awesome</a> </p>\n","head":{"title":"分享一个图标搜索网站(font-awesome)","date":"24 Apr 2016","categories":["分享一哈"],"tags":["前端","分享"]}},"分片上传与断点续传解决方案":{"content":"<p>上传文件，基本上是每一个网站应用都会具备的一个功能。对于一个网络存储应用，对于上传功能要求更是迫切。<br>如今市面上成熟上传插件，如<code>WebUploader</code>，&quot;体积太大&quot;，不适合于移动端上传；再加上作为一位程序员的&quot;操守&quot;，当然还是更喜欢自己造轮子。</p>\n<p>于是花了一天半时间，<code>MoUploader</code>应运而生。为什么叫<code>MoUploader</code>呢？<br><code>Mo</code>表示<code>Mobile</code>(其实更是因为我的绰号moyu)</p>\n<!--more-->\n<h2 id=\"-\">关于实现原理</h2>\n<ul>\n<li>首先需要明确，上传这东西不仅仅是只需要前端就能完成的很好的，需要前端后端统一数据格式，从而实现断点续传。（所以，该文适合于全栈工程师，至少是想成为）</li>\n<li><p>还有，为什么需要分片，不分片能实现断点续传吗？分片是为了充分利用网络带宽，加快上传速度；不分片也是能够实现断点续传的。详细参考 <a href=\"http://fex.baidu.com/blog/2014/04/html5-uploader/\">HTML5文件上传组件深度剖析</a>.<br>分片上传与断点续传之间没有很直接的关系.</p>\n<p>好了，进入正题</p>\n<ul>\n<li><p>实现断点续传的前提是需要服务器记录某文件的上传进度，那么根据什么判断是不是同一个文件呢？可以利用文件内容求md5码，如果文件过大，求取md5码也是一个很长的过程，所以对于大文件，只能针对某一段数据进行计算，加上服务器对cookie用户信息的判断，得到相对唯一的key</p>\n</li>\n<li><p>在前端页面，需要将文件按照一定大小进行分片，一次请求只发送这一小片数据，所以我们可以同时发起多个请求。但一次同时请求的连接数不宜过多，服务器负载过重</p>\n<p>对于文件分片操作，H5具有十分强大的File API，直接利用File对象的slice方法即可得到Blob对象.<br>至于同时传输数据的连接数控制逻辑，就需要花点脑子思考了</p>\n</li>\n<li><p>前端把数据顺利得传给服务器了，服务器只需要按照数据中给的开始字节位置，与读取到的文件片段数据，写入文件即可</p>\n</li>\n</ul>\n<p>更多信息就看源码吧！<a href=\"https://github.com/moyuyc/moUploader\">MoUploader</a></p>\n</li>\n</ul>\n<h2 id=\"-\">功能实现</h2>\n<ul>\n<li>文件结构</li>\n</ul>\n<pre><code><span class=\"hljs-built_in\">file</span>-upload/\n├── bower_components/ <span class=\"hljs-comment\"># bower包</span>\n├── db.js   <span class=\"hljs-comment\"># 数据操作接口</span>\n├── demo.html\n├── md5.json <span class=\"hljs-comment\"># 数据</span>\n├── mouploader.js <span class=\"hljs-comment\"># 源码</span>\n├── README.md \n└── server.js <span class=\"hljs-comment\"># demo.html服务, 建立在3000端口</span>\n\n<span class=\"hljs-number\">1</span> <span class=\"hljs-built_in\">directories</span>, <span class=\"hljs-number\">8</span> <span class=\"hljs-built_in\">files</span>.\n</code></pre><p>(打印文件目录树使用的是自己写的<a href=\"https://github.com/moyuyc/directory-tree\">print-dir</a>)</p>\n<ul>\n<li><p>怎么使用</p>\n<ol>\n<li>引入script，amd/cmd/...，</li>\n<li><p>使用MoUploader</p>\n<pre><code class=\"lang-js\">input.onchange = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-keyword\">this</span>;\n <span class=\"hljs-keyword\">var</span> moUploader = MoUploader({ \n     <span class=\"hljs-attr\">files</span>: <span class=\"hljs-keyword\">this</span>.files,\n     <span class=\"hljs-attr\">uploadUrl</span>: <span class=\"hljs-string\">'/upload'</span>,\n     <span class=\"hljs-attr\">request</span>: <span class=\"hljs-literal\">false</span>,\n     <span class=\"hljs-attr\">onBeforeUpload</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index</span>) </span>{\n         <span class=\"hljs-keyword\">if</span>(index&gt;=<span class=\"hljs-number\">0</span>) {\n             self.files[index].progress = appendUploading(self.files[index], index)\n         }\n     },\n     <span class=\"hljs-attr\">onOverAllProgress</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index, loaded, total</span>) </span>{\n         <span class=\"hljs-built_in\">console</span>.log(loaded / total)\n         <span class=\"hljs-comment\">//setProgress(loaded / total, self.files[index].progress)</span>\n     },\n     <span class=\"hljs-attr\">onLoad</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index, chunkIndex, chunksNum</span>) </span>{\n         <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'onLoad'</span>, <span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>)\n     },\n     <span class=\"hljs-attr\">onAbort</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index, chunkIndex, chunksNum</span>) </span>{\n         <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'onAbort'</span>, <span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>)\n     },\n     <span class=\"hljs-attr\">onError</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">index, chunkIndex, chunksNum</span>) </span>{\n         <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'onError'</span>, <span class=\"hljs-keyword\">this</span>, <span class=\"hljs-built_in\">arguments</span>)\n     },\n     <span class=\"hljs-attr\">onContinue</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">file, md5, index</span>) </span>{\n         <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">reslove, reject</span>) </span>{\n             <span class=\"hljs-keyword\">var</span> xhr = <span class=\"hljs-keyword\">new</span> XMLHttpRequest()\n             xhr.open(<span class=\"hljs-string\">'GET'</span>, <span class=\"hljs-string\">'/getFile?md5='</span>+md5, <span class=\"hljs-literal\">true</span>);\n             xhr.send(<span class=\"hljs-literal\">null</span>);\n             xhr.addEventListener(<span class=\"hljs-string\">'readystatechange'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n                 <span class=\"hljs-keyword\">if</span>(xhr.readyState === <span class=\"hljs-number\">4</span> &amp;&amp; xhr.status === <span class=\"hljs-number\">200</span>) {\n                     <span class=\"hljs-keyword\">var</span> json = <span class=\"hljs-built_in\">JSON</span>.parse(xhr.responseText);\n                     log(json)\n                     reslove(json.pos)\n                 }\n             })\n         })\n     }\n })\n\n <span class=\"hljs-comment\">// pause or continue upload</span>\n <span class=\"hljs-comment\">// if index &lt; 0, will run for all files</span>\n <span class=\"hljs-comment\">// moUploader.pause(index);</span>\n <span class=\"hljs-comment\">// moUploader.continue(index);    </span>\n}\n</code></pre>\n</li>\n<li><p>配置选项</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> default_ops = {\n <span class=\"hljs-comment\">// chunk Size: byte</span>\n chunkSize: (<span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">20</span>) * <span class=\"hljs-number\">5</span>,\n <span class=\"hljs-comment\">// Number: request Number.</span>\n <span class=\"hljs-comment\">// Array: files requests.</span>\n <span class=\"hljs-comment\">// Boolean: open or close Slice, if false, chunkSize don't work.</span>\n request: <span class=\"hljs-number\">3</span>,\n files: [],\n uploadUrl: <span class=\"hljs-string\">'/'</span>,\n <span class=\"hljs-comment\">// function: get uploaded pos.</span>\n <span class=\"hljs-comment\">// arguments: file, md5, index.</span>\n <span class=\"hljs-comment\">// need return a promise object which will return uploaded pos.</span>\n onContinue: <span class=\"hljs-literal\">null</span>,\n <span class=\"hljs-comment\">// if false, md5 will be setted by filename.</span>\n md5: <span class=\"hljs-literal\">true</span>,\n <span class=\"hljs-comment\">// md5Size: slice file 0 - md5Size for calculate md5</span>\n md5Size: (<span class=\"hljs-number\">1</span>&lt;&lt;<span class=\"hljs-number\">20</span>) * <span class=\"hljs-number\">50</span>,\n <span class=\"hljs-comment\">// called when before upload.</span>\n <span class=\"hljs-comment\">// arguments: file index or -1 (will begin upload)</span>\n onBeforeUpload: <span class=\"hljs-literal\">null</span>,\n <span class=\"hljs-comment\">// function: uploading progress listener.</span>\n <span class=\"hljs-comment\">// *only listen one request.*</span>\n <span class=\"hljs-comment\">// arguments: index, chunkIndex, chunksNum, loaded, total.</span>\n onProgress: <span class=\"hljs-literal\">null</span>,\n <span class=\"hljs-comment\">// function: overall uploading progress listener.</span>\n <span class=\"hljs-comment\">// arguments: index, loaded, total</span>\n onOverAllProgress: <span class=\"hljs-literal\">null</span>,\n <span class=\"hljs-comment\">// function: called when one request is ended.</span>\n <span class=\"hljs-comment\">// arguments: index, chunkIndex, chunksNum</span>\n onLoad: <span class=\"hljs-literal\">null</span>,\n <span class=\"hljs-comment\">// function: called when one request is aborted.</span>\n <span class=\"hljs-comment\">// arguments: index, chunkIndex, chunksNum</span>\n onAbort: <span class=\"hljs-literal\">null</span>,\n <span class=\"hljs-comment\">// function: called when one request happens error.</span>\n <span class=\"hljs-comment\">// arguments: index, chunkIndex, chunksNum</span>\n onError: <span class=\"hljs-literal\">null</span>\n}\n</code></pre>\n</li>\n<li><p>服务器数据处理 (Node.js)</p>\n<p>数据分段写入文件</p>\n<pre><code class=\"lang-js\">function writeBuffer(bf, path, pos) {\n var fd = fs.openSync(path, <span class=\"hljs-string\">'a+'</span>);\n fs.writeSync(fd, bf, <span class=\"hljs-number\">0</span>, bf.length, Number(pos) || <span class=\"hljs-number\">0</span>)\n console.<span class=\"hljs-built_in\">log</span>(`write buffer, pos: ${pos}, path: ${path}, length: ${bf.length}`)\n}\n\nfunction store(<span class=\"hljs-built_in\">param</span>, chunks) {\n <span class=\"hljs-built_in\">param</span>.chunks = <span class=\"hljs-built_in\">param</span>.chunks || <span class=\"hljs-number\">1</span>\n <span class=\"hljs-built_in\">param</span>.chunk = <span class=\"hljs-built_in\">param</span>.chunk || <span class=\"hljs-number\">0</span>\n var p = path.<span class=\"hljs-built_in\">join</span>(<span class=\"hljs-string\">'./upload'</span>, <span class=\"hljs-built_in\">param</span>.<span class=\"hljs-built_in\">name</span>)\n var bf = Buffer.concat(chunks);\n\n var json = db.get(<span class=\"hljs-built_in\">param</span>.md5);\n <span class=\"hljs-keyword\">if</span>(json) {\n     json.pos = parseInt(json.pos!=null?json.pos : <span class=\"hljs-number\">0</span>)\n     json.<span class=\"hljs-built_in\">size</span> = parseInt(json.<span class=\"hljs-built_in\">size</span>!=null?json.<span class=\"hljs-built_in\">size</span> : <span class=\"hljs-number\">0</span>)\n }\n <span class=\"hljs-keyword\">if</span>(!json || (json.pos+json.<span class=\"hljs-built_in\">size</span>) &lt;= <span class=\"hljs-built_in\">param</span>.pos) {\n     <span class=\"hljs-comment\">// 新的数据pos比数据库中大，更新数据</span>\n     <span class=\"hljs-built_in\">param</span>.<span class=\"hljs-built_in\">size</span> = bf.length\n     db.<span class=\"hljs-built_in\">set</span>(<span class=\"hljs-built_in\">param</span>.md5, <span class=\"hljs-built_in\">param</span>)\n     db.save();\n     writeBuffer(bf, p, <span class=\"hljs-built_in\">param</span>.pos || <span class=\"hljs-number\">0</span>)\n }\n}\n\nvar multiparty = require(<span class=\"hljs-string\">'multiparty'</span>)\nvar form = new multiparty.Form({\n autoFields: <span class=\"hljs-literal\">true</span>,\n autoFiles: <span class=\"hljs-literal\">false</span>,\n});\n\nform.on(<span class=\"hljs-string\">'part'</span>, (part) =&gt; {\n form.on(<span class=\"hljs-string\">'aborted'</span>, () =&gt; {\n     <span class=\"hljs-comment\">//意外退出或者暂停都会保存数据</span>\n     console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">'aborted'</span>);\n     store(<span class=\"hljs-built_in\">param</span>, chunks)\n })\n\n var chunks = []\n part.on(<span class=\"hljs-string\">'data'</span>, (data) =&gt; {\n     <span class=\"hljs-keyword\">if</span>(part.filename) {\n         chunks.push(data)\n     }\n }).on(<span class=\"hljs-string\">'end'</span>, () =&gt; {\n     console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">'end'</span>)\n     store(<span class=\"hljs-built_in\">param</span>, chunks)\n })\n\n});\nform.on(<span class=\"hljs-string\">'field'</span>, (<span class=\"hljs-built_in\">name</span>, value) =&gt; {\n <span class=\"hljs-built_in\">param</span>[<span class=\"hljs-built_in\">name</span>] = value;\n});\n</code></pre>\n</li>\n</ol>\n</li>\n</ul>\n","head":{"title":"分片上传与断点续传解决方案","date":"14 Sep 2016","tags":["上传","后端"]}},"图书销售系统（书窝）":{"content":"<h1 id=\"-\">图书销售系统 —— 书窝</h1>\n<p><a href=\"http://bookshop.moyuyc.xyz\"><strong>书窝线上地址</strong></a>\n<a href=\"https://github.com/moyuyc/book-shopping\"><strong>GitHub地址</strong></a>\n由于时间有限，事务较重，系统实现只好从简。</p>\n<hr>\n<h2 id=\"-\">需求分析</h2>\n<blockquote>\n<p>需交课程设计报告和软件（源代码）。课程设计报告将存档。报告内容包括：需求分析、算法思想描述、数据流图、E-R图、数据字典、程序结构、收获与体会等。\n功能要求：实现一个基于web的网上图书的销售管理系统，能提供多种条件的查询，还应具有会员管理、意见反馈、销售分析等功能。将留言板、图表分析、文件上传等思想纳入其中。</p>\n</blockquote>\n<!--more-->\n<h3 id=\"-\">用户系统</h3>\n<p> 需要用户系统，用户是系统的根源，是数据的源头，该系统的用户就是要求中所说的会员，所以需要提供如下功能：</p>\n<ul>\n<li>用户注册</li>\n<li>用户登录</li>\n<li>用户信息查看</li>\n<li>用户既可以是卖家，亦可以是买家</li>\n</ul>\n<h3 id=\"-\">用户留言(信息反馈)</h3>\n<p>为了逐渐完善系统，提供用户与建站者的交流通道，并且该通道不仅限于用户与建站者，用户与用户之间也能够互相交流，提高趣味性。具体功能如下：</p>\n<ul>\n<li>用户留言</li>\n<li>留言查看</li>\n</ul>\n<h3 id=\"-\">卖家买家系统</h3>\n<p>买卖离不开卖家买家，该系统亦是如此，需要如下功能列表：</p>\n<ul>\n<li>卖家<ul>\n<li>图书上架</li>\n<li>图书修改</li>\n<li>图书查看</li>\n<li>销售情况图表</li>\n</ul>\n</li>\n<li>买家<ul>\n<li>图书查看购买</li>\n<li>买书记录查看</li>\n<li>图书评论与删除</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"-\">设计文档</h2>\n<p>该部分将涉及整个系统从无到有的设计思路，自底向上有</p>\n<ol>\n<li>数据库选择和设计</li>\n<li>服务器框架选择和设计</li>\n<li>前端框架选择和设计</li>\n</ol>\n<p>并且将针对具体细节给出相关表示，如数据字典，ER图，数据流图，算法设计等。</p>\n<h3 id=\"-\">数据库选择和设计</h3>\n<h4 id=\"-\">选择与原因</h4>\n<p>该系统我选择了<code>MySQL</code>数据库，具体原因如下：</p>\n<ol>\n<li><code>MySQL</code>十分轻量，相比课堂上讲的<code>SQL Server</code>数据库，一个安装包2GB，MySQL的500MB简直小巫见大巫（最近看到属于<code>NoSQL</code>的<code>MongoDB</code>居然只有100MB）。</li>\n<li>短时间需要完成该系统，同时对于<code>MySQL</code>十分熟悉，之前做在线订票系统，在线考试系统等都是建立在MySQL上。</li>\n<li>具有<code>SQLYog</code>这种强大方便的图形操作软件，轻松导入导出数据，轻松连接远程服务器传递数据。</li>\n</ol>\n<p>基于以上原因，因此选择了<code>MySQL</code>。</p>\n<h4 id=\"-\">数据字典</h4>\n<p> 用户</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>username</td>\n<td>varchar(12)</td>\n<td>用户名,唯一, 6-12位</td>\n</tr>\n<tr>\n<td>email</td>\n<td>varchar(20)</td>\n<td>电子邮箱,唯一</td>\n</tr>\n<tr>\n<td>password</td>\n<td>varchar(12)</td>\n<td>密码,6-12位</td>\n</tr>\n<tr>\n<td>registerDate</td>\n<td>date</td>\n<td>注册日期</td>\n</tr>\n</tbody>\n</table>\n<p> 留言</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>username</td>\n<td>varchar(12)</td>\n<td>留言者用户名</td>\n</tr>\n<tr>\n<td>content</td>\n<td>text</td>\n<td>留言内容</td>\n</tr>\n<tr>\n<td>datetime</td>\n<td>datetime</td>\n<td>留言时间</td>\n</tr>\n</tbody>\n</table>\n<p> 图书</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bookID</td>\n<td>char(8)</td>\n<td>图书ID,唯一,如BK123456</td>\n</tr>\n<tr>\n<td>title</td>\n<td>varchar(25)</td>\n<td>书名</td>\n</tr>\n<tr>\n<td>author</td>\n<td>varchar(25)</td>\n<td>作者</td>\n</tr>\n<tr>\n<td>press</td>\n<td>varchar(25)</td>\n<td>出版社</td>\n</tr>\n<tr>\n<td>price</td>\n<td>decimal(10,1)</td>\n<td>价格,保留小数点后一位</td>\n</tr>\n<tr>\n<td>quantity</td>\n<td>int(11)</td>\n<td>库存量(本)</td>\n</tr>\n<tr>\n<td>image</td>\n<td>mediumblob</td>\n<td>封面图片</td>\n</tr>\n<tr>\n<td>seller</td>\n<td>varchar(12)</td>\n<td>卖家用户名</td>\n</tr>\n<tr>\n<td>importDate</td>\n<td>date</td>\n<td>上架日期</td>\n</tr>\n</tbody>\n</table>\n<p> 图书评论</p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>username</td>\n<td>varchar(12)</td>\n<td>评论人用户名</td>\n</tr>\n<tr>\n<td>bookID</td>\n<td>char(8)</td>\n<td>被评论图书</td>\n</tr>\n<tr>\n<td>datetime</td>\n<td>datetime</td>\n<td>评论时间</td>\n</tr>\n<tr>\n<td>content</td>\n<td>text</td>\n<td>评论内容</td>\n</tr>\n</tbody>\n</table>\n<p> 交易\n<strong>因为交易完成后，卖家仍然可以对图书进行修改，所以我将买进时图书信息都存放在此表中，表示买进时图书的信息。</strong></p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>类型</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>tradeID</td>\n<td>char(10)</td>\n<td>交易记录ID,唯一,如TD12345678</td>\n</tr>\n<tr>\n<td>tradeDate</td>\n<td>date</td>\n<td>交易日期</td>\n</tr>\n<tr>\n<td>buyer</td>\n<td>varchar(12)</td>\n<td>买家用户名</td>\n</tr>\n<tr>\n<td>bookID</td>\n<td>char(8)</td>\n<td>书本ID</td>\n</tr>\n<tr>\n<td>title</td>\n<td>varchar(25)</td>\n<td>书名</td>\n</tr>\n<tr>\n<td>author</td>\n<td>varchar(25)</td>\n<td>作者</td>\n</tr>\n<tr>\n<td>press</td>\n<td>varchar(25)</td>\n<td>出版社</td>\n</tr>\n<tr>\n<td>price</td>\n<td>decimal(10,1)</td>\n<td>买进价格</td>\n</tr>\n<tr>\n<td>quantity</td>\n<td>int(11)</td>\n<td>库存</td>\n</tr>\n<tr>\n<td>image</td>\n<td>mediumblob</td>\n<td>封面</td>\n</tr>\n<tr>\n<td>seller</td>\n<td>varchar(12)</td>\n<td>卖家</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"e-r-\">E-R图</h4>\n<p><img src=\"http://moyuyc.github.io/images/ER.png\" alt=\"ER\"></p>\n<h3 id=\"-\">服务器框架选择和设计</h3>\n<h4 id=\"-\">选择与原因</h4>\n<p>作为<code>JS</code>动态语言的受益者，我服务器肯定就选择<code>nodejs</code>了。</p>\n<ol>\n<li>未使用过<code>nodejs</code>开发一个相对完整的系统，打算就将该系统作为入门了。</li>\n<li><code>nodejs</code>非常适合IO密集型的应用，采用的是异步事件队列的机制。</li>\n<li><code>JS</code>语言简洁灵活有趣。</li>\n</ol>\n<h4 id=\"-nodejs-express-\"><code>nodejs</code>与<code>express</code></h4>\n<ul>\n<li><code>nodejs</code>\n基于ChromeV8引擎，以<code>JS</code>作为宿主语言的一个虚拟环境，<code>JS</code>于<code>NodeJs</code>可以看做是<code>Java</code>于<code>JVM</code>，<code>NodeJs</code>现在正在不断发展中，目标是与<code>Java</code>一样，能够形成一套十分完备的库，目前<code>NodeJs</code>的生态环境非常好，第三方模块层出不穷，而且由于<code>npm</code>，这些包是否方便管理与下载。</li>\n<li><code>express</code>\n介绍完<code>nodejs</code>，那么<code>express</code>是什么呢？<code>express</code>是<code>nodejs</code>的一个第三方Web框架，开发者可以用该框架非常方便有效的建立<code>HTTP</code>服务。</li>\n</ul>\n<h4 id=\"-\">结构设计</h4>\n<h5 id=\"-\">文件结构</h5>\n<p><img src=\"http://moyuyc.github.io/images/files.png\" alt=\"files\"> \n<code>db/</code> 所有数据库操作代码\n<code>public/</code> 静态资源库，如js,css\n<code>routes/</code> 路由操作diam，对应url\n<code>utils/</code> 工具包代码\n<code>views/</code> Jade模板文件\n<code>app.js</code> 系统入口\n<code>mysql.sql</code> mysql数据文件，可导入</p>\n<h5 id=\"-\">部分数据流图</h5>\n<ul>\n<li>用户留言\n<img src=\"http://moyuyc.github.io/images/datastream3.png\" alt=\"用户留言\"></li>\n<li>卖家添加图书\n<img src=\"http://moyuyc.github.io/images/datastream1.png\" alt=\"卖家添加图书\"></li>\n<li>买家购书\n<img src=\"http://moyuyc.github.io/images/datastream2.png\" alt=\"买家购书\"></li>\n</ul>\n<h5 id=\"-\">部分算法设计</h5>\n<p>首先对于留言评论，防止恶意用户刷留言评论，设置了定时销毁器。\n算法设计如下：</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> _timer = {};\n\n<span class=\"hljs-keyword\">var</span> Timer = {\n    <span class=\"hljs-keyword\">set</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(key,mill)</span> </span>{ <span class=\"hljs-comment\">//设置定时器的关键字与销毁时间</span>\n        <span class=\"hljs-keyword\">this</span>.remove(key);\n        _timer[key] ={mill:mill};\n        _timer[key].code = setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">()</span> </span>{\n            <span class=\"hljs-keyword\">delete</span> _timer[key];\n        },mill);\n    },\n    isExist : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(key)</span></span>{\n        <span class=\"hljs-keyword\">return</span> !!_timer[key];\n    },\n    remove : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(key)</span></span>{\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.isExist(key)){\n            clearTimeout(_timer[key].code);\n            <span class=\"hljs-keyword\">delete</span> _timer[key];\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n}\n</code></pre>\n<p>该系统具有销售分析，如某卖家所有销售情况的折线图，x轴表示日期，y轴表示该日售出书籍数目。\n算法设计如下：</p>\n<pre><code class=\"lang-javascript\">// <span class=\"hljs-built_in\">all</span> 表示所有卖家销售记录，<span class=\"hljs-number\">0</span>-N 时间从现在到以前\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span> makeLineChart(<span class=\"hljs-built_in\">all</span>) {\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">all</span>==null || <span class=\"hljs-built_in\">all</span>.length==<span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">return</span>;\n    //返回数据中 keys表示日期数组，<span class=\"hljs-keyword\">data</span>表示对应keys日期的销售量\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">all</span>.reduceRight((p,n)=&gt;{ // 从右向左归并\n        var date = n.tradeDate;\n        <span class=\"hljs-keyword\">if</span>(p.keys[p.keys.length-<span class=\"hljs-number\">1</span>]<span class=\"hljs-comment\">!=date){</span>\n            p.keys.push(date);\n            p.<span class=\"hljs-keyword\">data</span>.push(<span class=\"hljs-number\">1</span>);\n        }<span class=\"hljs-keyword\">else</span>{\n            p.<span class=\"hljs-keyword\">data</span>[p.<span class=\"hljs-keyword\">data</span>.length-<span class=\"hljs-number\">1</span>]++;\n        }\n        <span class=\"hljs-keyword\">return</span> p;             \n    },{keys:[],<span class=\"hljs-keyword\">data</span>:[]});\n}\n</code></pre>\n<p>销售分析中还具有周最受欢迎图书饼图，表示一周内各个图书销售情况。\n算法设计如下：</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// all 表示所有卖家销售记录，0-N 时间从现在到以前</span>\nfunction makePieChart(all) {\n    <span class=\"hljs-keyword\">if</span>(all==<span class=\"hljs-built_in\">null</span> || all.length==<span class=\"hljs-number\">0</span>)\n        <span class=\"hljs-keyword\">return</span>;\n    var pivot = all[all.length<span class=\"hljs-number\">-1</span>];  <span class=\"hljs-comment\">// 取出最后一个交易记录，也就是最近的</span>\n    var <span class=\"hljs-keyword\">end</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(pivot.tradeDate).setHours(<span class=\"hljs-number\">24</span>); <span class=\"hljs-comment\">// 根据最近时间的时间得到第二天0点时间</span>\n    var start = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-keyword\">end</span> - <span class=\"hljs-number\">1000</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">60</span>*<span class=\"hljs-number\">24</span>*<span class=\"hljs-number\">7</span>); <span class=\"hljs-comment\">// 减去7天毫秒数，得到七天前时间</span>\n    var data = {keys:[pivot.<span class=\"hljs-built_in\">title</span>],data:[<span class=\"hljs-number\">1</span>]},titleMap = {};\n    titleMap[pivot.<span class=\"hljs-built_in\">title</span>]=<span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">//初始化参数</span>\n    <span class=\"hljs-keyword\">for</span>(var i=all.length<span class=\"hljs-number\">-2</span>;i&gt;=<span class=\"hljs-number\">0</span>;i--){\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(all[i].tradeDate)&lt;start) <span class=\"hljs-comment\">// 如果时间再七天之前，跳出循环</span>\n            <span class=\"hljs-keyword\">break</span>;\n        var <span class=\"hljs-built_in\">title</span> = all[i].<span class=\"hljs-built_in\">title</span>;\n        <span class=\"hljs-keyword\">if</span>(titleMap[<span class=\"hljs-built_in\">title</span>]==<span class=\"hljs-built_in\">null</span>){\n            titleMap[<span class=\"hljs-built_in\">title</span>] = data.keys.length;\n            data.keys.<span class=\"hljs-keyword\">push</span>(<span class=\"hljs-built_in\">title</span>);\n            data.data.<span class=\"hljs-keyword\">push</span>(<span class=\"hljs-number\">1</span>);\n        }<span class=\"hljs-keyword\">else</span>\n            data.data[titleMap[<span class=\"hljs-built_in\">title</span>]]++;\n    }\n    <span class=\"hljs-keyword\">return</span> data;\n}\n</code></pre>\n<h3 id=\"-\">前端框架选择和设计</h3>\n<h4 id=\"-\">选择与原因</h4>\n<p>针对于用户之间接触的前端界面，我选择了<code>Bootstrap3.0 UI</code>，<code>jQuery</code>，<code>marked.js</code>，<code>highlight.js</code>，<code>pace.js</code>，下面做出相关介绍与说明：</p>\n<ul>\n<li><code>BootStrap3.0</code> \n一套完备的UI框架，包括美观的css样式和一些基于jQuery的组件。可以让开发者用最少的时间建立一个美观的界面。</li>\n<li><code>jQuery</code>\n因为<code>BootStrap</code>组件需要，而且能够方便进行DOM操作，强大的选择器与链式调用。</li>\n<li><code>marked.js</code>\n一个将<code>markdown</code>文本翻译为HTML的库，api简单。</li>\n<li><code>highlight.js</code>\n与<code>marked.js</code>配套使用，能够将代码段解析为具有样式类的库。</li>\n<li><code>pace.js</code>\n通过检查浏览器加载的状态，判断文档加载进度，并且提供了一系列的css样式，能够在页面加载的时候显示页面加载进度。</li>\n</ul>\n<h4 id=\"-\">文件结构</h4>\n<pre><code>public/\n├── javascripts/\n│   ├── addbook<span class=\"hljs-selector-class\">.js</span>\n│   ├── Ajaxdelete<span class=\"hljs-selector-class\">.js</span>\n│   ├── indexjs<span class=\"hljs-selector-class\">.js</span>\n│   ├── msgAnimate<span class=\"hljs-selector-class\">.js</span>\n│   ├── msgjs<span class=\"hljs-selector-class\">.js</span>\n│   ├── popImage<span class=\"hljs-selector-class\">.js</span>\n│   ├── search<span class=\"hljs-selector-class\">.js</span>\n│   ├── selljs<span class=\"hljs-selector-class\">.js</span>\n│   ├── utils<span class=\"hljs-selector-class\">.js</span>\n└── stylesheets/\n    ├── bootstrap/\n    ├── style<span class=\"hljs-selector-class\">.less</span>\n    ├── style<span class=\"hljs-selector-class\">.css</span>\n    ├── hljs-github-min<span class=\"hljs-selector-class\">.css</span>\n    └── markdown.less\n</code></pre><p><code>stylesheets/</code>文件夹放的是样式文件，其中的<code>style.less</code>是入口，<code>style.css</code>是利用node模块压缩后真正传送的样式文件</p>\n<h4 id=\"-\">特殊功能说明</h4>\n<ol>\n<li><p>提示框动态固定显示\n<img src=\"http://moyuyc.github.io/images/msg.png\" alt=\"msg.png\">\n方法一：（固定width）</p>\n<pre><code class=\"lang-less\"><span class=\"hljs-selector-class\">.messages</span>{\n<span class=\"hljs-selector-class\">.box-shadow</span>(0px 0px 8px 3px <span class=\"hljs-selector-id\">#bbb</span>);\n<span class=\"hljs-attribute\">z-index</span>: <span class=\"hljs-number\">10000</span>;\n<span class=\"hljs-attribute\">position</span>: fixed;\n<span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">340px</span>;\n<span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">50px</span>;\n<span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">50%</span>;\n<span class=\"hljs-attribute\">top</span> : -<span class=\"hljs-number\">50px</span>;\n<span class=\"hljs-attribute\">margin-left</span>: -<span class=\"hljs-number\">170px</span>;\n\n-webkit-<span class=\"hljs-attribute\">transition</span>: all <span class=\"hljs-number\">2s</span>;\n-moz-<span class=\"hljs-attribute\">transition</span>: all <span class=\"hljs-number\">2s</span>;\n-ms-<span class=\"hljs-attribute\">transition</span>: all <span class=\"hljs-number\">2s</span>;\n-o-<span class=\"hljs-attribute\">transition</span>: all <span class=\"hljs-number\">2s</span>;\n<span class=\"hljs-attribute\">transition</span>: all <span class=\"hljs-number\">2s</span>;\n<span class=\"hljs-attribute\">opacity</span>:<span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-built_in\">window</span>.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n $(<span class=\"hljs-string\">'.messages'</span>)\n     .css({<span class=\"hljs-string\">'transform'</span>:<span class=\"hljs-string\">'translate(0,120px)'</span>,<span class=\"hljs-attr\">opacity</span>:<span class=\"hljs-number\">1</span>})\n}\n</code></pre>\n<p>方法二：width自适应</p>\n<pre><code class=\"lang-less\"><span class=\"hljs-selector-class\">.messages</span>{\n<span class=\"hljs-selector-class\">.box-shadow</span>(0px 0px 8px 3px <span class=\"hljs-selector-id\">#bbb</span>);\n<span class=\"hljs-attribute\">z-index</span>: <span class=\"hljs-number\">10000</span>;\n<span class=\"hljs-attribute\">position</span>: fixed;\n<span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">50%</span>;\n<span class=\"hljs-attribute\">top</span> : <span class=\"hljs-number\">0px</span>;\n-webkit-<span class=\"hljs-attribute\">transform</span>: translate(-<span class=\"hljs-number\">50%</span>,-<span class=\"hljs-number\">50%</span>);\n-moz-<span class=\"hljs-attribute\">transform</span>: translate(-<span class=\"hljs-number\">50%</span>,-<span class=\"hljs-number\">50%</span>);\n-ms-<span class=\"hljs-attribute\">transform</span>: translate(-<span class=\"hljs-number\">50%</span>,-<span class=\"hljs-number\">50%</span>);\n-o-<span class=\"hljs-attribute\">transform</span>: translate(-<span class=\"hljs-number\">50%</span>,-<span class=\"hljs-number\">50%</span>);\n<span class=\"hljs-attribute\">transform</span>: translate(-<span class=\"hljs-number\">50%</span>,-<span class=\"hljs-number\">50%</span>);\n\n-webkit-<span class=\"hljs-attribute\">transition</span>: all <span class=\"hljs-number\">2s</span>;\n-moz-<span class=\"hljs-attribute\">transition</span>: all <span class=\"hljs-number\">2s</span>;\n-ms-<span class=\"hljs-attribute\">transition</span>: all <span class=\"hljs-number\">2s</span>;\n-o-<span class=\"hljs-attribute\">transition</span>: all <span class=\"hljs-number\">2s</span>;\n<span class=\"hljs-attribute\">transition</span>: all <span class=\"hljs-number\">2s</span>;\n<span class=\"hljs-attribute\">opacity</span>:<span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">window</span>.onload = <span class=\"hljs-keyword\">function</span> () {\n $(<span class=\"hljs-string\">'.messages'</span>)\n     // .css({<span class=\"hljs-string\">'transform'</span>:<span class=\"hljs-string\">'translate(0,120px)'</span>,opacity:<span class=\"hljs-number\">1</span>})\n     .css({<span class=\"hljs-string\">'margin-top'</span>:<span class=\"hljs-string\">'140px'</span>,opacity:<span class=\"hljs-number\">1</span>})\n}\n</code></pre>\n</li>\n<li><p>跳至评论，评论区高亮\n<img src=\"http://moyuyc.github.io/images/blink.png\" alt=\"blink.png\"></p>\n<pre><code class=\"lang-less\">@keyframes blinking {\n 0% {\n     <span class=\"hljs-comment\">//opacity: 0;</span>\n }\n 30%{\n     <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fcf8e3</span>;\n }\n 100% {\n     <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fcf8e3</span>;\n     <span class=\"hljs-comment\">//opacity: 1;</span>\n }\n}\n<span class=\"hljs-selector-class\">.blink</span>{\n <span class=\"hljs-selector-class\">.animation</span>(blinking 2<span class=\"hljs-selector-class\">.8s</span>)\n}\n</code></pre>\n<pre><code class=\"lang-js\">$(<span class=\"hljs-string\">'[role=link-msg]'</span>).click(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n     <span class=\"hljs-keyword\">var</span> x = $(<span class=\"hljs-keyword\">this</span>.hash).next().children().removeClass(<span class=\"hljs-string\">'blink'</span>)\n     setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n         x.addClass(<span class=\"hljs-string\">'blink'</span>).children(<span class=\"hljs-string\">'textarea'</span>).focus();\n     },<span class=\"hljs-number\">0</span>)\n });\n</code></pre>\n</li>\n<li><p>markdown编辑区可粘贴网络图片</p>\n<pre><code class=\"lang-js\">input.onpaste = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">e</span>) </span>{\n     <span class=\"hljs-keyword\">var</span> clipboardData, pastedData;\n\n     <span class=\"hljs-comment\">// Get pasted data via clipboard API</span>\n     clipboardData = e.clipboardData || <span class=\"hljs-built_in\">window</span>.clipboardData;\n     <span class=\"hljs-keyword\">var</span> text = clipboardData.getData(<span class=\"hljs-string\">'text/plain'</span>);\n     <span class=\"hljs-keyword\">if</span>(!text){\n         <span class=\"hljs-keyword\">var</span> img = clipboardData.getData(<span class=\"hljs-string\">'text/html'</span>);\n         img.replace(<span class=\"hljs-regexp\">/&lt;img.+src=\"(.+?)\"/g</span>,(m,c)=&gt;{\n             e.preventDefault();\n             <span class=\"hljs-comment\">// 调用</span>\n             <span class=\"hljs-built_in\">document</span>.execCommand(<span class=\"hljs-string\">'insertText'</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-string\">\"![ClipboardImage](\"</span>+c+<span class=\"hljs-string\">\")\"</span>);\n         })\n     }\n };\n</code></pre>\n</li>\n<li>代码段右上角显示语言\n<img src=\"http://moyuyc.github.io/images/prebefore.png\" alt=\"prebefore.png\"></li>\n</ol>\n<hr>\n<h2 id=\"-\">系统截图</h2>\n<p><img src=\"http://moyuyc.github.io/images/p1.png\" alt=\"png\"></p>\n<p><img src=\"http://moyuyc.github.io/images/p2.png\" alt=\"png\"></p>\n<p><img src=\"http://moyuyc.github.io/images/p3.png\" alt=\"png\"></p>\n<p><img src=\"http://moyuyc.github.io/images/p4.png\" alt=\"png\"></p>\n<p><img src=\"http://moyuyc.github.io/images/p5.png\" alt=\"png\"></p>\n<p><img src=\"http://moyuyc.github.io/images/p6.png\" alt=\"png\"></p>\n<p><img src=\"http://moyuyc.github.io/images/p7.png\" alt=\"png\"></p>\n<p><img src=\"http://moyuyc.github.io/images/p8.png\" alt=\"png\"></p>\n<p><img src=\"http://moyuyc.github.io/images/p9.png\" alt=\"png\"></p>\n<p><img src=\"http://moyuyc.github.io/images/p10.png\" alt=\"png\"></p>\n<hr>\n<h2 id=\"-\">收获与体会</h2>\n<ul>\n<li>感受到了<code>nodejs</code>与<code>express</code>的魅力</li>\n<li>增强了系统的整体把控架构能力</li>\n<li>掌握了一些常见具体问题的处理方式</li>\n<li>不足在于后端异步结构代码比较冗杂，难于管理</li>\n</ul>\n<h2 id=\"-\">参考资料</h2>\n<ul>\n<li><a href=\"http://www.cnblogs.com/kongxianghai/archive/2015/02/15/4293139.html\">nodejs express4.x 文件上传</a></li>\n<li><a href=\"http://jade-lang.com/reference/attributes/\">Jade 完整教程</a></li>\n<li><a href=\"http://www.jiawin.com/pace-js-automatic-page-load-progress-bar\">page.js</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2176861/javascript-get-clipboard-data-on-paste-event-cross-browser\">javascript-get-clipboard-data-on-paste-event-cross-browser</a></li>\n<li><a href=\"http://www.haorooms.com/post/jq_js_xxjdt\">www.haorooms.com/post/jq_js_xxjdt</a></li>\n</ul>\n","head":{"title":"图书销售系统（书窝）","date":"20 Jun 2016","categories":["后端","前端"],"tags":["express","jade","markdown","highlight","less","nodejs"]}},"基于socket-io实现的简易你画我猜":{"content":"<h1 id=\"-\">前言</h1>\n<p>一直都想好好的学习运用<code>node</code>，一直都不知道要做什么东西，最近Java Web老师要求做个前端的应用，既然是前端应用，那肯定得是单页应用了，\n而且node很适用于高并发的实时应用，所以便选择<code>node</code>以及基于<code>node</code>的<code>socket.io</code>\n<!--more--></p>\n<h1 id=\"-\">演示地址</h1>\n<ul>\n<li>实时画板+聊天室\n<a href=\"http://paint.moyuyc.xyz/\">Demo</a>\n<a href=\"https://github.com/moyuyc/paint_online\">GitHub</a>  </li>\n<li>你画我猜+聊天室\n<a href=\"http://paintgame.moyuyc.xyz/\">Demo</a>\n<a href=\"https://github.com/moyuyc/paint_game\">GitHub</a></li>\n</ul>\n<h1 id=\"-\">解释</h1>\n<h2 id=\"-socket-io-\">关于<code>Socket.IO</code></h2>\n<blockquote>\n<p><code>Socket.IO</code> 是基于node实现的套接字前端后端数据交互的库，通过它的封装，使用者可以很方便的开发，而且支持<code>websocket</code>/<code>ajax 长轮询</code>等方法，兼容低版本浏览器。</p>\n</blockquote>\n<p>基本使用如下：\n<em>服务器端</em></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> httpd = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">'http'</span>).createServer(handler);\n<span class=\"hljs-keyword\">var</span> io = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">'socket.io'</span>).listen(httpd);\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">handler</span><span class=\"hljs-params\">(req,res)</span> </span>{\n\n}\nio.sockets.on(<span class=\"hljs-string\">'connection'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(socket)</span></span>{\n    <span class=\"hljs-comment\">//新的客户端连接</span>\n    socket.on(<span class=\"hljs-string\">'login'</span>,(name,age)=&gt;{\n        socket.emit(<span class=\"hljs-string\">'message'</span>,name+<span class=\"hljs-string\">','</span>+age);<span class=\"hljs-comment\">//触发客户端message事件</span>\n    })\n});\n</code></pre>\n<p><em>客户端</em>\n引入<code>js</code>文件</p>\n<pre><code class=\"lang-html\"><span class=\"hljs-section\">&lt;script src=\"socket.io/socket.io.js'&gt;</span><span class=\"hljs-section\">&lt;/script&gt;</span>\n</code></pre>\n<p>进行交互</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> socket = io.connect();      <span class=\"hljs-comment\">//触发服务器端connection事件</span>\nsocket.emit(<span class=\"hljs-string\">'login'</span>,<span class=\"hljs-string\">'moyu'</span>,<span class=\"hljs-number\">20</span>); <span class=\"hljs-comment\">//触发服务器端login事件</span>\nsocket.on(<span class=\"hljs-string\">'message'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(msg)</span></span>{\n    alert(msg);\n})\n</code></pre>\n<h2 id=\"-\">关于排行榜</h2>\n<p>利用了js的匿名立即执行函数进行模块化包装</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> tops = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-comment\">/*\n     * _tops : 存放所有id,按照回答正确数倒序排列\n     * idmap : 一个hash map结构，key为id，value为名字与回答正确数\n     * n : 前n个，在toJSON调用\n     */</span>\n    <span class=\"hljs-keyword\">var</span> _tops = [],idmap={},n=<span class=\"hljs-number\">10</span>;\n    <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">set</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">id,name,v</span>) </span>{\n            <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">this</span>.isExists(id))<span class=\"hljs-comment\">//如果id已经存在则删除，防止出现重复id</span>\n                <span class=\"hljs-keyword\">this</span>.remove(id);\n            <span class=\"hljs-comment\">// 找到按照v从大到小所对应的位置</span>\n            <span class=\"hljs-keyword\">var</span> i = _tops.findIndex(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span>=&gt;</span>{<span class=\"hljs-keyword\">return</span> idmap[x].v&lt;v;});\n            i= i===<span class=\"hljs-number\">-1</span> ? _tops.length : i;\n            <span class=\"hljs-comment\">// id在i+1位置插入至_tops</span>\n            _tops.splice(i,<span class=\"hljs-number\">0</span>,id);\n            idmap[id] = {<span class=\"hljs-attr\">name</span>:name,<span class=\"hljs-attr\">v</span>:v};\n        },\n        <span class=\"hljs-attr\">isExists</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">id</span>) </span>{\n            <span class=\"hljs-keyword\">return</span> idmap[id]!=<span class=\"hljs-literal\">null</span>;\n        },\n        <span class=\"hljs-attr\">remove</span> : <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">id</span>) </span>{\n            <span class=\"hljs-keyword\">var</span> i = _tops.indexOf(id);\n            <span class=\"hljs-keyword\">if</span>(i!==<span class=\"hljs-number\">-1</span>) {\n                _tops.splice(i, <span class=\"hljs-number\">1</span>);\n                <span class=\"hljs-keyword\">delete</span> idmap[id];\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            }\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n        },\n        <span class=\"hljs-attr\">get</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">id</span>) </span>{\n            <span class=\"hljs-keyword\">return</span> idmap[id];\n        },\n        <span class=\"hljs-attr\">toJSON</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n            <span class=\"hljs-comment\">// JSON.stringify方法会隐式调用该方法        </span>\n            <span class=\"hljs-keyword\">var</span> arr = [];\n            _tops.every(<span class=\"hljs-function\">(<span class=\"hljs-params\">x,i</span>)=&gt;</span>{\n                <span class=\"hljs-keyword\">if</span>(i&gt;=n) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n                arr.push({<span class=\"hljs-attr\">id</span>:x,<span class=\"hljs-attr\">v</span>:idmap[x].v,<span class=\"hljs-attr\">name</span>:idmap[x].name});\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            });\n            <span class=\"hljs-keyword\">return</span> arr;\n        }\n    }\n}());\n</code></pre>\n<h2 id=\"-bootstrap-\">关于<code>Bootstrap</code>栅格</h2>\n<pre><code class=\"lang-css\">.container{\n    <span class=\"hljs-attribute\">margin-right</span>: auto;\n    <span class=\"hljs-attribute\">margin-left</span>: auto;\n    <span class=\"hljs-comment\">//防止最外层的.row元素左右扩展15px</span>\n    <span class=\"hljs-attribute\">padding-left</span>: <span class=\"hljs-number\">15px</span>;\n    <span class=\"hljs-attribute\">padding-right</span>: <span class=\"hljs-number\">15px</span>;\n}\n\n.col-<span class=\"hljs-number\">3</span>{\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">30%</span>;\n}\n.col-<span class=\"hljs-number\">4</span>{\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">40%</span>;\n}\n.col-<span class=\"hljs-number\">9</span>{\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">90%</span>;\n}\n\n/.../\n\n.row{\n    <span class=\"hljs-comment\">/* 向外左右延伸15px */</span>\n    <span class=\"hljs-attribute\">margin-right</span>: -<span class=\"hljs-number\">15px</span>;\n    <span class=\"hljs-attribute\">margin-left</span>: -<span class=\"hljs-number\">15px</span>;\n}\n<span class=\"hljs-comment\">/* 防止子元素为float,父元素的高度为0 */</span>\n<span class=\"hljs-selector-class\">.row</span>:before,\n<span class=\"hljs-selector-class\">.row</span>:after {\n    <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-string\">\" \"</span>;\n    <span class=\"hljs-attribute\">display</span>: table;\n}\n<span class=\"hljs-selector-class\">.row</span>:after {\n    <span class=\"hljs-attribute\">clear</span>: both;\n}\n\n<span class=\"hljs-selector-class\">.col-1</span>, <span class=\"hljs-selector-class\">.col-2</span>, <span class=\"hljs-selector-class\">.col-3</span>, <span class=\"hljs-selector-class\">.col-4</span>, <span class=\"hljs-selector-class\">.col-5</span>, <span class=\"hljs-selector-class\">.col-6</span>, <span class=\"hljs-selector-class\">.col-7</span>, <span class=\"hljs-selector-class\">.col-8</span>, .col-<span class=\"hljs-number\">9</span>{\n    <span class=\"hljs-attribute\">padding-left</span>: <span class=\"hljs-number\">15px</span>;\n    <span class=\"hljs-attribute\">padding-right</span>: <span class=\"hljs-number\">15px</span>;\n    <span class=\"hljs-attribute\">float</span>:left;\n}\n</code></pre>\n<p>HTML结构</p>\n<pre><code class=\"lang-html\">&lt;main <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">'container'</span>&gt;\n    <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'row'</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'col-8'</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'row'</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'col-6'</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>col-6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'col-4'</span>&gt;</span>\n                    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>col-4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n                <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'col-2'</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>col-2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n&lt;<span class=\"hljs-regexp\">/main&gt;</span>\n</code></pre>\n<h2 id=\"-\">关于一栏（多栏）宽度固定，一栏自适应</h2>\n<ul>\n<li><a href=\"/htm/圣杯布局.html\">圣杯布局</a></li>\n<li><a href=\"/htm/双飞翼.html\">双飞翼</a></li>\n</ul>\n<h1 id=\"-\">感受</h1>\n<p>...做单页应用真的需要挺大的心脏，而且需要较好的整体的架构，好在<code>socket.io</code>对websocket封装的不错，变成了面向消息的方式，代码结构相对更加清晰了些。\n...不敢想象用Java做这种实时单页应用后端会有多么的「拗口」\n最后推荐一个实时的更加优秀的游戏，<a href=\"http://slither.io/\">slithe</a></p>\n","head":{"title":"基于socket.io实现的简易你画我猜","date":"22 May 2016","categories":["后端"],"tags":["nodejs","socket.io"]}},"感受Hexo的强大与高效（搭建Blog至GitHub Page教程）":{"content":"<p><strong>Hexo</strong> 是一个基于NodeJs平台实现的一个快速生成自己Blog的程序，据说作者是一位来自台湾的大学生，666.<br><a href=\"https://hexo.io/\">Hexo官方网站</a></p>\n<h2 id=\"-hexo\">首先，安装Hexo</h2>\n<h3 id=\"-nodejs\">先得有Nodejs</h3>\n<p><a href=\"https://nodejs.org/\">Nodejs官网</a>  </p>\n<h3 id=\"-hexo\">安装Hexo</h3>\n<ul>\n<li>全局安装Hexo<br><code>npm install -g hexo</code></li>\n<li>创建你的Blog/Hexo文件夹<br><code>hexo init blog</code></li>\n<li>进入blog文件夹<br><code>cd blog</code></li>\n<li>安装Hexo依赖包，根据blog文件夹中的package.json配置下载<br><code>npm install</code></li>\n<li>运行服务器（默认地址为 localhost:4000）<br><code>hexo server</code><br><strong><em>注意：这里不需要运行</em></strong> <code>hexo g</code> <strong><em>指令，所以我们访问的页面是根据nodejs动态生成的。</em></strong><!--more-->\n<h3 id=\"-hexo-theme\">选择你喜欢的Hexo Theme</h3>\n<a href=\"https://hexo.io/themes/\">Hexo主题选择</a><br>鄙人选择的是这位仁兄的 <a href=\"https://github.com\">https://github.com/yscoder</a><br>上面有相关的配置的说明。<h2 id=\"-github-io-\">创建你的github.io项目</h2>\n</li>\n</ul>\n<h3 id=\"-repository\">新建repository</h3>\n<p>新建一个以{username}.github.io 命名的repository。</p>\n<h3 id=\"-ssh-\">得到你的SSH地址</h3>\n<p>在blog文件夹中的<code>_config.yml</code>文件中配置</p>\n<pre><code><span class=\"hljs-symbol\">deploy:</span>\n<span class=\"hljs-symbol\">  type:</span> git\n<span class=\"hljs-symbol\">  repo:</span> {ssh地址}\n<span class=\"hljs-symbol\">  branch:</span>\n</code></pre><h3 id=\"-github-page-\"><em>在GitHub中设置中创建你的page</em></h3>\n<h3 id=\"-ssh-key-\">添加ssh key <em>（允许写操作）</em></h3>\n<ul>\n<li>在Git Bash输入以下指令（任意位置点击鼠标右键），检查是否已经存在了SSH keys。<br><code>ls -al ~/.ssh</code></li>\n<li>如果不存在就没有关系，如果存在的话，直接删除<code>c:/用户/你的用户名/.ssh</code>文件夹里面所有文件</li>\n<li>输入以下指令（邮箱就是你注册Github时候的邮箱）后，回车<br><code>ssh-keygen -t rsa -C &quot;your email&quot;</code></li>\n<li>然后它会提示要你输入passphrase（如上图，我没有输入直接回车，如果你输入的话，要记得，到时候会用到）。</li>\n<li>然后键入以下指令：<br><code>eval &#39;ssh-agent -s&#39;</code>\n<code>ssh-add</code></li>\n<li>继续输入指令：\n<code>ssh-add ~/.ssh/id_rsa</code></li>\n<li>到了这一步，就可以添加SSH key到你的Github账户了。键入以下指令，拷贝Key（先拷贝了，等一下可以直接粘贴）：<br><code>clip &lt; ~/.ssh/id_rsa.pub</code></li>\n<li>在GitHub设置添加ssh keys，将上面复制的内容粘贴至key中，生成  </li>\n<li>输入你的Github密码即可完成SSH Key的添加。嗯，最后还是测试一下吧，键入以下命令：<br><code>ssh -T git@github.com   #你可能会看到有警告，没事，输入“yes”就好。</code> <h3 id=\"-github-\">发布至GitHub并且部署</h3>\n</li>\n<li>输入指令<br><code>hexo g #生成blog静态文件，github page只支持静态文件</code></li>\n<li>输入指令\n<code>hexo d #发布至github中</code> <h2 id=\"-page-\">完成！快去访问你的page吧！</h2>\n</li>\n</ul>\n","head":{"title":"'感受Hexo的强大与高效（搭建Blog至GitHub Page教程）'","date":"22 Apr 2016","tags":["Hexo"],"categories":["Studying"]}},"捣鼓出一个简陋的图片轮播效果":{"content":"<h1 id=\"-\">废话不多说，直接看效果</h1>\n<p><iframe style=\"width:100%;height:400px;\" src='/htm/图片轮播1.html'></iframe>\n<!-- more --></p>\n<h1 id=\"-\">“科学”道理？</h1>\n<p>父元素设置<code>overflow:hidden;</code>,<code>width</code>,<code>height</code>,\n子div设置<code>position:relative;</code>(还在文档流中)，\n根据js动态控制其宽度等于所有图片的<code>width</code>总和</p>\n<pre><code>container<span class=\"hljs-selector-class\">.style</span><span class=\"hljs-selector-class\">.width</span> = document.querySelectorAll(<span class=\"hljs-string\">'.pic-run&gt;div&gt;img'</span>).length*<span class=\"hljs-attribute\">width</span>;\n</code></pre><p>然后，设置图片属性为<code>float:left;</code>，将图片“紧紧”地“挤压”在<strong>一排</strong>。\n<strong>关于浮动<code>float</code>，我有话要说</strong>\n如下，红色为<code>float:left;</code>，其他均未设置浮动。可以看到其他的div将无视红色。<br>但是，<strong>其他div中的文字却被红色挡住了！</strong>，\n所以说</p>\n<blockquote>\n<p><code>float</code>是用来解决文字环绕图片的问题的！</p>\n</blockquote>\n<div style=\"width:200px;height:400px;border:2px solid red;float:left;\"></div><div style=\"width:300px;height:200px;border:2px solid green;\"></div><div style=\"width:600px;height:200px;border:2px solid blue;\">文字文字</div>\n\n<p>最后根据js修改装载所有图片容器的<code>left</code>值即可。\n至于动态效果可以参考我的文章 <a href=\"/2016/04/23/requestAnimationFrame_Vs_setInterval/\">requestAnimationFrame Vs setInterval</a></p>\n<h1 id=\"-\">附上源码</h1>\n<pre><code>---\n layout: false\n---\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.pic-run</span>{\n    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">0</span> auto;\n    <span class=\"hljs-attribute\">overflow</span>:hidden;\n    <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">400px</span>;\n    <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">300px</span>;\n}\n<span class=\"hljs-selector-class\">.pic-run</span>&gt;<span class=\"hljs-selector-tag\">div</span>{\n    <span class=\"hljs-attribute\">padding </span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">position</span>:relative;\n    <span class=\"hljs-attribute\">left</span>:-<span class=\"hljs-number\">0px</span>;\n}\n<span class=\"hljs-selector-class\">.pic-run</span>&gt;<span class=\"hljs-selector-tag\">div</span>&gt;<span class=\"hljs-selector-tag\">img</span>{\n    <span class=\"hljs-attribute\">float</span>:left;\n    <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">400px</span>;\n    <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">300px</span>;\n}\n<span class=\"hljs-selector-class\">.pic-btn</span>{\n    <span class=\"hljs-attribute\">clear</span>:both;\n    <span class=\"hljs-attribute\">text-align</span>: center;\n}\n\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">slide</span>(<span class=\"hljs-params\">d</span>)</span>{\n        <span class=\"hljs-keyword\">if</span>(slide.time) <span class=\"hljs-keyword\">return</span>;\n        <span class=\"hljs-keyword\">var</span> img = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.pic-run img'</span>);\n        <span class=\"hljs-keyword\">var</span> width = img.width,height = img.height;\n        <span class=\"hljs-keyword\">var</span> show = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.pic-run'</span>);\n        show.style.width = width;show.style.height = height;\n        <span class=\"hljs-keyword\">var</span> container = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">'.pic-run&gt;div'</span>);\n        <span class=\"hljs-keyword\">var</span> bgleft = <span class=\"hljs-built_in\">parseInt</span>(container.style.left);\n        container.style.width = <span class=\"hljs-built_in\">document</span>.querySelectorAll(<span class=\"hljs-string\">'.pic-run&gt;div&gt;img'</span>).length*width;\n        <span class=\"hljs-keyword\">var</span> delta = -d*width,aimleft = bgleft+delta;\n        <span class=\"hljs-keyword\">if</span>(aimleft&lt;-(<span class=\"hljs-built_in\">parseInt</span>(container.style.width)-width) || aimleft&gt;<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span>;\n        <span class=\"hljs-keyword\">if</span>(delta==<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span>;\n        <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">run</span>(<span class=\"hljs-params\"></span>)</span>{\n            <span class=\"hljs-keyword\">if</span>(bgleft==aimleft){ \n                cancelAnimationFrame(slide.time);\n                <span class=\"hljs-keyword\">delete</span> slide.time;\n                <span class=\"hljs-keyword\">return</span>;\n            }\n            <span class=\"hljs-keyword\">if</span>(bgleft&lt;aimleft){\n                bgleft+=<span class=\"hljs-number\">50</span>;\n            }<span class=\"hljs-keyword\">else</span>{\n                bgleft-=<span class=\"hljs-number\">50</span>;\n            }\n            container.style.left = bgleft;\n            requestAnimationFrame(run)\n        }\n        slide.time = requestAnimationFrame(run)\n    }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"pic-run\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"left:0;\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'images/pic-1.jpg'</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'images/pic-2.jpg'</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'images/pic-3.jpg'</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'images/pic-4.jpg'</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">'pic-btn'</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">'slide(-1)'</span>&gt;</span>Prev<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">'slide(1)'</span>&gt;</span>Next<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n    <span class=\"hljs-built_in\">window</span>.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{slide(<span class=\"hljs-number\">0</span>);};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>","head":{"title":"捣鼓出一个简陋的图片轮播效果","date":"23 Apr 2016","tags":["js","页面效果","float"],"categories":["前端"]}},"探究SegumentFault Markdown编辑器":{"content":"<p><a href=\"https://segmentfault.com/\">SegumentFault</a> 中的Markdown编辑器用户体验不错，比如</p>\n<ol>\n<li>高亮提示并显示你当前正在编辑的文本</li>\n<li>支持剪贴板图片直接粘贴上传，插入图片十分方便</li>\n<li>自动保存</li>\n</ol>\n<p>为了探究sf实现的原理，在sf中我提出了下面的问题\n【<a href=\"https://segmentfault.com/q/1010000006166048\">segmentfault的实时markdown编辑修改位置定位是怎么做到的，而且效率还不低</a>】</p>\n<p>根据采纳答案提供的信息，我搜索到了这段谷歌开源代码 <a href=\"https://code.google.com/p/google-diff-match-patch/\">google-diff-match-patch</a></p>\n<p>根据官方的介绍，我们能用这个称为diff-match-path的开源库，进行diff(差异)/match(配对)/patch(补全)， 但我们只需要diff功能即可</p>\n<p>在官方给出的<a href=\"https://neil.fraser.name/software/diff_match_patch/svn/trunk/demos/demo_diff.html\">diff demo</a>中, 通过源码可以很清晰的了解diff的使用</p>\n<!--more--> \n<p>大体就是，对比两个字符串，找到两个字符串的不同，包括多余的，相同的，缺失的。</p>\n<p>算法思想贪心，参考如下<br><a href=\"http://simplygenius.net/Article/DiffTutorial1\">英文原版</a><br><a href=\"http://yaowhat.com/2014/07/21/entry-version-diff-1.html\">翻译</a></p>\n<h2 id=\"-\">我的工作</h2>\n<p>既然知道了sf的实时编辑高亮是基于diff的，那我也基于这个工具实现个markdown编辑器吧。 \n用了如下第三方库</p>\n<ol>\n<li>ace.js (一个漂亮的编辑器)</li>\n<li>marked.js (一个markdown文本转html库)</li>\n<li>highlight.js (将code文本高亮展示)</li>\n<li>diff_match_patch.js</li>\n</ol>\n<p>效果图\n<img src=\"/upload/1471093544488.png\" alt=\"ClipboardImage\"></p>\n<p>具有如下功能：</p>\n<ol>\n<li>markdown编辑，实时预览</li>\n<li>高亮提示并显示你当前正在编辑的文本</li>\n<li>支持剪贴板图片直接粘贴上传，插入图片十分方便</li>\n<li>自动保存</li>\n</ol>\n<p>编辑器部分快捷键说明</p>\n<ol>\n<li>cmd/ctrl + K : 33种编辑器主题供选择</li>\n<li>cmd/ctrl + B : 编辑器字体放大</li>\n<li>cmd/ctrl + M : 编辑器字体缩小</li>\n<li>cmd/ctrl + U : 自动保存功能开关</li>\n<li>cmd/ctrl + S : 保存</li>\n</ol>\n<p>其他交互说明：</p>\n<ol>\n<li>编辑器左下角提示保存信息，右下角提示字数\n<img src=\"/upload/1471093917303.png\" alt=\"ClipboardImage\"></li>\n<li>中部可拖动调节大小\n<img src=\"/upload/1471094067216.png\" alt=\"ClipboardImage\"></li>\n<li>预览可直接复制代码\n<img src=\"/upload/1471095177629.png\" alt=\"ClipboardImage\"></li>\n</ol>\n<h2 id=\"-\">怎么安装使用？</h2>\n<p>代码地址<br><a href=\"https://github.com/moyuyc/markdown-editor\">markdown-editor</a></p>\n<pre><code class=\"lang-sh\">git clone http<span class=\"hljs-variable\">s:</span>//github.<span class=\"hljs-keyword\">com</span>/moyuyc/markdown-editor.git\n<span class=\"hljs-keyword\">cd</span> markdown-editor\nnpm install\nnpm start\n<span class=\"hljs-keyword\">open</span> http://localhos<span class=\"hljs-variable\">t:9999</span>\n</code></pre>\n<p>别忘了给个Star！</p>\n","head":{"title":"探究SegumentFault Markdown编辑器","date":"13 Aug 2016","tags":["markdown"]}},"数字验证码识别":{"content":"<h1 id=\"verifycode\">VerifyCode</h1>\n<p>Java 实现的数字验证码识别, ...准确率不是很高, 模式识别和去噪处理的不是很好, 但学习入门已经够了，</p>\n<p>而且！！！已经运用至之前做的教务系统的验证码识别\n<!--more-->\n整体的流程结构</p>\n<p><img src=\"/images/all.png\" alt=\"\"></p>\n<h1 id=\"-\">识别思路</h1>\n<p>首先，得到图片数据，如</p>\n<p><img src=\"/images/src.png\" alt=\"\"></p>\n<p>然后我试着对图片进行各种处理，比如...</p>\n<ol>\n<li><p>变成灰化图\n<img src=\"/images/gray.png\" alt=\"\"></p>\n</li>\n<li><p>去噪...好像效果不明显\n<img src=\"/images/reduceSrc.png\" alt=\"\"></p>\n</li>\n<li><p>对灰化图去噪\n<img src=\"/images/reduceGray.png\" alt=\"\"></p>\n</li>\n<li><p>灰化图转成二值图（阈值128）\n<img src=\"/images/grayBin.png\" alt=\"\"></p>\n</li>\n<li><p>原图转成二值图（阈值128）\n<img src=\"/images/srcBin.png\" alt=\"\"></p>\n</li>\n<li><p>对二值图膨胀运算\n<img src=\"/images/srcBinExpend.png\" alt=\"\"></p>\n</li>\n<li><p>对二值图腐蚀运算\n<img src=\"/images/srcBinCorrode.png\" alt=\"\"></p>\n</li>\n<li><p>对二值图开运算 (先腐蚀后膨胀)\n<img src=\"/images/srcBinOpen.png\" alt=\"\"></p>\n</li>\n<li><p>对二值图闭运算 (先膨胀后腐蚀)\n<img src=\"/images/srcBinClose.png\" alt=\"\"></p>\n</li>\n</ol>\n<p>多次实验对比后，发现还是对原图的二值化图最好处理。</p>\n<p>然后，便是将图片中的数字分割为固定大小的图片（固定大小是为了后续的模式学习与识别）</p>\n<p>其实在这里我可以使用一种比较无赖的方式处理，将这种有规律的数字验证码按照像素点位置进行分割，</p>\n<p>但是这样做就没意思了...，所以我选择了用深度优先搜索算法（利用堆栈结构，如果递归，会导致栈溢出），</p>\n<p>并且带标记（防止重复处理处理过的点），将八连通的集合分割出来</p>\n<p><img src=\"/images/eight-line.png\" alt=\"\"></p>\n<p><img src=\"/images/split.png\" alt=\"\"></p>\n<p>效果如下</p>\n<p><img src=\"/images/srcBinSpilt1.png\" alt=\"\"></p>\n<p><img src=\"/images/srcBinSpilt2.png\" alt=\"\"></p>\n<p><img src=\"/images/srcBinSpilt3.png\" alt=\"\"></p>\n<p><img src=\"/images/srcBinSpilt4.png\" alt=\"\"></p>\n<p>当然二值图中的噪点会影响字符的划分</p>\n<p>最后便是模式识别算法的选择了，我没有选中书上与网上说的基于向量距离的方法，而是自己想了一个方法，所以识别能力有限...</p>\n<p>思路是：先将将一些已知数字的样本进行存储为一串字符串，白色存为&quot;0&quot;，黑色为&quot;1&quot;</p>\n<p>效果如下</p>\n<p><img src=\"/images/srcBinSpilt-1.png\" alt=\"\"></p>\n<pre><code><span class=\"hljs-number\">0111111111</span>\n<span class=\"hljs-number\">0111111111</span>\n<span class=\"hljs-number\">0111111111</span>\n<span class=\"hljs-number\">1100000011</span>\n<span class=\"hljs-number\">1000000011</span>\n<span class=\"hljs-number\">0000000110</span>\n<span class=\"hljs-number\">0000000110</span>\n<span class=\"hljs-number\">0000001100</span>\n<span class=\"hljs-number\">0001001100</span>\n<span class=\"hljs-number\">0000001100</span>\n<span class=\"hljs-number\">0000011000</span>\n<span class=\"hljs-number\">0000011000</span>\n<span class=\"hljs-number\">0000011000</span>\n<span class=\"hljs-number\">0000110000</span>\n<span class=\"hljs-number\">0000110000</span>\n<span class=\"hljs-number\">0000110000</span>\n</code></pre><p><img src=\"/images/srcBinSpilt-2.png\" alt=\"\"></p>\n<pre><code><span class=\"hljs-number\">0000000110</span>\n<span class=\"hljs-number\">0000000110</span>\n<span class=\"hljs-number\">0000001110</span>\n<span class=\"hljs-number\">0000011110</span>\n<span class=\"hljs-number\">0000101110</span>\n<span class=\"hljs-number\">0001001110</span>\n<span class=\"hljs-number\">0001001110</span>\n<span class=\"hljs-number\">0010001110</span>\n<span class=\"hljs-number\">0100001110</span>\n<span class=\"hljs-number\">1000001110</span>\n<span class=\"hljs-number\">1111111111</span>\n<span class=\"hljs-number\">1111111111</span>\n<span class=\"hljs-number\">0000001110</span>\n<span class=\"hljs-number\">0000001110</span>\n<span class=\"hljs-number\">0000001110</span>\n<span class=\"hljs-number\">0000001110</span>\n</code></pre><p>将图像编码完成后，对比待识别图片与10种数字样本之间字符&quot;1&quot;的位置吻合度，最高的即为识别出来的数字</p>\n<p><img src=\"/images/pattern.png\" alt=\"\"></p>\n<p>但是这种方法容易将3，5，8识别错误，或者因为分割的不成功而导致的识别错误。</p>\n<p>最后！提下Node调用Java的方法</p>\n<p>目前我用的是<code>child_process</code>创建新进程，在新进程调用Java，传人图片文件地址进行处理。</p>\n<p>但是！这种方法每次都需要重新启动Java，训练样本需要重新载入，效率是个问题。</p>\n<p>2016/07/25更新!!! 改用 <code>WebService</code> 进行通信!</p>\n<h1 id=\"-\">代码地址</h1>\n<ul>\n<li><p>Java源码\n  <a href=\"https://github.com/moyuyc/VerifyCode\">VerifyCode</a></p>\n</li>\n<li><p>一键查分（运用该技术）\n  <a href=\"https://github.com/moyuyc/njnu-quick-get-score\">njnu-quick-get-score</a></p>\n</li>\n</ul>\n<h1 id=\"-\">参考资料</h1>\n<p>形态学运算</p>\n<p><a href=\"http://blog.csdn.net/bagboy_taobao_com/article/details/5574159\">http://blog.csdn.net/bagboy_taobao_com/article/details/5574159</a>\n<a href=\"http://blog.csdn.net/hellousb2010/article/details/37939809\">http://blog.csdn.net/hellousb2010/article/details/37939809</a></p>\n<p>字符分割</p>\n<p><a href=\"https://www.zhihu.com/question/19702292\">https://www.zhihu.com/question/19702292</a>\n<a href=\"http://www.voidcn.com/blog/beechina/article/p-5761020.html\">http://www.voidcn.com/blog/beechina/article/p-5761020.html</a></p>\n<p>PDF 299 模式识别</p>\n","head":{"title":"数字验证码识别","date":"25 Jul 2016","categories":["图像处理"],"tags":["图像处理","后端"]}},"点歌机器人-来自网易云音乐":{"content":"<p>偶然的机会，发现了B站的点歌机器人，觉得挺好玩的就自己做了一个简易版点歌机器人，预览如下：</p>\n<p><img src=\"https://github.com/moyuyc/request-song-robot/blob/master/upload/gif3.gif?raw=true\" alt=\"\">\n<img src=\"/upload/1471705339720.png\" alt=\"ClipboardImage\">\n<!--more--></p>\n<h2 id=\"-\">功能</h2>\n<ol>\n<li>使用websocket，支持多人同时点歌，发送弹幕聊天</li>\n<li>具有搜索suggestion，用户体验更佳</li>\n<li>点击mv视频右上角可以缩小放大，不影响用户其他操作</li>\n<li>具有mv的资源，优先播放mv</li>\n<li>对于未播放的已点歌曲，可以进行取消</li>\n<li>...</li>\n</ol>\n<h2 id=\"-\">其他说明</h2>\n<p>由于是实时多人点歌，所以不能够跳过当前播放歌曲，也不能跳跃播放，Mv只能够重头开始播放，mp3能够根据线上其他用户的播放进度进行同步</p>\n<p><strong>音乐资源均来自网易云音乐，该程序仅用于个人学习，不得用于任何商业用途</strong></p>\n<p>关于网易云音乐的接口规则，我就不多说了，因为关于商业机密，可能吃官司的,有兴趣的可以私下找我</p>\n<h2 id=\"-\">技术沉淀</h2>\n<p><img src=\"/upload/1471696540554.png\" alt=\"ClipboardImage\">\n如上图，网易云音乐的请求参数是做了加密处理的。<br>关于网易云音乐请求参数的加密方法，简单提下</p>\n<pre><code class=\"lang-js\">\naesRsaEncrypt: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(text)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> secKey = createSecretKey(<span class=\"hljs-number\">16</span>);\n    <span class=\"hljs-keyword\">return</span> {\n        params: aesEncrypt(aesEncrypt(text, nonce), secKey),\n        encSecKey: rsaEncrypt(secKey, pubKey, modulus)\n    }\n}\n</code></pre>\n<p><img src=\"/upload/1471697286239.png\" alt=\"ClipboardImage\"></p>\n<p><code>secKey</code>为本地随机生成的密文，通过rsa非对称加密算法加密，然后网易服务器通过约定好的与<code>pubKey</code>对应的另一个因数进行解密，得到<code>secKey</code>, 然后通过两次aes逆运算就能得到<code>text</code>，也就是真实的参数了。  </p>\n<p>这样做的好处不言而喻，不法分子很难破解抓取到的请求数据<br>但服务器负担加重了，每次提供服务前，还得先去破解一番</p>\n<p>另外！网易还做了一点安全措施，调用接口得到音乐url是有时间限制的!!!</p>\n<p><img src=\"/upload/1471697765689.png\" alt=\"ClipboardImage\"></p>\n<p>所以，不能够在点歌的时候就把音乐url抓取下来保存，必须得有用户需要播放的时候再抓取url<br>而且云音乐的mvurl不支持跨域访问，所以我只好做个代理，转发视频数据流了，但这样做的不好就是mv播放不能跳跃播放（如最上方动图所示），不知有没有大牛知道如何解决这个问题</p>\n<pre><code class=\"lang-javascript\">\n<span class=\"hljs-keyword\">let</span> url = req.url\n<span class=\"hljs-keyword\">let</span> q = URL.<span class=\"hljs-built_in\">parse</span>(req.url, true).query\n<span class=\"hljs-keyword\">if</span>(url.startsWith(SUFFIX)) {\n    <span class=\"hljs-keyword\">if</span>(q.id!=<span class=\"hljs-number\">0</span>)\n        gs.getMvUrl(q.id)\n            .then(json =&gt; {\n                <span class=\"hljs-keyword\">if</span>(json.hurl || json.murl) {\n                    res.writeHead(<span class=\"hljs-number\">200</span>, {'Content-<span class=\"hljs-built_in\">Type</span>': u.suffix2Type('mp4')});\n                    var s = gs.getStream(json.hurl || json.murl)\n                    s.on('<span class=\"hljs-built_in\">error</span>', (err) =&gt; {\n                        s.<span class=\"hljs-built_in\">close</span> &amp;&amp; s.<span class=\"hljs-built_in\">close</span>()\n                        console.<span class=\"hljs-built_in\">error</span>(err)\n                        res.<span class=\"hljs-keyword\">end</span>()\n                    })\n                    <span class=\"hljs-comment\">//传递MV视频数据流</span>\n                    s.pipe(res)\n                } <span class=\"hljs-keyword\">else</span> {\n                    res.writeHead(<span class=\"hljs-number\">500</span>);\n                    res.<span class=\"hljs-keyword\">end</span>('<span class=\"hljs-built_in\">Error</span> '+JSON.stringify(json))\n                }\n            })\n    <span class=\"hljs-keyword\">else</span> {\n        res.writeHead(<span class=\"hljs-number\">500</span>);\n        res.<span class=\"hljs-keyword\">end</span>('<span class=\"hljs-built_in\">Error</span>')\n    }\n    <span class=\"hljs-keyword\">return</span>\n}\n</code></pre>\n<h2 id=\"-\">源码与使用</h2>\n<p><a href=\"https://github.com/moyuyc/request-song-robot\">song-robot</a></p>\n<pre><code class=\"lang-sh\">\nnpm <span class=\"hljs-selector-tag\">i</span> song-robot -g\nsong-robot -<span class=\"hljs-selector-tag\">p</span> <span class=\"hljs-number\">9888</span>\nopen http:<span class=\"hljs-comment\">//localhost:9888</span>\n</code></pre>\n<h2 id=\"-\">参考资料</h2>\n<p>referer\n<a href=\"https://zh.wikipedia.org/zh/HTTP%E5%8F%83%E7%85%A7%E4%BD%8D%E5%9D%80\">https://zh.wikipedia.org/zh/HTTP%E5%8F%83%E7%85%A7%E4%BD%8D%E5%9D%80</a></p>\n<p>网易云api破解\n<a href=\"http://qianzewei.com/2015/12/10/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90api%E6%95%B4%E7%90%86/#\">http://qianzewei.com/2015/12/10/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90api%E6%95%B4%E7%90%86/#</a></p>\n<p>node crypto<br><a href=\"https://nodejs.org/api/crypto.html\">https://nodejs.org/api/crypto.html</a></p>\n<p>输入框光标变色<br><a href=\"http://jsfiddle.net/8k1k0awb/\">http://jsfiddle.net/8k1k0awb/</a></p>\n","head":{"title":"点歌机器人 (来自网易云音乐)","tags":["funny","websocket"],"date":"05 Sep 2016","cover":"/upload/1471705339720.png"}},"百度前端二面总结（已过）":{"content":"<h1 id=\"-\">前言</h1>\n<p>昨天，进行了百度第二次前端面试，结果今天中午就通知我过了，准备本周五进行三面，百度的办事效率还挺高的哈。\n写这篇文章为了记录和总结一下，已经回顾自己的不足，以及展望下后面的计划。\n<!--more--></p>\n<h1 id=\"-\">开始前夕</h1>\n<p>我听取了一面面试官的建议，花了一周时间捣鼓了一个静态博客，所以我就在简历上加上了我的博客地址，然后发了一份新的简历给二面面试官。\n二面面试官比一面面试官「活跃」些，互动也多了些。</p>\n<h1 id=\"-\">视频开始</h1>\n<p>中午二点，正式开始视频面试，出乎我意料之外的是，面试官居然也露出了庐山真面目。\n一开始面试官就吐英语了！听得我一愣一愣的（可能在文字聊天的时候我一直有发okok，让面试官误以为我英语不错），还好没听明白的地方，面试官会翻译。\n简单做了一下自我介绍后，面试官便进入了自己的节奏，说明这次面试主要是测试我的编码能力，需要共享我的电脑桌面，看我敲代码。\n当时内心还是有点慌的，「怎么跟网上的二面面经不太一样啊！」，于是便开始了出题编码环节。</p>\n<h1 id=\"-\">第一题</h1>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">/*\n 用 javascript 语言,手工实现 repeat 函数.两个参数:\n 1.要重复的原始字符串\n 2.需要重复的次数\n\n 例如:\n repeat ('a', 3) =&gt; 'aaa'\n\n */</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">repeat</span> <span class=\"hljs-params\">(str, count)</span> </span>{\n    <span class=\"hljs-comment\">// your code here</span>\n}\n</code></pre>\n<p>恩恩，第一题不难，头脑中首先冒出两种方法</p>\n<pre><code class=\"lang-javascript\">function repeat (<span class=\"hljs-keyword\">str</span>, <span class=\"hljs-keyword\">count</span>) {\n    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">str</span> != undefined &amp;&amp; <span class=\"hljs-keyword\">count</span>!= undefined &amp;&amp; <span class=\"hljs-keyword\">count</span>&gt;<span class=\"hljs-number\">0</span> &amp;&amp; !isNaN(<span class=\"hljs-keyword\">count</span>)) {\n        <span class=\"hljs-comment\">// 1</span>\n        var s =<span class=\"hljs-string\">''</span>;\n        <span class=\"hljs-keyword\">for</span>(var i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-keyword\">count</span>;i++){\n            s+=<span class=\"hljs-keyword\">str</span>;\n        }\n        <span class=\"hljs-keyword\">return</span> s;\n\n        <span class=\"hljs-comment\">//2</span>\n        var arr = <span class=\"hljs-keyword\">new</span> Array(<span class=\"hljs-keyword\">count</span> + <span class=\"hljs-number\">1</span>);\n        <span class=\"hljs-keyword\">return</span> arr.join(<span class=\"hljs-keyword\">str</span>);\n    }\n}\n</code></pre>\n<p>但是，面试官肯定要深问啊，要求我用递归来实现。\n当时比较紧张...,思路不是很清晰...,有点乱。\n开始是用下面的递归方法：</p>\n<pre><code class=\"lang-javascript\">function repeat(<span class=\"hljs-keyword\">str</span> ,<span class=\"hljs-keyword\">count</span>) {\n    var s = <span class=\"hljs-string\">''</span>;\n    rep(<span class=\"hljs-keyword\">str</span>,<span class=\"hljs-keyword\">count</span>);\n    <span class=\"hljs-keyword\">return</span> s;\n    function rep(<span class=\"hljs-keyword\">str</span>,<span class=\"hljs-keyword\">count</span>) {\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">count</span>&lt;=<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span>;\n        s+=<span class=\"hljs-keyword\">str</span>;\n        arguments.callee(<span class=\"hljs-keyword\">str</span>,--<span class=\"hljs-keyword\">count</span>);\n    }\n}\n</code></pre>\n<p>面试官还是不满意！让我改进，不用&quot;全局变量&quot; <code>s</code>，于是修改代码为下：</p>\n<pre><code class=\"lang-javascript\">function repeat(<span class=\"hljs-keyword\">str</span> ,<span class=\"hljs-keyword\">count</span>) {\n    <span class=\"hljs-keyword\">return</span> rep(<span class=\"hljs-string\">''</span>,<span class=\"hljs-keyword\">str</span>,<span class=\"hljs-keyword\">count</span>);\n    function rep(s,<span class=\"hljs-keyword\">str</span>,<span class=\"hljs-keyword\">count</span>) {\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">count</span>&lt;=<span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">str</span>;\n        s+=<span class=\"hljs-keyword\">str</span>;\n        <span class=\"hljs-keyword\">return</span> arguments.callee(s,<span class=\"hljs-keyword\">str</span>,--<span class=\"hljs-keyword\">count</span>);\n    }\n}\n</code></pre>\n<h1 id=\"-\">第二题</h1>\n<pre><code class=\"lang-javascript\">/*\n 使用 原生javacript 实现事件代理\n\n 例子:\n\n delegate (  containerElement, <span class=\"hljs-string\">'click'</span>, <span class=\"hljs-string\">'remove-item'</span>, onClick )\n 会绑定一个事件代理到 containerElement 这个元素, 即是说, 所有在 containerElement 这个容器下的所有 .remove-item 在click事件出现时都会触发 onClick 这个回调\n\n */\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">delegate</span><span class=\"hljs-params\">(parentElem, eventType, className, callback)</span></span> {\n\n}\n</code></pre>\n<p>第二题也是比较常规的事件委托题目，想了一会儿，还好是想出来了。</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">delegate</span><span class=\"hljs-params\">(parentElem, eventType, className, callback)</span> </span>{\n    <span class=\"hljs-keyword\">if</span>(parentElem.attachEvent)\n        parentElem.attachEvent(<span class=\"hljs-string\">'on'</span>+eventType,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(e)</span> </span>{\n            <span class=\"hljs-keyword\">if</span>(e.srcElement.classList.contains(className)){\n                <span class=\"hljs-keyword\">callback</span>(e);\n            }\n        });\n    <span class=\"hljs-keyword\">else</span>{\n        parentElem.addEventListener(eventType,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(e)</span> </span>{\n            <span class=\"hljs-keyword\">if</span>(e.target.classList.contains(className)){\n                <span class=\"hljs-keyword\">callback</span>(e);\n            }\n        });\n    }\n}\n</code></pre>\n<p>写完后，面试官继续问：有没有方法可以让事件响应更快速点。\n额，想了一分钟吧，面试官看我没声音，就直接到第三题了。</p>\n<pre><code>其实，后面仔细想了下，觉得可以将`addEventListener`方法中的第三个参数设置为`true`，也就是按照事件捕获方式响应，\nDOM事件流首先要捕获事件（由父结点到子节点），然后是事件冒泡（由子节点到父结点）。\n`addEventListener`方法第三个参数默认为`false`，表示事件冒泡处理事件，所以我觉得设置为`true`，应该能够更快的响应事件。\n</code></pre><h1 id=\"-\">第三题</h1>\n<p>开放题，考察我学习新知识的能力和方法，让我做出一个跟React中第三个Demo一样的效果（使用React）。\n<a href=\"http://facebook.github.io/react/\">http://facebook.github.io/react/</a>\n...当时我已经是比较懵逼了，就查看源码呗，看下官网上实现这个Demo的源码在哪，然后导入库文件，复制代码试试看咯。\n但是当时突然就网络不好了，github上不去了，结果面试官还主动帮我下库文件，600多KB，结果发给我的数据居然是1KB/s，所以最后这道题不了了之。\n时间差不多了，就结束了。</p>\n<h1 id=\"-\">总结</h1>\n<p>最后我才知道一共有四道题目（恩，第四题也不知道是个什么东西）。\n从腾讯一面被刷到百度的二面通过，等待三面，真是验证了一句话「机会是留给有准备的人的。」\n还有，<strong>紧张只会给自己添乱子！</strong>\n最后我希望三面也能顺风顺水吧。\n如果拿到实习offer后，希望在实习的时候也能拿出以往的「折腾、捣鼓」精神，能够顺利转正。</p>\n","head":{"title":"百度前端二面总结（已过）","date":"04 May 2016","categories":["Life"],"tags":["offer","总结"]}},"看我Blog文章导航会动哎！":{"content":"<blockquote>\n<p>实现侧边内容的动态跳转，非锚点。\n点击右侧的文章侧边导航栏，实现动态效果跳转。</p>\n</blockquote>\n<h1 id=\"-\">怎么实现滴？</h1>\n<p> 找到hexo文件夹中你选择的主题文件夹，在我这是<code>themes/indigo</code>\n 进入<code>source/js</code>，修改js文件\n <!-- more --></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">/*\n * d-&gt;document;\n * animate-&gt;requestAnimationFrame\n */</span>\nvar links = d.querySelectorAll(<span class=\"hljs-string\">'.post-toc-link'</span>)<span class=\"hljs-comment\">;</span>\nfor(var i = <span class=\"hljs-number\">0</span><span class=\"hljs-comment\">;i &lt; links.length;i++){</span>\n    var link = links.item(i)<span class=\"hljs-comment\">;</span>\n    link.<span class=\"hljs-keyword\">addEventListener('click',function(e){\n</span>        e.preventDefault()<span class=\"hljs-comment\">;</span>\n        var id = this.hash<span class=\"hljs-comment\">;</span>\n        var tg = d.querySelector(id)<span class=\"hljs-comment\">;</span>\n        var max = d.<span class=\"hljs-keyword\">body.scrollHeight </span>- d.<span class=\"hljs-keyword\">body.offsetHeight,tg_parent_top </span>= tg.offsetParent.offsetTop<span class=\"hljs-comment\">;</span>\n        function <span class=\"hljs-keyword\">scrollToLink(){\n</span>            var to = tg.offsetTop+tg_parent_top - <span class=\"hljs-number\">40</span>,\n                top = d.<span class=\"hljs-keyword\">body.scrollTop;\n</span>            if(top &gt; to){\n                top -= <span class=\"hljs-number\">130</span><span class=\"hljs-comment\">;</span>\n                if(top &lt; to){\n                    d.<span class=\"hljs-keyword\">body.scrollTop </span>= to<span class=\"hljs-comment\">;</span>\n                    return<span class=\"hljs-comment\">;</span>\n                }\n                d.<span class=\"hljs-keyword\">body.scrollTop </span>= top<span class=\"hljs-comment\">;</span>\n                animate(arguments.callee)<span class=\"hljs-comment\">;</span>\n            }\n            else if(top &lt; to){\n                if(top==max){\n                    d.<span class=\"hljs-keyword\">body.scrollTop </span>= to<span class=\"hljs-comment\">;</span>\n                    return<span class=\"hljs-comment\">;</span>\n                }\n                top += <span class=\"hljs-number\">130</span><span class=\"hljs-comment\">;</span>\n                if(top &gt; to){\n                    d.<span class=\"hljs-keyword\">body.scrollTop </span>= to<span class=\"hljs-comment\">;</span>\n                    return<span class=\"hljs-comment\">;</span>\n                }\n                d.<span class=\"hljs-keyword\">body.scrollTop </span>= top<span class=\"hljs-comment\">;</span>\n                animate(arguments.callee)<span class=\"hljs-comment\">;</span>\n            }    \n        }\n        animate(<span class=\"hljs-keyword\">scrollToLink);\n</span>    })\n}<span class=\"hljs-comment\">;</span>\n</code></pre>\n<p>经过这个小Demo，我发现一个小知识点</p>\n<blockquote>\n<p><strong><em>元素的offsetTop对相对于其设置了position属性的祖宗元素（若无则为body）。</em></strong></p>\n</blockquote>\n<p>不信？！请看下面的测试</p>\n<h1 id=\"-\">我是第一！</h1>\n<div style=\"position:relative;height:700px; border:2px dotted blue;\">\n <p>第一的内容！ <code>position:relative; height:700px;</code>\n    <div>\n    <script>function alertAttr(obj,attr){alert(obj[attr]);}</script>\n    <button onclick=\"alertAttr(this,'offsetTop')\">点击看我的offsetTop</button>\n    </div>\n </p>\n</div>\n\n<h1 id=\"-\">我是第二！</h1>\n<div style=\"height:800px; border:2px dotted red;\">\n <p>第二的内容！ <code>height:800px;</code></p>\n <button onclick=\"alertAttr(this,'offsetTop')\">点击看我的offsetTop</button>\n</div>\n\n<h1 id=\"-\">我是第三！</h1>\n<p><div style=\"height:500px; border:2px dotted green;\">\n <p>第三的内容！ <code>height:500px;</code></p>\n</div>\n<br>  </p>\n<blockquote>\n<p>更多的细节还可以看元素的<code>offsetParent</code>属性</p>\n</blockquote>\n","head":{"title":"看我Blog文章导航会动哎！","date":"22 Apr 2016","tags":["js","页面效果"],"categories":["前端"]}},"短暂的git捣鼓":{"content":"<h1 id=\"git-\">Git是个啥？</h1>\n<blockquote>\n<p>Git 并不像 SVN 那样有个中心服务器。\n目前我们使用到的 Git 命令都是在本地执行，如果你想通过 Git 分享你的代码或者与其他开发人员合作。 你就需要将数据放到一台其他开发人员能够连接的服务器上。</p>\n</blockquote>\n<p>这是网上的话，我也就是看看而已，谈谈我自己的认识吧。我觉得，git是一个在本地管理代码版本的东东，有分支，仓库等概念，\n而github是基于git的一个远程仓库，通过他能实现代码分享。<strong><em>不通过它也可以进行版本控制</em></strong></p>\n<!--more-->\n<h1 id=\"-\">我想做什么？</h1>\n<p>我想把我博客的文章啊，主题啊，配置啊放到GitHub上，以免以后电脑报销后，写的博文也有个备份。</p>\n<h1 id=\"-\">那要怎么做？</h1>\n<h2 id=\"-git-github-\">把本地的Git和GitHub联系起来</h2>\n<blockquote>\n<p>本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以我们需要配置验证信息</p>\n</blockquote>\n<ul>\n<li><p>使用下面指令生成SSH Key  </p>\n<pre><code>  <span class=\"hljs-selector-tag\">ssh-keygen</span> <span class=\"hljs-selector-tag\">-t</span> <span class=\"hljs-selector-tag\">rsa</span> <span class=\"hljs-selector-tag\">-C</span> \"<span class=\"hljs-selector-tag\">youremail</span>@<span class=\"hljs-keyword\">example</span>.<span class=\"hljs-keyword\">com</span>\"\n</code></pre><p>  成功后，会给你一个ssh key路径，找到对应的ssh key文件(后缀*.pub)</p>\n</li>\n<li><p>来到 GitHub 个人首页，在设置中，添加一个SSH Key。title 可以随便取名字，Key 里面添加的内容为 id_rsa.pub 文件内所有的代码。然后点击 Apply 即可。</p>\n</li>\n<li>测试与 GitHub 是否连接成功：<pre><code>  <span class=\"hljs-selector-tag\">SSH</span> <span class=\"hljs-selector-tag\">-v</span> <span class=\"hljs-selector-tag\">git</span>@<span class=\"hljs-keyword\">github</span>.<span class=\"hljs-keyword\">com</span>\n</code></pre><strong><em>这里我遇到了问题</em></strong>\n在前面的文章<a href=\"/2016/04/22/感受Hexo的强大与高效（搭建Blog至GitHub%20Page教程）/\">感受Hexo的强大与高效（搭建Blog至GitHub Page教程）</a>中，\n我提到了需要为你的username.github.io项目添加SSH Key，\n其实吧，这一步可以忽略，直接生成一个访问你github的ssh key即可。\n不然你再次添加ssh key时候，因为本地的ssh key文件已经被你的项目使用了，所以会出现错误。</li>\n<li>连接成功后，在GitHub中新建一个repository </li>\n<li>在git bash中不断的<code>../</code>,<code>cd</code>后，来到我的blog文件夹。</li>\n<li>执行下列指令<pre><code>git init  <span class=\"hljs-comment\"># 添加本地git仓库，在文件夹中出现`.git`文件夹</span>\ngit remote <span class=\"hljs-keyword\">add</span><span class=\"bash\"> origin git@github.com:cong25825933/blogsource.git <span class=\"hljs-comment\"># 添加远程github服务器</span>\n</span>git <span class=\"hljs-keyword\">add</span><span class=\"bash\"> <span class=\"hljs-built_in\">source</span> <span class=\"hljs-comment\"># 将博文内容加入缓存  git add 命令来添加当前项目的所有文件。</span>\n</span>git <span class=\"hljs-keyword\">add</span><span class=\"bash\"> themes\n</span>git <span class=\"hljs-keyword\">add</span><span class=\"bash\"> _config.yml <span class=\"hljs-comment\"># 我只需要备份这三份文件</span>\n</span>git commit -m <span class=\"hljs-string\">'first commit'</span> <span class=\"hljs-comment\"># 将缓存区内容添加到仓库中。</span>\ngit push -u origin master <span class=\"hljs-comment\"># 发送至Github</span>\n</code></pre></li>\n<li>如果没什么大乱子的话，应该就成功了。<h2 id=\"-\">没啦</h2>\n</li>\n</ul>\n","head":{"title":"短暂的git捣鼓","date":"23 Apr 2016","tags":["git"],"categories":["Studying"]}},"解决外网访问nodejs服务器（nginx反向代理）":{"content":"<h1 id=\"-\">前言</h1>\n<p>之前说了我做的在线实时画板与你画我猜游戏，但是把程序放到服务器node运行后，却发现内网正常访问，外网却不能访问。\n于是搜索查找，得到解决方法，做此记录。\n<!--more--></p>\n<h1 id=\"-\">解决</h1>\n<h2 id=\"-nginx\">下载nginx</h2>\n<p>nginx大致相当于一个转发器，通过url进行转发到正确处理的端口。</p>\n<h2 id=\"-nginx\">配置nginx</h2>\n<p><code>conf/nginx.conf</code> 添加如下</p>\n<pre><code> <span class=\"hljs-attribute\">include</span> myconf/<span class=\"hljs-regexp\">*.conf</span>;  <span class=\"hljs-comment\"># 将myconf文件夹中*.conf 内容包含</span>\n</code></pre><p>在<code>conf/myconf</code> 中添加如下文件\n<code>conf4000.conf</code></p>\n<pre><code><span class=\"hljs-attribute\">upstream</span> web4000 {\n    <span class=\"hljs-attribute\">server</span> localhost:<span class=\"hljs-number\">4000</span>;\n}\n\n<span class=\"hljs-section\">server</span> {\n    <span class=\"hljs-attribute\">listen</span>   <span class=\"hljs-number\">80</span>; <span class=\"hljs-comment\">#监听的端口</span>\n\n    <span class=\"hljs-attribute\">server_name</span>  paintgame.moyuyc.xyz; <span class=\"hljs-comment\">#匹配的域名或者ip</span>\n\n    <span class=\"hljs-attribute\">location</span> / {\n        <span class=\"hljs-attribute\">proxy_pass</span> http://web4000; <span class=\"hljs-comment\">#转发到哪里？</span>\n\n        <span class=\"hljs-attribute\">proxy_http_version</span> <span class=\"hljs-number\">1</span>.<span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span> Upgrade <span class=\"hljs-variable\">$http_upgrade</span>; <span class=\"hljs-comment\"># 支持websocket</span>\n        <span class=\"hljs-attribute\">proxy_set_header</span> Connection <span class=\"hljs-string\">\"upgrade\"</span>; <span class=\"hljs-comment\"># 支持websocket</span>\n    }\n\n}\n</code></pre><p>最后运行nginx即可，当然同时也需要运行node服务器\n关于<code>websocket</code>与<code>upgrade</code> <a href=\"https://www.zhihu.com/question/20215561\">参看这里</a></p>\n<h1 id=\"-\">其他问题</h1>\n<ol>\n<li>用了<code>nginx</code>后，打开<code>[paint.moyuyc.xyz](http://paint.moyuyc.xyz/)</code> 特别慢，<code>[paintgame.moyuyc.xyz](http://paintgame.moyuyc.xyz/)</code> 却挺正常的，</li>\n<li>而且基于<code>websocket</code> 基于tcp长连接，经常会自己断开连接.</li>\n</ol>\n","head":{"title":"解决外网访问nodejs服务器（nginx反向代理）","date":"25 May 2016","categories":["后端"],"tags":["nodejs","nginx"]}},"谈谈JavaScript之数组对象深拷贝":{"content":"<h1 id=\"-\">回忆</h1>\n<p>上周百度面试问了我关于数组的 <code>clone</code> 方法的实现，当时没来得及细想，然后口头上说</p>\n<blockquote>\n<p>数组就是一串数据序列，可以遍历然后进行深拷贝即可。</p>\n</blockquote>\n<p>关于细节实现的东西都没想，然后面试官那边好像就无语了... 不过好在我提到了 <code>深拷贝</code> 这个关键字。\n<!--more--></p>\n<h1 id=\"-clone\">再探clone</h1>\n<h2 id=\"-\">浅复制</h2>\n<p>先看第一段代码</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-built_in\">Array</span>.prototype.clone = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.slice();\n}\n</code></pre>\n<p>乍看一下，好像挺快捷方便的就完成了。实际上，懂得c++/java中浅拷贝/深拷贝的人一看便知道这只是实现了浅复制。\n测试代码如下，</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-keyword\">new</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(x)</span></span>{\n                   this.x=x;\n               }(<span class=\"hljs-number\">3</span>)];\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-keyword\">clone</span> = arr.<span class=\"hljs-keyword\">clone</span>();\n<span class=\"hljs-keyword\">clone</span>[<span class=\"hljs-number\">1</span>].x=<span class=\"hljs-number\">1</span>;\nconsole.log(arr[<span class=\"hljs-number\">1</span>].x) <span class=\"hljs-comment\">// 1</span>\n</code></pre>\n<p>可以看到，<code>clone[1].x</code>改变导致<code>arr[1].x</code>改变，图示如下\n<img src=\"/htm/images/simple_clone1.png\" alt=\"img\"></p>\n<h2 id=\"-\">深复制</h2>\n<pre><code class=\"lang-javascript\">Object.prototype.clone = function () {\n    <span class=\"hljs-keyword\">var</span> clone = new <span class=\"hljs-keyword\">this</span>.<span class=\"hljs-keyword\">constructor</span>(); <span class=\"hljs-comment\">//开辟新内存空间，保证clone出来的对象也有一个属性能够指向原对象的原型对象。</span>\n    <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> k <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">this</span>){\n        <span class=\"hljs-keyword\">if</span>(!<span class=\"hljs-keyword\">this</span>.hasOwnProperty(k)) <span class=\"hljs-keyword\">continue</span>;\n        <span class=\"hljs-keyword\">if</span>(typeof <span class=\"hljs-keyword\">this</span>[k] === <span class=\"hljs-string\">'object'</span>)\n            clone[k] = <span class=\"hljs-keyword\">this</span>[k].clone();\n        <span class=\"hljs-keyword\">else</span>\n            clone[k] = <span class=\"hljs-keyword\">this</span>[k];\n    }\n    <span class=\"hljs-keyword\">return</span> clone;\n};\n</code></pre>\n<p>利用递归来实现Object实例的深复制(重新开辟一份内存空间)，如图\n<img src=\"/htm/images/deep_clone1.png\" alt=\"img\">\n因为Array也属于Object，上面的代码也适用于Array</p>\n<p><strong>不足之处：不能对DOM元素结点进行复制</strong></p>\n","head":{"title":"谈谈JavaScript之数组对象深拷贝","date":"30 Apr 2016","categories":["前端"],"tags":["js","深拷贝"]}}},"index":{"tagMap":{"cache":["H5之「离线应用」"],"indexedDB":["H5之「离线应用」"],"MarkDown":["MarkDown语法测试Demo"],"moka":["Moka-birth","hello-moka-desktop"],"spa":["Moka-birth"],"html":["b_vs_strong_&_i_vs_em_(html标签语义化)"],"js":["canvas绘制平面花瓣","js实现打字机效果","js实现的图片瀑布流","requestAnimationFrame_Vs_setInterval","「项目拾遗」几个计算机图形学的前端程序","从定时器到 Web Worker","捣鼓出一个简陋的图片轮播效果","看我Blog文章导航会动哎！","谈谈JavaScript之数组对象深拷贝"],"canvas":["canvas绘制平面花瓣","「项目拾遗」几个计算机图形学的前端程序","「项目拾遗」简单图形处理及图形绘制"],"页面效果":["canvas绘制平面花瓣","js实现打字机效果","js实现的图片瀑布流","play_css3_Animation","捣鼓出一个简陋的图片轮播效果","看我Blog文章导航会动哎！"],"react":["componentWillReceiveProps-vs-componentWillUpdate"],"git":["git捣鼓记之「Pull Request」","短暂的git捣鼓"],"electron":["hello-moka-desktop"],"css3":["js实现的图片瀑布流","play_css3_Animation"],"linux":["linux-C一周学习","linux-c-osx-sendfile"],"c":["linux-C一周学习"],"网络编程":["linux-c-osx-sendfile"],"总结":["never-simple-student","一次百度前端实习生面试","百度前端二面总结（已过）"],"随笔":["never-simple-student","「转」也许，这才是大学真正的意义"],"nodejs":["node-express-jade实现HTTP文件浏览器","「ECMAScript6」Promise介绍与nodejs实践运用(q.js)","「node网络编程」FTP客户端程序","「node网络编程」SMTP客户端程序","「滴滴滴，老司机开车了」nodejs爬取煎蛋网妹子图","图书销售系统（书窝）","基于socket-io实现的简易你画我猜","解决外网访问nodejs服务器（nginx反向代理）"],"express":["node-express-jade实现HTTP文件浏览器","「项目拾遗」HTTP文件浏览（静态文件-express4-x-md-code文件渲染）","图书销售系统（书窝）"],"jade":["node-express-jade实现HTTP文件浏览器","「项目拾遗」HTTP文件浏览（静态文件-express4-x-md-code文件渲染）","图书销售系统（书窝）"],"npm":["npm命令行小结"],"EMCAScript6":["「ECMAScript6」Promise介绍与nodejs实践运用(q.js)"],"promise":["「ECMAScript6」Promise介绍与nodejs实践运用(q.js)"],"ftp":["「node网络编程」FTP客户端程序"],"net":["「node网络编程」FTP客户端程序","「node网络编程」SMTP客户端程序","「滴滴滴，老司机开车了」nodejs爬取煎蛋网妹子图"],"smtp":["「node网络编程」SMTP客户端程序"],"图像处理":["「图像处理」图像的复原","「图像处理」图像的直方图均衡化","「项目拾遗」简单图形处理及图形绘制","数字验证码识别"],"思科":["「思科模拟器」建立DNS-HTTP服务","「思科模拟器」构建虚拟局域网（VLAN）"],"dns":["「思科模拟器」建立DNS-HTTP服务"],"http":["「思科模拟器」建立DNS-HTTP服务"],"vlan":["「思科模拟器」构建虚拟局域网（VLAN）"],"爬虫":["「滴滴滴，老司机开车了」nodejs爬取煎蛋网妹子图","为你的博客添加搜索功能吧"],"jit":["「转」为什么V8 JavaScript引擎这么快"],"垃圾回收":["「转」为什么V8 JavaScript引擎这么快"],"转":["「转」为什么V8 JavaScript引擎这么快","「转」也许，这才是大学真正的意义"],"markdown":["「项目拾遗」HTTP文件浏览（静态文件-express4-x-md-code文件渲染）","图书销售系统（书窝）","探究SegumentFault Markdown编辑器"],"highlight":["「项目拾遗」HTTP文件浏览（静态文件-express4-x-md-code文件渲染）","图书销售系统（书窝）"],"threejs":["「项目拾遗」几个计算机图形学的前端程序"],"websocket":["「项目拾遗」谈谈websocket","点歌机器人-来自网易云音乐"],"Java Web":["「项目拾遗」谈谈websocket"],"计划":["一次百度前端实习生面试"],"offer":["一次百度前端实习生面试","百度前端二面总结（已过）"],"Web Worker":["从定时器到 Web Worker"],"HTML5":["从定时器到 Web Worker"],"定时器":["从定时器到 Web Worker"],"事件循环":["从定时器到 Web Worker"],"前端":["分享一个图标搜索网站(font-awesome)"],"分享":["分享一个图标搜索网站(font-awesome)"],"上传":["分片上传与断点续传解决方案"],"后端":["分片上传与断点续传解决方案","数字验证码识别"],"less":["图书销售系统（书窝）"],"socket.io":["基于socket-io实现的简易你画我猜"],"Hexo":["感受Hexo的强大与高效（搭建Blog至GitHub Page教程）"],"float":["捣鼓出一个简陋的图片轮播效果"],"funny":["点歌机器人-来自网易云音乐"],"nginx":["解决外网访问nodejs服务器（nginx反向代理）"],"深拷贝":["谈谈JavaScript之数组对象深拷贝"]},"sorted":["hello-moka-desktop","never-simple-student","componentWillReceiveProps-vs-componentWillUpdate","linux-c-osx-sendfile","Moka-birth","npm命令行小结","linux-C一周学习","分片上传与断点续传解决方案","H5之「离线应用」","点歌机器人-来自网易云音乐","探究SegumentFault Markdown编辑器","为你的博客添加搜索功能吧","数字验证码识别","「滴滴滴，老司机开车了」nodejs爬取煎蛋网妹子图","图书销售系统（书窝）","「项目拾遗」HTTP文件浏览（静态文件-express4-x-md-code文件渲染）","「思科模拟器」建立DNS-HTTP服务","「项目拾遗」简单图形处理及图形绘制","「图像处理」图像的复原","「图像处理」图像的直方图均衡化","「思科模拟器」构建虚拟局域网（VLAN）","「node网络编程」SMTP客户端程序","「node网络编程」FTP客户端程序","node-express-jade实现HTTP文件浏览器","解决外网访问nodejs服务器（nginx反向代理）","基于socket-io实现的简易你画我猜","「项目拾遗」几个计算机图形学的前端程序","百度前端二面总结（已过）","「转」为什么V8 JavaScript引擎这么快","「ECMAScript6」Promise介绍与nodejs实践运用(q.js)","「项目拾遗」谈谈websocket","谈谈JavaScript之数组对象深拷贝","从定时器到 Web Worker","git捣鼓记之「Pull Request」","play_css3_Animation","canvas绘制平面花瓣","「转」也许，这才是大学真正的意义","js实现打字机效果","js实现的图片瀑布流","分享一个图标搜索网站(font-awesome)","b_vs_strong_&_i_vs_em_(html标签语义化)","捣鼓出一个简陋的图片轮播效果","短暂的git捣鼓","requestAnimationFrame_Vs_setInterval","感受Hexo的强大与高效（搭建Blog至GitHub Page教程）","MarkDown语法测试Demo","看我Blog文章导航会动哎！","一次百度前端实习生面试"]}}